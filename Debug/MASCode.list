
MASCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a350  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800a4d8  0800a4d8  0001a4d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a540  0800a540  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a540  0800a540  0001a540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a548  0800a548  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a548  0800a548  0001a548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a54c  0800a54c  0001a54c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800a550  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          0000215c  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002258  20002258  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d67e  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039e6  00000000  00000000  0003d7aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018f8  00000000  00000000  00041190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001798  00000000  00000000  00042a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026aaf  00000000  00000000  00044220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f090  00000000  00000000  0006accf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e049b  00000000  00000000  00089d5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016a1fa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006ab8  00000000  00000000  0016a24c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a4c0 	.word	0x0800a4c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	0800a4c0 	.word	0x0800a4c0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <Control_Init>:
#include "control.h"

void Control_Init(void) {
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr

080004da <Control_Loop>:

void Control_Loop(void) {
 80004da:	b480      	push	{r7}
 80004dc:	af00      	add	r7, sp, #0
}
 80004de:	bf00      	nop
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr

080004e8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004ec:	f001 fdba 	bl	8002064 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004f0:	f000 f830 	bl	8000554 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004f4:	f000 ff34 	bl	8001360 <MX_GPIO_Init>
	MX_ADC1_Init();
 80004f8:	f000 f896 	bl	8000628 <MX_ADC1_Init>
	MX_I2C1_Init();
 80004fc:	f000 f98a 	bl	8000814 <MX_I2C1_Init>
	MX_I2C3_Init();
 8000500:	f000 f9b6 	bl	8000870 <MX_I2C3_Init>
	MX_SPI3_Init();
 8000504:	f000 f9e2 	bl	80008cc <MX_SPI3_Init>
	MX_TIM1_Init();
 8000508:	f000 fa16 	bl	8000938 <MX_TIM1_Init>
	MX_TIM2_Init();
 800050c:	f000 fae0 	bl	8000ad0 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000510:	f000 fb66 	bl	8000be0 <MX_TIM3_Init>
	MX_TIM4_Init();
 8000514:	f000 fc04 	bl	8000d20 <MX_TIM4_Init>
	MX_TIM9_Init();
 8000518:	f000 fd36 	bl	8000f88 <MX_TIM9_Init>
	MX_TIM10_Init();
 800051c:	f000 fdaa 	bl	8001074 <MX_TIM10_Init>
	MX_TIM11_Init();
 8000520:	f000 fdfe 	bl	8001120 <MX_TIM11_Init>
	MX_TIM12_Init();
 8000524:	f000 fe52 	bl	80011cc <MX_TIM12_Init>
	MX_USART2_UART_Init();
 8000528:	f000 fec6 	bl	80012b8 <MX_USART2_UART_Init>
	MX_USART6_UART_Init();
 800052c:	f000 feee 	bl	800130c <MX_USART6_UART_Init>
	MX_ADC2_Init();
 8000530:	f000 f8cc 	bl	80006cc <MX_ADC2_Init>
	MX_ADC3_Init();
 8000534:	f000 f91c 	bl	8000770 <MX_ADC3_Init>
	MX_USB_DEVICE_Init();
 8000538:	f009 fa94 	bl	8009a64 <MX_USB_DEVICE_Init>
	MX_TIM5_Init();
 800053c:	f000 fc90 	bl	8000e60 <MX_TIM5_Init>
	MX_TIM7_Init();
 8000540:	f000 fce4 	bl	8000f0c <MX_TIM7_Init>
	/* USER CODE BEGIN 2 */
	HAL_Delay(100);
 8000544:	2064      	movs	r0, #100	; 0x64
 8000546:	f001 fdff 	bl	8002148 <HAL_Delay>
	Control_Init();
 800054a:	f7ff ffbf 	bl	80004cc <Control_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		Control_Loop();
 800054e:	f7ff ffc4 	bl	80004da <Control_Loop>
 8000552:	e7fc      	b.n	800054e <main+0x66>

08000554 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b094      	sub	sp, #80	; 0x50
 8000558:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800055a:	f107 0320 	add.w	r3, r7, #32
 800055e:	2230      	movs	r2, #48	; 0x30
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f009 ffa4 	bl	800a4b0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000578:	2300      	movs	r3, #0
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	4b28      	ldr	r3, [pc, #160]	; (8000620 <SystemClock_Config+0xcc>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	4a27      	ldr	r2, [pc, #156]	; (8000620 <SystemClock_Config+0xcc>)
 8000582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000586:	6413      	str	r3, [r2, #64]	; 0x40
 8000588:	4b25      	ldr	r3, [pc, #148]	; (8000620 <SystemClock_Config+0xcc>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000594:	2300      	movs	r3, #0
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	4b22      	ldr	r3, [pc, #136]	; (8000624 <SystemClock_Config+0xd0>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a21      	ldr	r2, [pc, #132]	; (8000624 <SystemClock_Config+0xd0>)
 800059e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005a2:	6013      	str	r3, [r2, #0]
 80005a4:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <SystemClock_Config+0xd0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b0:	2301      	movs	r3, #1
 80005b2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005b8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ba:	2302      	movs	r3, #2
 80005bc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005c2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80005c4:	2308      	movs	r3, #8
 80005c6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80005c8:	23a8      	movs	r3, #168	; 0xa8
 80005ca:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80005d0:	2307      	movs	r3, #7
 80005d2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005d4:	f107 0320 	add.w	r3, r7, #32
 80005d8:	4618      	mov	r0, r3
 80005da:	f003 fee9 	bl	80043b0 <HAL_RCC_OscConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x94>
		Error_Handler();
 80005e4:	f000 ffdc 	bl	80015a0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005e8:	230f      	movs	r3, #15
 80005ea:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ec:	2302      	movs	r3, #2
 80005ee:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005f8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fe:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2105      	movs	r1, #5
 8000606:	4618      	mov	r0, r3
 8000608:	f004 f94a 	bl	80048a0 <HAL_RCC_ClockConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0xc2>
		Error_Handler();
 8000612:	f000 ffc5 	bl	80015a0 <Error_Handler>
	}
}
 8000616:	bf00      	nop
 8000618:	3750      	adds	r7, #80	; 0x50
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40023800 	.word	0x40023800
 8000624:	40007000 	.word	0x40007000

08000628 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800062e:	463b      	mov	r3, r7
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800063a:	4b21      	ldr	r3, [pc, #132]	; (80006c0 <MX_ADC1_Init+0x98>)
 800063c:	4a21      	ldr	r2, [pc, #132]	; (80006c4 <MX_ADC1_Init+0x9c>)
 800063e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000640:	4b1f      	ldr	r3, [pc, #124]	; (80006c0 <MX_ADC1_Init+0x98>)
 8000642:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000646:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000648:	4b1d      	ldr	r3, [pc, #116]	; (80006c0 <MX_ADC1_Init+0x98>)
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 800064e:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <MX_ADC1_Init+0x98>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000654:	4b1a      	ldr	r3, [pc, #104]	; (80006c0 <MX_ADC1_Init+0x98>)
 8000656:	2200      	movs	r2, #0
 8000658:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800065a:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <MX_ADC1_Init+0x98>)
 800065c:	2200      	movs	r2, #0
 800065e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000662:	4b17      	ldr	r3, [pc, #92]	; (80006c0 <MX_ADC1_Init+0x98>)
 8000664:	2200      	movs	r2, #0
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000668:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <MX_ADC1_Init+0x98>)
 800066a:	4a17      	ldr	r2, [pc, #92]	; (80006c8 <MX_ADC1_Init+0xa0>)
 800066c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800066e:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <MX_ADC1_Init+0x98>)
 8000670:	2200      	movs	r2, #0
 8000672:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000674:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <MX_ADC1_Init+0x98>)
 8000676:	2201      	movs	r2, #1
 8000678:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800067a:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <MX_ADC1_Init+0x98>)
 800067c:	2200      	movs	r2, #0
 800067e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <MX_ADC1_Init+0x98>)
 8000684:	2201      	movs	r2, #1
 8000686:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000688:	480d      	ldr	r0, [pc, #52]	; (80006c0 <MX_ADC1_Init+0x98>)
 800068a:	f001 fd81 	bl	8002190 <HAL_ADC_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_ADC1_Init+0x70>
		Error_Handler();
 8000694:	f000 ff84 	bl	80015a0 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 8000698:	230a      	movs	r3, #10
 800069a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800069c:	2301      	movs	r3, #1
 800069e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80006a4:	463b      	mov	r3, r7
 80006a6:	4619      	mov	r1, r3
 80006a8:	4805      	ldr	r0, [pc, #20]	; (80006c0 <MX_ADC1_Init+0x98>)
 80006aa:	f001 fdb5 	bl	8002218 <HAL_ADC_ConfigChannel>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_ADC1_Init+0x90>
		Error_Handler();
 80006b4:	f000 ff74 	bl	80015a0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	3710      	adds	r7, #16
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000118 	.word	0x20000118
 80006c4:	40012000 	.word	0x40012000
 80006c8:	0f000001 	.word	0x0f000001

080006cc <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80006d2:	463b      	mov	r3, r7
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC2_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc2.Instance = ADC2;
 80006de:	4b21      	ldr	r3, [pc, #132]	; (8000764 <MX_ADC2_Init+0x98>)
 80006e0:	4a21      	ldr	r2, [pc, #132]	; (8000768 <MX_ADC2_Init+0x9c>)
 80006e2:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <MX_ADC2_Init+0x98>)
 80006e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006ea:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006ec:	4b1d      	ldr	r3, [pc, #116]	; (8000764 <MX_ADC2_Init+0x98>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = DISABLE;
 80006f2:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <MX_ADC2_Init+0x98>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = DISABLE;
 80006f8:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <MX_ADC2_Init+0x98>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006fe:	4b19      	ldr	r3, [pc, #100]	; (8000764 <MX_ADC2_Init+0x98>)
 8000700:	2200      	movs	r2, #0
 8000702:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000706:	4b17      	ldr	r3, [pc, #92]	; (8000764 <MX_ADC2_Init+0x98>)
 8000708:	2200      	movs	r2, #0
 800070a:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800070c:	4b15      	ldr	r3, [pc, #84]	; (8000764 <MX_ADC2_Init+0x98>)
 800070e:	4a17      	ldr	r2, [pc, #92]	; (800076c <MX_ADC2_Init+0xa0>)
 8000710:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <MX_ADC2_Init+0x98>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <MX_ADC2_Init+0x98>)
 800071a:	2201      	movs	r2, #1
 800071c:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_ADC2_Init+0x98>)
 8000720:	2200      	movs	r2, #0
 8000722:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_ADC2_Init+0x98>)
 8000728:	2201      	movs	r2, #1
 800072a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 800072c:	480d      	ldr	r0, [pc, #52]	; (8000764 <MX_ADC2_Init+0x98>)
 800072e:	f001 fd2f 	bl	8002190 <HAL_ADC_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_ADC2_Init+0x70>
		Error_Handler();
 8000738:	f000 ff32 	bl	80015a0 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 800073c:	2301      	movs	r3, #1
 800073e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000740:	2301      	movs	r3, #1
 8000742:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000744:	2300      	movs	r3, #0
 8000746:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8000748:	463b      	mov	r3, r7
 800074a:	4619      	mov	r1, r3
 800074c:	4805      	ldr	r0, [pc, #20]	; (8000764 <MX_ADC2_Init+0x98>)
 800074e:	f001 fd63 	bl	8002218 <HAL_ADC_ConfigChannel>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_ADC2_Init+0x90>
		Error_Handler();
 8000758:	f000 ff22 	bl	80015a0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000160 	.word	0x20000160
 8000768:	40012100 	.word	0x40012100
 800076c:	0f000001 	.word	0x0f000001

08000770 <MX_ADC3_Init>:
/**
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000776:	463b      	mov	r3, r7
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC3_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 8000782:	4b21      	ldr	r3, [pc, #132]	; (8000808 <MX_ADC3_Init+0x98>)
 8000784:	4a21      	ldr	r2, [pc, #132]	; (800080c <MX_ADC3_Init+0x9c>)
 8000786:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000788:	4b1f      	ldr	r3, [pc, #124]	; (8000808 <MX_ADC3_Init+0x98>)
 800078a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800078e:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000790:	4b1d      	ldr	r3, [pc, #116]	; (8000808 <MX_ADC3_Init+0x98>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = DISABLE;
 8000796:	4b1c      	ldr	r3, [pc, #112]	; (8000808 <MX_ADC3_Init+0x98>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 800079c:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <MX_ADC3_Init+0x98>)
 800079e:	2200      	movs	r2, #0
 80007a0:	761a      	strb	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 80007a2:	4b19      	ldr	r3, [pc, #100]	; (8000808 <MX_ADC3_Init+0x98>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007aa:	4b17      	ldr	r3, [pc, #92]	; (8000808 <MX_ADC3_Init+0x98>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007b0:	4b15      	ldr	r3, [pc, #84]	; (8000808 <MX_ADC3_Init+0x98>)
 80007b2:	4a17      	ldr	r2, [pc, #92]	; (8000810 <MX_ADC3_Init+0xa0>)
 80007b4:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007b6:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_ADC3_Init+0x98>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_ADC3_Init+0x98>)
 80007be:	2201      	movs	r2, #1
 80007c0:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_ADC3_Init+0x98>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_ADC3_Init+0x98>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 80007d0:	480d      	ldr	r0, [pc, #52]	; (8000808 <MX_ADC3_Init+0x98>)
 80007d2:	f001 fcdd 	bl	8002190 <HAL_ADC_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_ADC3_Init+0x70>
		Error_Handler();
 80007dc:	f000 fee0 	bl	80015a0 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_13;
 80007e0:	230d      	movs	r3, #13
 80007e2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80007e4:	2301      	movs	r3, #1
 80007e6:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 80007ec:	463b      	mov	r3, r7
 80007ee:	4619      	mov	r1, r3
 80007f0:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_ADC3_Init+0x98>)
 80007f2:	f001 fd11 	bl	8002218 <HAL_ADC_ConfigChannel>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_ADC3_Init+0x90>
		Error_Handler();
 80007fc:	f000 fed0 	bl	80015a0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	200001a8 	.word	0x200001a8
 800080c:	40012200 	.word	0x40012200
 8000810:	0f000001 	.word	0x0f000001

08000814 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <MX_I2C1_Init+0x50>)
 800081a:	4a13      	ldr	r2, [pc, #76]	; (8000868 <MX_I2C1_Init+0x54>)
 800081c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_I2C1_Init+0x50>)
 8000820:	4a12      	ldr	r2, [pc, #72]	; (800086c <MX_I2C1_Init+0x58>)
 8000822:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_I2C1_Init+0x50>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_I2C1_Init+0x50>)
 800082c:	2200      	movs	r2, #0
 800082e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_I2C1_Init+0x50>)
 8000832:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000836:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000838:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <MX_I2C1_Init+0x50>)
 800083a:	2200      	movs	r2, #0
 800083c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_I2C1_Init+0x50>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000844:	4b07      	ldr	r3, [pc, #28]	; (8000864 <MX_I2C1_Init+0x50>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_I2C1_Init+0x50>)
 800084c:	2200      	movs	r2, #0
 800084e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000850:	4804      	ldr	r0, [pc, #16]	; (8000864 <MX_I2C1_Init+0x50>)
 8000852:	f002 f9eb 	bl	8002c2c <HAL_I2C_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_I2C1_Init+0x4c>
		Error_Handler();
 800085c:	f000 fea0 	bl	80015a0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	200001f0 	.word	0x200001f0
 8000868:	40005400 	.word	0x40005400
 800086c:	000186a0 	.word	0x000186a0

08000870 <MX_I2C3_Init>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <MX_I2C3_Init+0x50>)
 8000876:	4a13      	ldr	r2, [pc, #76]	; (80008c4 <MX_I2C3_Init+0x54>)
 8000878:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 100000;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_I2C3_Init+0x50>)
 800087c:	4a12      	ldr	r2, [pc, #72]	; (80008c8 <MX_I2C3_Init+0x58>)
 800087e:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_I2C3_Init+0x50>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_I2C3_Init+0x50>)
 8000888:	2200      	movs	r2, #0
 800088a:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_I2C3_Init+0x50>)
 800088e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000892:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000894:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <MX_I2C3_Init+0x50>)
 8000896:	2200      	movs	r2, #0
 8000898:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_I2C3_Init+0x50>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008a0:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <MX_I2C3_Init+0x50>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_I2C3_Init+0x50>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 80008ac:	4804      	ldr	r0, [pc, #16]	; (80008c0 <MX_I2C3_Init+0x50>)
 80008ae:	f002 f9bd 	bl	8002c2c <HAL_I2C_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_I2C3_Init+0x4c>
		Error_Handler();
 80008b8:	f000 fe72 	bl	80015a0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000244 	.word	0x20000244
 80008c4:	40005c00 	.word	0x40005c00
 80008c8:	000186a0 	.word	0x000186a0

080008cc <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 80008d0:	4b17      	ldr	r3, [pc, #92]	; (8000930 <MX_SPI3_Init+0x64>)
 80008d2:	4a18      	ldr	r2, [pc, #96]	; (8000934 <MX_SPI3_Init+0x68>)
 80008d4:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 80008d6:	4b16      	ldr	r3, [pc, #88]	; (8000930 <MX_SPI3_Init+0x64>)
 80008d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008dc:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80008de:	4b14      	ldr	r3, [pc, #80]	; (8000930 <MX_SPI3_Init+0x64>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <MX_SPI3_Init+0x64>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_SPI3_Init+0x64>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_SPI3_Init+0x64>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <MX_SPI3_Init+0x64>)
 80008f8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80008fc:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008fe:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <MX_SPI3_Init+0x64>)
 8000900:	2200      	movs	r2, #0
 8000902:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000904:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <MX_SPI3_Init+0x64>)
 8000906:	2200      	movs	r2, #0
 8000908:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_SPI3_Init+0x64>)
 800090c:	2200      	movs	r2, #0
 800090e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000910:	4b07      	ldr	r3, [pc, #28]	; (8000930 <MX_SPI3_Init+0x64>)
 8000912:	2200      	movs	r2, #0
 8000914:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 10;
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <MX_SPI3_Init+0x64>)
 8000918:	220a      	movs	r2, #10
 800091a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 800091c:	4804      	ldr	r0, [pc, #16]	; (8000930 <MX_SPI3_Init+0x64>)
 800091e:	f004 f9dd 	bl	8004cdc <HAL_SPI_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_SPI3_Init+0x60>
		Error_Handler();
 8000928:	f000 fe3a 	bl	80015a0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000298 	.word	0x20000298
 8000934:	40003c00 	.word	0x40003c00

08000938 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b096      	sub	sp, #88	; 0x58
 800093c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800093e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800094c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
 8000964:	611a      	str	r2, [r3, #16]
 8000966:	615a      	str	r2, [r3, #20]
 8000968:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	2220      	movs	r2, #32
 800096e:	2100      	movs	r1, #0
 8000970:	4618      	mov	r0, r3
 8000972:	f009 fd9d 	bl	800a4b0 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000976:	4b54      	ldr	r3, [pc, #336]	; (8000ac8 <MX_TIM1_Init+0x190>)
 8000978:	4a54      	ldr	r2, [pc, #336]	; (8000acc <MX_TIM1_Init+0x194>)
 800097a:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800097c:	4b52      	ldr	r3, [pc, #328]	; (8000ac8 <MX_TIM1_Init+0x190>)
 800097e:	2200      	movs	r2, #0
 8000980:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000982:	4b51      	ldr	r3, [pc, #324]	; (8000ac8 <MX_TIM1_Init+0x190>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8000988:	4b4f      	ldr	r3, [pc, #316]	; (8000ac8 <MX_TIM1_Init+0x190>)
 800098a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800098e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000990:	4b4d      	ldr	r3, [pc, #308]	; (8000ac8 <MX_TIM1_Init+0x190>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000996:	4b4c      	ldr	r3, [pc, #304]	; (8000ac8 <MX_TIM1_Init+0x190>)
 8000998:	2200      	movs	r2, #0
 800099a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099c:	4b4a      	ldr	r3, [pc, #296]	; (8000ac8 <MX_TIM1_Init+0x190>)
 800099e:	2200      	movs	r2, #0
 80009a0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80009a2:	4849      	ldr	r0, [pc, #292]	; (8000ac8 <MX_TIM1_Init+0x190>)
 80009a4:	f004 fa23 	bl	8004dee <HAL_TIM_Base_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM1_Init+0x7a>
		Error_Handler();
 80009ae:	f000 fdf7 	bl	80015a0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b6:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80009b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009bc:	4619      	mov	r1, r3
 80009be:	4842      	ldr	r0, [pc, #264]	; (8000ac8 <MX_TIM1_Init+0x190>)
 80009c0:	f004 fcf8 	bl	80053b4 <HAL_TIM_ConfigClockSource>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM1_Init+0x96>
		Error_Handler();
 80009ca:	f000 fde9 	bl	80015a0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80009ce:	483e      	ldr	r0, [pc, #248]	; (8000ac8 <MX_TIM1_Init+0x190>)
 80009d0:	f004 facc 	bl	8004f6c <HAL_TIM_PWM_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM1_Init+0xa6>
		Error_Handler();
 80009da:	f000 fde1 	bl	80015a0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009de:	2300      	movs	r3, #0
 80009e0:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e2:	2300      	movs	r3, #0
 80009e4:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80009e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009ea:	4619      	mov	r1, r3
 80009ec:	4836      	ldr	r0, [pc, #216]	; (8000ac8 <MX_TIM1_Init+0x190>)
 80009ee:	f005 f8c5 	bl	8005b7c <HAL_TIMEx_MasterConfigSynchronization>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 80009f8:	f000 fdd2 	bl	80015a0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009fc:	2360      	movs	r3, #96	; 0x60
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a10:	2300      	movs	r3, #0
 8000a12:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a14:	2300      	movs	r3, #0
 8000a16:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8000a18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4829      	ldr	r0, [pc, #164]	; (8000ac8 <MX_TIM1_Init+0x190>)
 8000a22:	f004 fc05 	bl	8005230 <HAL_TIM_PWM_ConfigChannel>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM1_Init+0xf8>
			!= HAL_OK) {
		Error_Handler();
 8000a2c:	f000 fdb8 	bl	80015a0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 8000a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a34:	2204      	movs	r2, #4
 8000a36:	4619      	mov	r1, r3
 8000a38:	4823      	ldr	r0, [pc, #140]	; (8000ac8 <MX_TIM1_Init+0x190>)
 8000a3a:	f004 fbf9 	bl	8005230 <HAL_TIM_PWM_ConfigChannel>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM1_Init+0x110>
			!= HAL_OK) {
		Error_Handler();
 8000a44:	f000 fdac 	bl	80015a0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 8000a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4c:	2208      	movs	r2, #8
 8000a4e:	4619      	mov	r1, r3
 8000a50:	481d      	ldr	r0, [pc, #116]	; (8000ac8 <MX_TIM1_Init+0x190>)
 8000a52:	f004 fbed 	bl	8005230 <HAL_TIM_PWM_ConfigChannel>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM1_Init+0x128>
			!= HAL_OK) {
		Error_Handler();
 8000a5c:	f000 fda0 	bl	80015a0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4)
 8000a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a64:	220c      	movs	r2, #12
 8000a66:	4619      	mov	r1, r3
 8000a68:	4817      	ldr	r0, [pc, #92]	; (8000ac8 <MX_TIM1_Init+0x190>)
 8000a6a:	f004 fbe1 	bl	8005230 <HAL_TIM_PWM_ConfigChannel>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM1_Init+0x140>
			!= HAL_OK) {
		Error_Handler();
 8000a74:	f000 fd94 	bl	80015a0 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a90:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a92:	2300      	movs	r3, #0
 8000a94:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	4619      	mov	r1, r3
 8000a9a:	480b      	ldr	r0, [pc, #44]	; (8000ac8 <MX_TIM1_Init+0x190>)
 8000a9c:	f005 f8ea 	bl	8005c74 <HAL_TIMEx_ConfigBreakDeadTime>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM1_Init+0x172>
			!= HAL_OK) {
		Error_Handler();
 8000aa6:	f000 fd7b 	bl	80015a0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */
	if (HAL_TIM_Base_Start_IT(&htim1) != HAL_OK) {
 8000aaa:	4807      	ldr	r0, [pc, #28]	; (8000ac8 <MX_TIM1_Init+0x190>)
 8000aac:	f004 f9ee 	bl	8004e8c <HAL_TIM_Base_Start_IT>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM1_Init+0x182>
		Error_Handler();
 8000ab6:	f000 fd73 	bl	80015a0 <Error_Handler>
	}
	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000aba:	4803      	ldr	r0, [pc, #12]	; (8000ac8 <MX_TIM1_Init+0x190>)
 8000abc:	f001 f876 	bl	8001bac <HAL_TIM_MspPostInit>

}
 8000ac0:	bf00      	nop
 8000ac2:	3758      	adds	r7, #88	; 0x58
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	200002f0 	.word	0x200002f0
 8000acc:	40010000 	.word	0x40010000

08000ad0 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08e      	sub	sp, #56	; 0x38
 8000ad4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000ad6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000ae4:	f107 0320 	add.w	r3, r7, #32
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
 8000afc:	615a      	str	r2, [r3, #20]
 8000afe:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000b00:	4b36      	ldr	r3, [pc, #216]	; (8000bdc <MX_TIM2_Init+0x10c>)
 8000b02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b06:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8000b08:	4b34      	ldr	r3, [pc, #208]	; (8000bdc <MX_TIM2_Init+0x10c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0e:	4b33      	ldr	r3, [pc, #204]	; (8000bdc <MX_TIM2_Init+0x10c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8000b14:	4b31      	ldr	r3, [pc, #196]	; (8000bdc <MX_TIM2_Init+0x10c>)
 8000b16:	f04f 32ff 	mov.w	r2, #4294967295
 8000b1a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b1c:	4b2f      	ldr	r3, [pc, #188]	; (8000bdc <MX_TIM2_Init+0x10c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b22:	4b2e      	ldr	r3, [pc, #184]	; (8000bdc <MX_TIM2_Init+0x10c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000b28:	482c      	ldr	r0, [pc, #176]	; (8000bdc <MX_TIM2_Init+0x10c>)
 8000b2a:	f004 f960 	bl	8004dee <HAL_TIM_Base_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM2_Init+0x68>
		Error_Handler();
 8000b34:	f000 fd34 	bl	80015a0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b3c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000b3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b42:	4619      	mov	r1, r3
 8000b44:	4825      	ldr	r0, [pc, #148]	; (8000bdc <MX_TIM2_Init+0x10c>)
 8000b46:	f004 fc35 	bl	80053b4 <HAL_TIM_ConfigClockSource>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM2_Init+0x84>
		Error_Handler();
 8000b50:	f000 fd26 	bl	80015a0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8000b54:	4821      	ldr	r0, [pc, #132]	; (8000bdc <MX_TIM2_Init+0x10c>)
 8000b56:	f004 fa09 	bl	8004f6c <HAL_TIM_PWM_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM2_Init+0x94>
		Error_Handler();
 8000b60:	f000 fd1e 	bl	80015a0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b64:	2300      	movs	r3, #0
 8000b66:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000b6c:	f107 0320 	add.w	r3, r7, #32
 8000b70:	4619      	mov	r1, r3
 8000b72:	481a      	ldr	r0, [pc, #104]	; (8000bdc <MX_TIM2_Init+0x10c>)
 8000b74:	f005 f802 	bl	8005b7c <HAL_TIMEx_MasterConfigSynchronization>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM2_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 8000b7e:	f000 fd0f 	bl	80015a0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b82:	2360      	movs	r3, #96	; 0x60
 8000b84:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	2208      	movs	r2, #8
 8000b96:	4619      	mov	r1, r3
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_TIM2_Init+0x10c>)
 8000b9a:	f004 fb49 	bl	8005230 <HAL_TIM_PWM_ConfigChannel>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM2_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8000ba4:	f000 fcfc 	bl	80015a0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4)
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	220c      	movs	r2, #12
 8000bac:	4619      	mov	r1, r3
 8000bae:	480b      	ldr	r0, [pc, #44]	; (8000bdc <MX_TIM2_Init+0x10c>)
 8000bb0:	f004 fb3e 	bl	8005230 <HAL_TIM_PWM_ConfigChannel>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_TIM2_Init+0xee>
			!= HAL_OK) {
		Error_Handler();
 8000bba:	f000 fcf1 	bl	80015a0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */
	if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 8000bbe:	4807      	ldr	r0, [pc, #28]	; (8000bdc <MX_TIM2_Init+0x10c>)
 8000bc0:	f004 f964 	bl	8004e8c <HAL_TIM_Base_Start_IT>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_TIM2_Init+0xfe>
		Error_Handler();
 8000bca:	f000 fce9 	bl	80015a0 <Error_Handler>
	}
	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000bce:	4803      	ldr	r0, [pc, #12]	; (8000bdc <MX_TIM2_Init+0x10c>)
 8000bd0:	f000 ffec 	bl	8001bac <HAL_TIM_MspPostInit>

}
 8000bd4:	bf00      	nop
 8000bd6:	3738      	adds	r7, #56	; 0x38
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000338 	.word	0x20000338

08000be0 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08e      	sub	sp, #56	; 0x38
 8000be4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000be6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000bf4:	f107 0320 	add.w	r3, r7, #32
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
 8000c0c:	615a      	str	r2, [r3, #20]
 8000c0e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000c10:	4b41      	ldr	r3, [pc, #260]	; (8000d18 <MX_TIM3_Init+0x138>)
 8000c12:	4a42      	ldr	r2, [pc, #264]	; (8000d1c <MX_TIM3_Init+0x13c>)
 8000c14:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8000c16:	4b40      	ldr	r3, [pc, #256]	; (8000d18 <MX_TIM3_Init+0x138>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1c:	4b3e      	ldr	r3, [pc, #248]	; (8000d18 <MX_TIM3_Init+0x138>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8000c22:	4b3d      	ldr	r3, [pc, #244]	; (8000d18 <MX_TIM3_Init+0x138>)
 8000c24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c28:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c2a:	4b3b      	ldr	r3, [pc, #236]	; (8000d18 <MX_TIM3_Init+0x138>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c30:	4b39      	ldr	r3, [pc, #228]	; (8000d18 <MX_TIM3_Init+0x138>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000c36:	4838      	ldr	r0, [pc, #224]	; (8000d18 <MX_TIM3_Init+0x138>)
 8000c38:	f004 f8d9 	bl	8004dee <HAL_TIM_Base_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_TIM3_Init+0x66>
		Error_Handler();
 8000c42:	f000 fcad 	bl	80015a0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000c4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c50:	4619      	mov	r1, r3
 8000c52:	4831      	ldr	r0, [pc, #196]	; (8000d18 <MX_TIM3_Init+0x138>)
 8000c54:	f004 fbae 	bl	80053b4 <HAL_TIM_ConfigClockSource>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM3_Init+0x82>
		Error_Handler();
 8000c5e:	f000 fc9f 	bl	80015a0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000c62:	482d      	ldr	r0, [pc, #180]	; (8000d18 <MX_TIM3_Init+0x138>)
 8000c64:	f004 f982 	bl	8004f6c <HAL_TIM_PWM_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM3_Init+0x92>
		Error_Handler();
 8000c6e:	f000 fc97 	bl	80015a0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c72:	2300      	movs	r3, #0
 8000c74:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c76:	2300      	movs	r3, #0
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000c7a:	f107 0320 	add.w	r3, r7, #32
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4825      	ldr	r0, [pc, #148]	; (8000d18 <MX_TIM3_Init+0x138>)
 8000c82:	f004 ff7b 	bl	8005b7c <HAL_TIMEx_MasterConfigSynchronization>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM3_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8000c8c:	f000 fc88 	bl	80015a0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c90:	2360      	movs	r3, #96	; 0x60
 8000c92:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8000ca0:	1d3b      	adds	r3, r7, #4
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	481c      	ldr	r0, [pc, #112]	; (8000d18 <MX_TIM3_Init+0x138>)
 8000ca8:	f004 fac2 	bl	8005230 <HAL_TIM_PWM_ConfigChannel>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM3_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 8000cb2:	f000 fc75 	bl	80015a0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	2204      	movs	r2, #4
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4816      	ldr	r0, [pc, #88]	; (8000d18 <MX_TIM3_Init+0x138>)
 8000cbe:	f004 fab7 	bl	8005230 <HAL_TIM_PWM_ConfigChannel>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM3_Init+0xec>
			!= HAL_OK) {
		Error_Handler();
 8000cc8:	f000 fc6a 	bl	80015a0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	2208      	movs	r2, #8
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4811      	ldr	r0, [pc, #68]	; (8000d18 <MX_TIM3_Init+0x138>)
 8000cd4:	f004 faac 	bl	8005230 <HAL_TIM_PWM_ConfigChannel>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_TIM3_Init+0x102>
			!= HAL_OK) {
		Error_Handler();
 8000cde:	f000 fc5f 	bl	80015a0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4)
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	220c      	movs	r2, #12
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	480b      	ldr	r0, [pc, #44]	; (8000d18 <MX_TIM3_Init+0x138>)
 8000cea:	f004 faa1 	bl	8005230 <HAL_TIM_PWM_ConfigChannel>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM3_Init+0x118>
			!= HAL_OK) {
		Error_Handler();
 8000cf4:	f000 fc54 	bl	80015a0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */
	if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK) {
 8000cf8:	4807      	ldr	r0, [pc, #28]	; (8000d18 <MX_TIM3_Init+0x138>)
 8000cfa:	f004 f8c7 	bl	8004e8c <HAL_TIM_Base_Start_IT>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_TIM3_Init+0x128>
		Error_Handler();
 8000d04:	f000 fc4c 	bl	80015a0 <Error_Handler>
	}
	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000d08:	4803      	ldr	r0, [pc, #12]	; (8000d18 <MX_TIM3_Init+0x138>)
 8000d0a:	f000 ff4f 	bl	8001bac <HAL_TIM_MspPostInit>

}
 8000d0e:	bf00      	nop
 8000d10:	3738      	adds	r7, #56	; 0x38
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000380 	.word	0x20000380
 8000d1c:	40000400 	.word	0x40000400

08000d20 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08e      	sub	sp, #56	; 0x38
 8000d24:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000d26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000d34:	f107 0320 	add.w	r3, r7, #32
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
 8000d4c:	615a      	str	r2, [r3, #20]
 8000d4e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8000d50:	4b41      	ldr	r3, [pc, #260]	; (8000e58 <MX_TIM4_Init+0x138>)
 8000d52:	4a42      	ldr	r2, [pc, #264]	; (8000e5c <MX_TIM4_Init+0x13c>)
 8000d54:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8000d56:	4b40      	ldr	r3, [pc, #256]	; (8000e58 <MX_TIM4_Init+0x138>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d5c:	4b3e      	ldr	r3, [pc, #248]	; (8000e58 <MX_TIM4_Init+0x138>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8000d62:	4b3d      	ldr	r3, [pc, #244]	; (8000e58 <MX_TIM4_Init+0x138>)
 8000d64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d68:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d6a:	4b3b      	ldr	r3, [pc, #236]	; (8000e58 <MX_TIM4_Init+0x138>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d70:	4b39      	ldr	r3, [pc, #228]	; (8000e58 <MX_TIM4_Init+0x138>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8000d76:	4838      	ldr	r0, [pc, #224]	; (8000e58 <MX_TIM4_Init+0x138>)
 8000d78:	f004 f839 	bl	8004dee <HAL_TIM_Base_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM4_Init+0x66>
		Error_Handler();
 8000d82:	f000 fc0d 	bl	80015a0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d8a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8000d8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d90:	4619      	mov	r1, r3
 8000d92:	4831      	ldr	r0, [pc, #196]	; (8000e58 <MX_TIM4_Init+0x138>)
 8000d94:	f004 fb0e 	bl	80053b4 <HAL_TIM_ConfigClockSource>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_TIM4_Init+0x82>
		Error_Handler();
 8000d9e:	f000 fbff 	bl	80015a0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8000da2:	482d      	ldr	r0, [pc, #180]	; (8000e58 <MX_TIM4_Init+0x138>)
 8000da4:	f004 f8e2 	bl	8004f6c <HAL_TIM_PWM_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM4_Init+0x92>
		Error_Handler();
 8000dae:	f000 fbf7 	bl	80015a0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db2:	2300      	movs	r3, #0
 8000db4:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8000dba:	f107 0320 	add.w	r3, r7, #32
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4825      	ldr	r0, [pc, #148]	; (8000e58 <MX_TIM4_Init+0x138>)
 8000dc2:	f004 fedb 	bl	8005b7c <HAL_TIMEx_MasterConfigSynchronization>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_TIM4_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8000dcc:	f000 fbe8 	bl	80015a0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dd0:	2360      	movs	r3, #96	; 0x60
 8000dd2:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	2200      	movs	r2, #0
 8000de4:	4619      	mov	r1, r3
 8000de6:	481c      	ldr	r0, [pc, #112]	; (8000e58 <MX_TIM4_Init+0x138>)
 8000de8:	f004 fa22 	bl	8005230 <HAL_TIM_PWM_ConfigChannel>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_TIM4_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 8000df2:	f000 fbd5 	bl	80015a0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	2204      	movs	r2, #4
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4816      	ldr	r0, [pc, #88]	; (8000e58 <MX_TIM4_Init+0x138>)
 8000dfe:	f004 fa17 	bl	8005230 <HAL_TIM_PWM_ConfigChannel>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM4_Init+0xec>
			!= HAL_OK) {
		Error_Handler();
 8000e08:	f000 fbca 	bl	80015a0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	2208      	movs	r2, #8
 8000e10:	4619      	mov	r1, r3
 8000e12:	4811      	ldr	r0, [pc, #68]	; (8000e58 <MX_TIM4_Init+0x138>)
 8000e14:	f004 fa0c 	bl	8005230 <HAL_TIM_PWM_ConfigChannel>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_TIM4_Init+0x102>
			!= HAL_OK) {
		Error_Handler();
 8000e1e:	f000 fbbf 	bl	80015a0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	220c      	movs	r2, #12
 8000e26:	4619      	mov	r1, r3
 8000e28:	480b      	ldr	r0, [pc, #44]	; (8000e58 <MX_TIM4_Init+0x138>)
 8000e2a:	f004 fa01 	bl	8005230 <HAL_TIM_PWM_ConfigChannel>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM4_Init+0x118>
			!= HAL_OK) {
		Error_Handler();
 8000e34:	f000 fbb4 	bl	80015a0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */
	if (HAL_TIM_Base_Start_IT(&htim4) != HAL_OK) {
 8000e38:	4807      	ldr	r0, [pc, #28]	; (8000e58 <MX_TIM4_Init+0x138>)
 8000e3a:	f004 f827 	bl	8004e8c <HAL_TIM_Base_Start_IT>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_TIM4_Init+0x128>
		Error_Handler();
 8000e44:	f000 fbac 	bl	80015a0 <Error_Handler>
	}
	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8000e48:	4803      	ldr	r0, [pc, #12]	; (8000e58 <MX_TIM4_Init+0x138>)
 8000e4a:	f000 feaf 	bl	8001bac <HAL_TIM_MspPostInit>

}
 8000e4e:	bf00      	nop
 8000e50:	3738      	adds	r7, #56	; 0x38
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	200003c8 	.word	0x200003c8
 8000e5c:	40000800 	.word	0x40000800

08000e60 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000e66:	f107 0308 	add.w	r3, r7, #8
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000e74:	463b      	mov	r3, r7
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8000e7c:	4b21      	ldr	r3, [pc, #132]	; (8000f04 <MX_TIM5_Init+0xa4>)
 8000e7e:	4a22      	ldr	r2, [pc, #136]	; (8000f08 <MX_TIM5_Init+0xa8>)
 8000e80:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8000e82:	4b20      	ldr	r3, [pc, #128]	; (8000f04 <MX_TIM5_Init+0xa4>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e88:	4b1e      	ldr	r3, [pc, #120]	; (8000f04 <MX_TIM5_Init+0xa4>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8000e8e:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <MX_TIM5_Init+0xa4>)
 8000e90:	f04f 32ff 	mov.w	r2, #4294967295
 8000e94:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e96:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <MX_TIM5_Init+0xa4>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e9c:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <MX_TIM5_Init+0xa4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8000ea2:	4818      	ldr	r0, [pc, #96]	; (8000f04 <MX_TIM5_Init+0xa4>)
 8000ea4:	f003 ffa3 	bl	8004dee <HAL_TIM_Base_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_TIM5_Init+0x52>
		Error_Handler();
 8000eae:	f000 fb77 	bl	80015a0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb6:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8000eb8:	f107 0308 	add.w	r3, r7, #8
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4811      	ldr	r0, [pc, #68]	; (8000f04 <MX_TIM5_Init+0xa4>)
 8000ec0:	f004 fa78 	bl	80053b4 <HAL_TIM_ConfigClockSource>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_TIM5_Init+0x6e>
		Error_Handler();
 8000eca:	f000 fb69 	bl	80015a0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	4619      	mov	r1, r3
 8000eda:	480a      	ldr	r0, [pc, #40]	; (8000f04 <MX_TIM5_Init+0xa4>)
 8000edc:	f004 fe4e 	bl	8005b7c <HAL_TIMEx_MasterConfigSynchronization>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM5_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8000ee6:	f000 fb5b 	bl	80015a0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */
	if (HAL_TIM_Base_Start_IT(&htim5) != HAL_OK) {
 8000eea:	4806      	ldr	r0, [pc, #24]	; (8000f04 <MX_TIM5_Init+0xa4>)
 8000eec:	f003 ffce 	bl	8004e8c <HAL_TIM_Base_Start_IT>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_TIM5_Init+0x9a>
		Error_Handler();
 8000ef6:	f000 fb53 	bl	80015a0 <Error_Handler>
	}
	/* USER CODE END TIM5_Init 2 */

}
 8000efa:	bf00      	nop
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000410 	.word	0x20000410
 8000f08:	40000c00 	.word	0x40000c00

08000f0c <MX_TIM7_Init>:
/**
 * @brief TIM7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM7_Init(void) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000f12:	463b      	mov	r3, r7
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
 8000f1a:	4b19      	ldr	r3, [pc, #100]	; (8000f80 <MX_TIM7_Init+0x74>)
 8000f1c:	4a19      	ldr	r2, [pc, #100]	; (8000f84 <MX_TIM7_Init+0x78>)
 8000f1e:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 0;
 8000f20:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <MX_TIM7_Init+0x74>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f26:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <MX_TIM7_Init+0x74>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 65535;
 8000f2c:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <MX_TIM7_Init+0x74>)
 8000f2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f32:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <MX_TIM7_Init+0x74>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8000f3a:	4811      	ldr	r0, [pc, #68]	; (8000f80 <MX_TIM7_Init+0x74>)
 8000f3c:	f003 ff57 	bl	8004dee <HAL_TIM_Base_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM7_Init+0x3e>
		Error_Handler();
 8000f46:	f000 fb2b 	bl	80015a0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig)
 8000f52:	463b      	mov	r3, r7
 8000f54:	4619      	mov	r1, r3
 8000f56:	480a      	ldr	r0, [pc, #40]	; (8000f80 <MX_TIM7_Init+0x74>)
 8000f58:	f004 fe10 	bl	8005b7c <HAL_TIMEx_MasterConfigSynchronization>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM7_Init+0x5a>
			!= HAL_OK) {
		Error_Handler();
 8000f62:	f000 fb1d 	bl	80015a0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM7_Init 2 */
	if (HAL_TIM_Base_Start_IT(&htim7) != HAL_OK) {
 8000f66:	4806      	ldr	r0, [pc, #24]	; (8000f80 <MX_TIM7_Init+0x74>)
 8000f68:	f003 ff90 	bl	8004e8c <HAL_TIM_Base_Start_IT>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM7_Init+0x6a>
		Error_Handler();
 8000f72:	f000 fb15 	bl	80015a0 <Error_Handler>
	}
	/* USER CODE END TIM7_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000458 	.word	0x20000458
 8000f84:	40001400 	.word	0x40001400

08000f88 <MX_TIM9_Init>:
/**
 * @brief TIM9 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM9_Init(void) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08c      	sub	sp, #48	; 0x30
 8000f8c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM9_Init 0 */

	/* USER CODE END TIM9_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000f8e:	f107 0320 	add.w	r3, r7, #32
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	60da      	str	r2, [r3, #12]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
 8000fa8:	611a      	str	r2, [r3, #16]
 8000faa:	615a      	str	r2, [r3, #20]
 8000fac:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM9_Init 1 */

	/* USER CODE END TIM9_Init 1 */
	htim9.Instance = TIM9;
 8000fae:	4b2f      	ldr	r3, [pc, #188]	; (800106c <MX_TIM9_Init+0xe4>)
 8000fb0:	4a2f      	ldr	r2, [pc, #188]	; (8001070 <MX_TIM9_Init+0xe8>)
 8000fb2:	601a      	str	r2, [r3, #0]
	htim9.Init.Prescaler = 0;
 8000fb4:	4b2d      	ldr	r3, [pc, #180]	; (800106c <MX_TIM9_Init+0xe4>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	605a      	str	r2, [r3, #4]
	htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fba:	4b2c      	ldr	r3, [pc, #176]	; (800106c <MX_TIM9_Init+0xe4>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
	htim9.Init.Period = 65535;
 8000fc0:	4b2a      	ldr	r3, [pc, #168]	; (800106c <MX_TIM9_Init+0xe4>)
 8000fc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fc6:	60da      	str	r2, [r3, #12]
	htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc8:	4b28      	ldr	r3, [pc, #160]	; (800106c <MX_TIM9_Init+0xe4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	611a      	str	r2, [r3, #16]
	htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fce:	4b27      	ldr	r3, [pc, #156]	; (800106c <MX_TIM9_Init+0xe4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim9) != HAL_OK) {
 8000fd4:	4825      	ldr	r0, [pc, #148]	; (800106c <MX_TIM9_Init+0xe4>)
 8000fd6:	f003 ff0a 	bl	8004dee <HAL_TIM_Base_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM9_Init+0x5c>
		Error_Handler();
 8000fe0:	f000 fade 	bl	80015a0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe8:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK) {
 8000fea:	f107 0320 	add.w	r3, r7, #32
 8000fee:	4619      	mov	r1, r3
 8000ff0:	481e      	ldr	r0, [pc, #120]	; (800106c <MX_TIM9_Init+0xe4>)
 8000ff2:	f004 f9df 	bl	80053b4 <HAL_TIM_ConfigClockSource>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM9_Init+0x78>
		Error_Handler();
 8000ffc:	f000 fad0 	bl	80015a0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim9) != HAL_OK) {
 8001000:	481a      	ldr	r0, [pc, #104]	; (800106c <MX_TIM9_Init+0xe4>)
 8001002:	f003 ffb3 	bl	8004f6c <HAL_TIM_PWM_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_TIM9_Init+0x88>
		Error_Handler();
 800100c:	f000 fac8 	bl	80015a0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001010:	2360      	movs	r3, #96	; 0x60
 8001012:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001018:	2300      	movs	r3, #0
 800101a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1)
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	2200      	movs	r2, #0
 8001024:	4619      	mov	r1, r3
 8001026:	4811      	ldr	r0, [pc, #68]	; (800106c <MX_TIM9_Init+0xe4>)
 8001028:	f004 f902 	bl	8005230 <HAL_TIM_PWM_ConfigChannel>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM9_Init+0xae>
			!= HAL_OK) {
		Error_Handler();
 8001032:	f000 fab5 	bl	80015a0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2)
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	2204      	movs	r2, #4
 800103a:	4619      	mov	r1, r3
 800103c:	480b      	ldr	r0, [pc, #44]	; (800106c <MX_TIM9_Init+0xe4>)
 800103e:	f004 f8f7 	bl	8005230 <HAL_TIM_PWM_ConfigChannel>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_TIM9_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 8001048:	f000 faaa 	bl	80015a0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM9_Init 2 */
	if (HAL_TIM_Base_Start_IT(&htim9) != HAL_OK) {
 800104c:	4807      	ldr	r0, [pc, #28]	; (800106c <MX_TIM9_Init+0xe4>)
 800104e:	f003 ff1d 	bl	8004e8c <HAL_TIM_Base_Start_IT>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_TIM9_Init+0xd4>
		Error_Handler();
 8001058:	f000 faa2 	bl	80015a0 <Error_Handler>
	}
	/* USER CODE END TIM9_Init 2 */
	HAL_TIM_MspPostInit(&htim9);
 800105c:	4803      	ldr	r0, [pc, #12]	; (800106c <MX_TIM9_Init+0xe4>)
 800105e:	f000 fda5 	bl	8001bac <HAL_TIM_MspPostInit>

}
 8001062:	bf00      	nop
 8001064:	3730      	adds	r7, #48	; 0x30
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	200004a0 	.word	0x200004a0
 8001070:	40014000 	.word	0x40014000

08001074 <MX_TIM10_Init>:
/**
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM10_Init 0 */

	/* USER CODE END TIM10_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
 8001088:	615a      	str	r2, [r3, #20]
 800108a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 800108c:	4b22      	ldr	r3, [pc, #136]	; (8001118 <MX_TIM10_Init+0xa4>)
 800108e:	4a23      	ldr	r2, [pc, #140]	; (800111c <MX_TIM10_Init+0xa8>)
 8001090:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 0;
 8001092:	4b21      	ldr	r3, [pc, #132]	; (8001118 <MX_TIM10_Init+0xa4>)
 8001094:	2200      	movs	r2, #0
 8001096:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001098:	4b1f      	ldr	r3, [pc, #124]	; (8001118 <MX_TIM10_Init+0xa4>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 65535;
 800109e:	4b1e      	ldr	r3, [pc, #120]	; (8001118 <MX_TIM10_Init+0xa4>)
 80010a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010a4:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a6:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <MX_TIM10_Init+0xa4>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ac:	4b1a      	ldr	r3, [pc, #104]	; (8001118 <MX_TIM10_Init+0xa4>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
 80010b2:	4819      	ldr	r0, [pc, #100]	; (8001118 <MX_TIM10_Init+0xa4>)
 80010b4:	f003 fe9b 	bl	8004dee <HAL_TIM_Base_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM10_Init+0x4e>
		Error_Handler();
 80010be:	f000 fa6f 	bl	80015a0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim10) != HAL_OK) {
 80010c2:	4815      	ldr	r0, [pc, #84]	; (8001118 <MX_TIM10_Init+0xa4>)
 80010c4:	f003 ff52 	bl	8004f6c <HAL_TIM_PWM_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM10_Init+0x5e>
		Error_Handler();
 80010ce:	f000 fa67 	bl	80015a0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010d2:	2360      	movs	r3, #96	; 0x60
 80010d4:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1)
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	2200      	movs	r2, #0
 80010e6:	4619      	mov	r1, r3
 80010e8:	480b      	ldr	r0, [pc, #44]	; (8001118 <MX_TIM10_Init+0xa4>)
 80010ea:	f004 f8a1 	bl	8005230 <HAL_TIM_PWM_ConfigChannel>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM10_Init+0x84>
			!= HAL_OK) {
		Error_Handler();
 80010f4:	f000 fa54 	bl	80015a0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */
	if (HAL_TIM_Base_Start_IT(&htim10) != HAL_OK) {
 80010f8:	4807      	ldr	r0, [pc, #28]	; (8001118 <MX_TIM10_Init+0xa4>)
 80010fa:	f003 fec7 	bl	8004e8c <HAL_TIM_Base_Start_IT>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM10_Init+0x94>
		Error_Handler();
 8001104:	f000 fa4c 	bl	80015a0 <Error_Handler>
	}
	/* USER CODE END TIM10_Init 2 */
	HAL_TIM_MspPostInit(&htim10);
 8001108:	4803      	ldr	r0, [pc, #12]	; (8001118 <MX_TIM10_Init+0xa4>)
 800110a:	f000 fd4f 	bl	8001bac <HAL_TIM_MspPostInit>

}
 800110e:	bf00      	nop
 8001110:	3720      	adds	r7, #32
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200004e8 	.word	0x200004e8
 800111c:	40014400 	.word	0x40014400

08001120 <MX_TIM11_Init>:
/**
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM11_Init 0 */

	/* USER CODE END TIM11_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
 8001134:	615a      	str	r2, [r3, #20]
 8001136:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 8001138:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <MX_TIM11_Init+0xa4>)
 800113a:	4a23      	ldr	r2, [pc, #140]	; (80011c8 <MX_TIM11_Init+0xa8>)
 800113c:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 0;
 800113e:	4b21      	ldr	r3, [pc, #132]	; (80011c4 <MX_TIM11_Init+0xa4>)
 8001140:	2200      	movs	r2, #0
 8001142:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001144:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <MX_TIM11_Init+0xa4>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 65535;
 800114a:	4b1e      	ldr	r3, [pc, #120]	; (80011c4 <MX_TIM11_Init+0xa4>)
 800114c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001150:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001152:	4b1c      	ldr	r3, [pc, #112]	; (80011c4 <MX_TIM11_Init+0xa4>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001158:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <MX_TIM11_Init+0xa4>)
 800115a:	2200      	movs	r2, #0
 800115c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK) {
 800115e:	4819      	ldr	r0, [pc, #100]	; (80011c4 <MX_TIM11_Init+0xa4>)
 8001160:	f003 fe45 	bl	8004dee <HAL_TIM_Base_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM11_Init+0x4e>
		Error_Handler();
 800116a:	f000 fa19 	bl	80015a0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim11) != HAL_OK) {
 800116e:	4815      	ldr	r0, [pc, #84]	; (80011c4 <MX_TIM11_Init+0xa4>)
 8001170:	f003 fefc 	bl	8004f6c <HAL_TIM_PWM_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM11_Init+0x5e>
		Error_Handler();
 800117a:	f000 fa11 	bl	80015a0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800117e:	2360      	movs	r3, #96	; 0x60
 8001180:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1)
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	2200      	movs	r2, #0
 8001192:	4619      	mov	r1, r3
 8001194:	480b      	ldr	r0, [pc, #44]	; (80011c4 <MX_TIM11_Init+0xa4>)
 8001196:	f004 f84b 	bl	8005230 <HAL_TIM_PWM_ConfigChannel>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM11_Init+0x84>
			!= HAL_OK) {
		Error_Handler();
 80011a0:	f000 f9fe 	bl	80015a0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */
	if (HAL_TIM_Base_Start_IT(&htim11) != HAL_OK) {
 80011a4:	4807      	ldr	r0, [pc, #28]	; (80011c4 <MX_TIM11_Init+0xa4>)
 80011a6:	f003 fe71 	bl	8004e8c <HAL_TIM_Base_Start_IT>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM11_Init+0x94>
		Error_Handler();
 80011b0:	f000 f9f6 	bl	80015a0 <Error_Handler>
	}
	/* USER CODE END TIM11_Init 2 */
	HAL_TIM_MspPostInit(&htim11);
 80011b4:	4803      	ldr	r0, [pc, #12]	; (80011c4 <MX_TIM11_Init+0xa4>)
 80011b6:	f000 fcf9 	bl	8001bac <HAL_TIM_MspPostInit>

}
 80011ba:	bf00      	nop
 80011bc:	3720      	adds	r7, #32
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000530 	.word	0x20000530
 80011c8:	40014800 	.word	0x40014800

080011cc <MX_TIM12_Init>:
/**
 * @brief TIM12 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM12_Init(void) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08c      	sub	sp, #48	; 0x30
 80011d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM12_Init 0 */

	/* USER CODE END TIM12_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80011d2:	f107 0320 	add.w	r3, r7, #32
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	60da      	str	r2, [r3, #12]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
 80011ec:	611a      	str	r2, [r3, #16]
 80011ee:	615a      	str	r2, [r3, #20]
 80011f0:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM12_Init 1 */

	/* USER CODE END TIM12_Init 1 */
	htim12.Instance = TIM12;
 80011f2:	4b2f      	ldr	r3, [pc, #188]	; (80012b0 <MX_TIM12_Init+0xe4>)
 80011f4:	4a2f      	ldr	r2, [pc, #188]	; (80012b4 <MX_TIM12_Init+0xe8>)
 80011f6:	601a      	str	r2, [r3, #0]
	htim12.Init.Prescaler = 0;
 80011f8:	4b2d      	ldr	r3, [pc, #180]	; (80012b0 <MX_TIM12_Init+0xe4>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	605a      	str	r2, [r3, #4]
	htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fe:	4b2c      	ldr	r3, [pc, #176]	; (80012b0 <MX_TIM12_Init+0xe4>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
	htim12.Init.Period = 65535;
 8001204:	4b2a      	ldr	r3, [pc, #168]	; (80012b0 <MX_TIM12_Init+0xe4>)
 8001206:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800120a:	60da      	str	r2, [r3, #12]
	htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800120c:	4b28      	ldr	r3, [pc, #160]	; (80012b0 <MX_TIM12_Init+0xe4>)
 800120e:	2200      	movs	r2, #0
 8001210:	611a      	str	r2, [r3, #16]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001212:	4b27      	ldr	r3, [pc, #156]	; (80012b0 <MX_TIM12_Init+0xe4>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim12) != HAL_OK) {
 8001218:	4825      	ldr	r0, [pc, #148]	; (80012b0 <MX_TIM12_Init+0xe4>)
 800121a:	f003 fde8 	bl	8004dee <HAL_TIM_Base_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM12_Init+0x5c>
		Error_Handler();
 8001224:	f000 f9bc 	bl	80015a0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001228:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800122c:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK) {
 800122e:	f107 0320 	add.w	r3, r7, #32
 8001232:	4619      	mov	r1, r3
 8001234:	481e      	ldr	r0, [pc, #120]	; (80012b0 <MX_TIM12_Init+0xe4>)
 8001236:	f004 f8bd 	bl	80053b4 <HAL_TIM_ConfigClockSource>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM12_Init+0x78>
		Error_Handler();
 8001240:	f000 f9ae 	bl	80015a0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim12) != HAL_OK) {
 8001244:	481a      	ldr	r0, [pc, #104]	; (80012b0 <MX_TIM12_Init+0xe4>)
 8001246:	f003 fe91 	bl	8004f6c <HAL_TIM_PWM_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM12_Init+0x88>
		Error_Handler();
 8001250:	f000 f9a6 	bl	80015a0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001254:	2360      	movs	r3, #96	; 0x60
 8001256:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800125c:	2300      	movs	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1)
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	2200      	movs	r2, #0
 8001268:	4619      	mov	r1, r3
 800126a:	4811      	ldr	r0, [pc, #68]	; (80012b0 <MX_TIM12_Init+0xe4>)
 800126c:	f003 ffe0 	bl	8005230 <HAL_TIM_PWM_ConfigChannel>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM12_Init+0xae>
			!= HAL_OK) {
		Error_Handler();
 8001276:	f000 f993 	bl	80015a0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2)
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	2204      	movs	r2, #4
 800127e:	4619      	mov	r1, r3
 8001280:	480b      	ldr	r0, [pc, #44]	; (80012b0 <MX_TIM12_Init+0xe4>)
 8001282:	f003 ffd5 	bl	8005230 <HAL_TIM_PWM_ConfigChannel>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM12_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 800128c:	f000 f988 	bl	80015a0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM12_Init 2 */
	if (HAL_TIM_Base_Start_IT(&htim12) != HAL_OK) {
 8001290:	4807      	ldr	r0, [pc, #28]	; (80012b0 <MX_TIM12_Init+0xe4>)
 8001292:	f003 fdfb 	bl	8004e8c <HAL_TIM_Base_Start_IT>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM12_Init+0xd4>
		Error_Handler();
 800129c:	f000 f980 	bl	80015a0 <Error_Handler>
	}
	/* USER CODE END TIM12_Init 2 */
	HAL_TIM_MspPostInit(&htim12);
 80012a0:	4803      	ldr	r0, [pc, #12]	; (80012b0 <MX_TIM12_Init+0xe4>)
 80012a2:	f000 fc83 	bl	8001bac <HAL_TIM_MspPostInit>

}
 80012a6:	bf00      	nop
 80012a8:	3730      	adds	r7, #48	; 0x30
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000578 	.word	0x20000578
 80012b4:	40001800 	.word	0x40001800

080012b8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <MX_USART2_UART_Init+0x4c>)
 80012be:	4a12      	ldr	r2, [pc, #72]	; (8001308 <MX_USART2_UART_Init+0x50>)
 80012c0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80012c2:	4b10      	ldr	r3, [pc, #64]	; (8001304 <MX_USART2_UART_Init+0x4c>)
 80012c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012c8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <MX_USART2_UART_Init+0x4c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <MX_USART2_UART_Init+0x4c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80012d6:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <MX_USART2_UART_Init+0x4c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80012dc:	4b09      	ldr	r3, [pc, #36]	; (8001304 <MX_USART2_UART_Init+0x4c>)
 80012de:	220c      	movs	r2, #12
 80012e0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <MX_USART2_UART_Init+0x4c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <MX_USART2_UART_Init+0x4c>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80012ee:	4805      	ldr	r0, [pc, #20]	; (8001304 <MX_USART2_UART_Init+0x4c>)
 80012f0:	f004 fd26 	bl	8005d40 <HAL_UART_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80012fa:	f000 f951 	bl	80015a0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200005c0 	.word	0x200005c0
 8001308:	40004400 	.word	0x40004400

0800130c <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8001310:	4b11      	ldr	r3, [pc, #68]	; (8001358 <MX_USART6_UART_Init+0x4c>)
 8001312:	4a12      	ldr	r2, [pc, #72]	; (800135c <MX_USART6_UART_Init+0x50>)
 8001314:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <MX_USART6_UART_Init+0x4c>)
 8001318:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800131c:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <MX_USART6_UART_Init+0x4c>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <MX_USART6_UART_Init+0x4c>)
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 800132a:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <MX_USART6_UART_Init+0x4c>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <MX_USART6_UART_Init+0x4c>)
 8001332:	220c      	movs	r2, #12
 8001334:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001336:	4b08      	ldr	r3, [pc, #32]	; (8001358 <MX_USART6_UART_Init+0x4c>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <MX_USART6_UART_Init+0x4c>)
 800133e:	2200      	movs	r2, #0
 8001340:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8001342:	4805      	ldr	r0, [pc, #20]	; (8001358 <MX_USART6_UART_Init+0x4c>)
 8001344:	f004 fcfc 	bl	8005d40 <HAL_UART_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_USART6_UART_Init+0x46>
		Error_Handler();
 800134e:	f000 f927 	bl	80015a0 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000604 	.word	0x20000604
 800135c:	40011400 	.word	0x40011400

08001360 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b08c      	sub	sp, #48	; 0x30
 8001364:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001366:	f107 031c 	add.w	r3, r7, #28
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
 8001374:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	61bb      	str	r3, [r7, #24]
 800137a:	4b83      	ldr	r3, [pc, #524]	; (8001588 <MX_GPIO_Init+0x228>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a82      	ldr	r2, [pc, #520]	; (8001588 <MX_GPIO_Init+0x228>)
 8001380:	f043 0310 	orr.w	r3, r3, #16
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b80      	ldr	r3, [pc, #512]	; (8001588 <MX_GPIO_Init+0x228>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0310 	and.w	r3, r3, #16
 800138e:	61bb      	str	r3, [r7, #24]
 8001390:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
 8001396:	4b7c      	ldr	r3, [pc, #496]	; (8001588 <MX_GPIO_Init+0x228>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a7b      	ldr	r2, [pc, #492]	; (8001588 <MX_GPIO_Init+0x228>)
 800139c:	f043 0304 	orr.w	r3, r3, #4
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b79      	ldr	r3, [pc, #484]	; (8001588 <MX_GPIO_Init+0x228>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0304 	and.w	r3, r3, #4
 80013aa:	617b      	str	r3, [r7, #20]
 80013ac:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	4b75      	ldr	r3, [pc, #468]	; (8001588 <MX_GPIO_Init+0x228>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a74      	ldr	r2, [pc, #464]	; (8001588 <MX_GPIO_Init+0x228>)
 80013b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b72      	ldr	r3, [pc, #456]	; (8001588 <MX_GPIO_Init+0x228>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	4b6e      	ldr	r3, [pc, #440]	; (8001588 <MX_GPIO_Init+0x228>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a6d      	ldr	r2, [pc, #436]	; (8001588 <MX_GPIO_Init+0x228>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b6b      	ldr	r3, [pc, #428]	; (8001588 <MX_GPIO_Init+0x228>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	4b67      	ldr	r3, [pc, #412]	; (8001588 <MX_GPIO_Init+0x228>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a66      	ldr	r2, [pc, #408]	; (8001588 <MX_GPIO_Init+0x228>)
 80013f0:	f043 0302 	orr.w	r3, r3, #2
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b64      	ldr	r3, [pc, #400]	; (8001588 <MX_GPIO_Init+0x228>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	4b60      	ldr	r3, [pc, #384]	; (8001588 <MX_GPIO_Init+0x228>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a5f      	ldr	r2, [pc, #380]	; (8001588 <MX_GPIO_Init+0x228>)
 800140c:	f043 0308 	orr.w	r3, r3, #8
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b5d      	ldr	r3, [pc, #372]	; (8001588 <MX_GPIO_Init+0x228>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 800141e:	2200      	movs	r2, #0
 8001420:	f249 1184 	movw	r1, #37252	; 0x9184
 8001424:	4859      	ldr	r0, [pc, #356]	; (800158c <MX_GPIO_Init+0x22c>)
 8001426:	f001 fbc3 	bl	8002bb0 <HAL_GPIO_WritePin>
			TRIG2_Pin | LMSV_Pin | LMCLK_Pin | ENPL_Pin | ENCLK_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, TRIG1_Pin | LMDAT_Pin, GPIO_PIN_RESET);
 800142a:	2200      	movs	r2, #0
 800142c:	f242 0120 	movw	r1, #8224	; 0x2020
 8001430:	4857      	ldr	r0, [pc, #348]	; (8001590 <MX_GPIO_Init+0x230>)
 8001432:	f001 fbbd 	bl	8002bb0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, STRP2_Pin | STRP1_Pin, GPIO_PIN_RESET);
 8001436:	2200      	movs	r2, #0
 8001438:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800143c:	4855      	ldr	r0, [pc, #340]	; (8001594 <MX_GPIO_Init+0x234>)
 800143e:	f001 fbb7 	bl	8002bb0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, SRDAT_Pin | SRSV_Pin | SRCLK_Pin, GPIO_PIN_RESET);
 8001442:	2200      	movs	r2, #0
 8001444:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001448:	4853      	ldr	r0, [pc, #332]	; (8001598 <MX_GPIO_Init+0x238>)
 800144a:	f001 fbb1 	bl	8002bb0 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : TRIG2_Pin LMSV_Pin LMCLK_Pin ENPL_Pin
	 ENCLK_Pin */
	GPIO_InitStruct.Pin = TRIG2_Pin | LMSV_Pin | LMCLK_Pin | ENPL_Pin
 800144e:	f249 1384 	movw	r3, #37252	; 0x9184
 8001452:	61fb      	str	r3, [r7, #28]
			| ENCLK_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001454:	2301      	movs	r3, #1
 8001456:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001460:	f107 031c 	add.w	r3, r7, #28
 8001464:	4619      	mov	r1, r3
 8001466:	4849      	ldr	r0, [pc, #292]	; (800158c <MX_GPIO_Init+0x22c>)
 8001468:	f001 fa06 	bl	8002878 <HAL_GPIO_Init>

	/*Configure GPIO pins : ECHO2_Pin ECHO1_Pin ENSO_Pin RMD11_Pin
	 RMD12_Pin */
	GPIO_InitStruct.Pin = ECHO2_Pin | ECHO1_Pin | ENSO_Pin | RMD11_Pin
 800146c:	f240 431b 	movw	r3, #1051	; 0x41b
 8001470:	61fb      	str	r3, [r7, #28]
			| RMD12_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001472:	2300      	movs	r3, #0
 8001474:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800147a:	f107 031c 	add.w	r3, r7, #28
 800147e:	4619      	mov	r1, r3
 8001480:	4842      	ldr	r0, [pc, #264]	; (800158c <MX_GPIO_Init+0x22c>)
 8001482:	f001 f9f9 	bl	8002878 <HAL_GPIO_Init>

	/*Configure GPIO pins : TRIG1_Pin LMDAT_Pin */
	GPIO_InitStruct.Pin = TRIG1_Pin | LMDAT_Pin;
 8001486:	f242 0320 	movw	r3, #8224	; 0x2020
 800148a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148c:	2301      	movs	r3, #1
 800148e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001494:	2300      	movs	r3, #0
 8001496:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001498:	f107 031c 	add.w	r3, r7, #28
 800149c:	4619      	mov	r1, r3
 800149e:	483c      	ldr	r0, [pc, #240]	; (8001590 <MX_GPIO_Init+0x230>)
 80014a0:	f001 f9ea 	bl	8002878 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 80014a4:	2304      	movs	r3, #4
 80014a6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a8:	2300      	movs	r3, #0
 80014aa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80014b0:	f107 031c 	add.w	r3, r7, #28
 80014b4:	4619      	mov	r1, r3
 80014b6:	4837      	ldr	r0, [pc, #220]	; (8001594 <MX_GPIO_Init+0x234>)
 80014b8:	f001 f9de 	bl	8002878 <HAL_GPIO_Init>

	/*Configure GPIO pins : STRP2_Pin STRP1_Pin */
	GPIO_InitStruct.Pin = STRP2_Pin | STRP1_Pin;
 80014bc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80014c0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c2:	2301      	movs	r3, #1
 80014c4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	2300      	movs	r3, #0
 80014cc:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ce:	f107 031c 	add.w	r3, r7, #28
 80014d2:	4619      	mov	r1, r3
 80014d4:	482f      	ldr	r0, [pc, #188]	; (8001594 <MX_GPIO_Init+0x234>)
 80014d6:	f001 f9cf 	bl	8002878 <HAL_GPIO_Init>

	/*Configure GPIO pins : SRDAT_Pin SRSV_Pin SRCLK_Pin */
	GPIO_InitStruct.Pin = SRDAT_Pin | SRSV_Pin | SRCLK_Pin;
 80014da:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80014de:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e0:	2301      	movs	r3, #1
 80014e2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	2300      	movs	r3, #0
 80014ea:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ec:	f107 031c 	add.w	r3, r7, #28
 80014f0:	4619      	mov	r1, r3
 80014f2:	4829      	ldr	r0, [pc, #164]	; (8001598 <MX_GPIO_Init+0x238>)
 80014f4:	f001 f9c0 	bl	8002878 <HAL_GPIO_Init>

	/*Configure GPIO pins : DRE1_Pin RMD7_Pin RMD8_Pin RMD9_Pin
	 RMD10_Pin */
	GPIO_InitStruct.Pin = DRE1_Pin | RMD7_Pin | RMD8_Pin | RMD9_Pin | RMD10_Pin;
 80014f8:	f640 039c 	movw	r3, #2204	; 0x89c
 80014fc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014fe:	2300      	movs	r3, #0
 8001500:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001506:	f107 031c 	add.w	r3, r7, #28
 800150a:	4619      	mov	r1, r3
 800150c:	4822      	ldr	r0, [pc, #136]	; (8001598 <MX_GPIO_Init+0x238>)
 800150e:	f001 f9b3 	bl	8002878 <HAL_GPIO_Init>

	/*Configure GPIO pin : DRE2_Pin */
	GPIO_InitStruct.Pin = DRE2_Pin;
 8001512:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001516:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001518:	2300      	movs	r3, #0
 800151a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(DRE2_GPIO_Port, &GPIO_InitStruct);
 8001520:	f107 031c 	add.w	r3, r7, #28
 8001524:	4619      	mov	r1, r3
 8001526:	481a      	ldr	r0, [pc, #104]	; (8001590 <MX_GPIO_Init+0x230>)
 8001528:	f001 f9a6 	bl	8002878 <HAL_GPIO_Init>

	/*Configure GPIO pin : DRESW_Pin */
	GPIO_InitStruct.Pin = DRESW_Pin;
 800152c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001530:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001532:	2300      	movs	r3, #0
 8001534:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(DRESW_GPIO_Port, &GPIO_InitStruct);
 800153a:	f107 031c 	add.w	r3, r7, #28
 800153e:	4619      	mov	r1, r3
 8001540:	4816      	ldr	r0, [pc, #88]	; (800159c <MX_GPIO_Init+0x23c>)
 8001542:	f001 f999 	bl	8002878 <HAL_GPIO_Init>

	/*Configure GPIO pins : GINT2_Pin GINT1_Pin */
	GPIO_InitStruct.Pin = GINT2_Pin | GINT1_Pin;
 8001546:	2303      	movs	r3, #3
 8001548:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800154a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800154e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001554:	f107 031c 	add.w	r3, r7, #28
 8001558:	4619      	mov	r1, r3
 800155a:	480f      	ldr	r0, [pc, #60]	; (8001598 <MX_GPIO_Init+0x238>)
 800155c:	f001 f98c 	bl	8002878 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001560:	2200      	movs	r2, #0
 8001562:	2100      	movs	r1, #0
 8001564:	2006      	movs	r0, #6
 8001566:	f001 f950 	bl	800280a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800156a:	2006      	movs	r0, #6
 800156c:	f001 f969 	bl	8002842 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001570:	2200      	movs	r2, #0
 8001572:	2100      	movs	r1, #0
 8001574:	2007      	movs	r0, #7
 8001576:	f001 f948 	bl	800280a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800157a:	2007      	movs	r0, #7
 800157c:	f001 f961 	bl	8002842 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001580:	bf00      	nop
 8001582:	3730      	adds	r7, #48	; 0x30
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40023800 	.word	0x40023800
 800158c:	40021000 	.word	0x40021000
 8001590:	40020800 	.word	0x40020800
 8001594:	40020400 	.word	0x40020400
 8001598:	40020c00 	.word	0x40020c00
 800159c:	40020000 	.word	0x40020000

080015a0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a4:	b672      	cpsid	i
}
 80015a6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80015a8:	e7fe      	b.n	80015a8 <Error_Handler+0x8>
	...

080015ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <HAL_MspInit+0x4c>)
 80015b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ba:	4a0f      	ldr	r2, [pc, #60]	; (80015f8 <HAL_MspInit+0x4c>)
 80015bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c0:	6453      	str	r3, [r2, #68]	; 0x44
 80015c2:	4b0d      	ldr	r3, [pc, #52]	; (80015f8 <HAL_MspInit+0x4c>)
 80015c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	603b      	str	r3, [r7, #0]
 80015d2:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <HAL_MspInit+0x4c>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	4a08      	ldr	r2, [pc, #32]	; (80015f8 <HAL_MspInit+0x4c>)
 80015d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015dc:	6413      	str	r3, [r2, #64]	; 0x40
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_MspInit+0x4c>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e6:	603b      	str	r3, [r7, #0]
 80015e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	40023800 	.word	0x40023800

080015fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b090      	sub	sp, #64	; 0x40
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a5f      	ldr	r2, [pc, #380]	; (8001798 <HAL_ADC_MspInit+0x19c>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d142      	bne.n	80016a4 <HAL_ADC_MspInit+0xa8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	62bb      	str	r3, [r7, #40]	; 0x28
 8001622:	4b5e      	ldr	r3, [pc, #376]	; (800179c <HAL_ADC_MspInit+0x1a0>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	4a5d      	ldr	r2, [pc, #372]	; (800179c <HAL_ADC_MspInit+0x1a0>)
 8001628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800162c:	6453      	str	r3, [r2, #68]	; 0x44
 800162e:	4b5b      	ldr	r3, [pc, #364]	; (800179c <HAL_ADC_MspInit+0x1a0>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001636:	62bb      	str	r3, [r7, #40]	; 0x28
 8001638:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
 800163e:	4b57      	ldr	r3, [pc, #348]	; (800179c <HAL_ADC_MspInit+0x1a0>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4a56      	ldr	r2, [pc, #344]	; (800179c <HAL_ADC_MspInit+0x1a0>)
 8001644:	f043 0304 	orr.w	r3, r3, #4
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4b54      	ldr	r3, [pc, #336]	; (800179c <HAL_ADC_MspInit+0x1a0>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f003 0304 	and.w	r3, r3, #4
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	623b      	str	r3, [r7, #32]
 800165a:	4b50      	ldr	r3, [pc, #320]	; (800179c <HAL_ADC_MspInit+0x1a0>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	4a4f      	ldr	r2, [pc, #316]	; (800179c <HAL_ADC_MspInit+0x1a0>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
 8001666:	4b4d      	ldr	r3, [pc, #308]	; (800179c <HAL_ADC_MspInit+0x1a0>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	623b      	str	r3, [r7, #32]
 8001670:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = AMB2_Pin|AMB1_Pin;
 8001672:	2311      	movs	r3, #17
 8001674:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001676:	2303      	movs	r3, #3
 8001678:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800167e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001682:	4619      	mov	r1, r3
 8001684:	4846      	ldr	r0, [pc, #280]	; (80017a0 <HAL_ADC_MspInit+0x1a4>)
 8001686:	f001 f8f7 	bl	8002878 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BREF_Pin;
 800168a:	2380      	movs	r3, #128	; 0x80
 800168c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800168e:	2303      	movs	r3, #3
 8001690:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(BREF_GPIO_Port, &GPIO_InitStruct);
 8001696:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800169a:	4619      	mov	r1, r3
 800169c:	4841      	ldr	r0, [pc, #260]	; (80017a4 <HAL_ADC_MspInit+0x1a8>)
 800169e:	f001 f8eb 	bl	8002878 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80016a2:	e074      	b.n	800178e <HAL_ADC_MspInit+0x192>
  else if(hadc->Instance==ADC2)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a3f      	ldr	r2, [pc, #252]	; (80017a8 <HAL_ADC_MspInit+0x1ac>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d128      	bne.n	8001700 <HAL_ADC_MspInit+0x104>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
 80016b2:	4b3a      	ldr	r3, [pc, #232]	; (800179c <HAL_ADC_MspInit+0x1a0>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	4a39      	ldr	r2, [pc, #228]	; (800179c <HAL_ADC_MspInit+0x1a0>)
 80016b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016bc:	6453      	str	r3, [r2, #68]	; 0x44
 80016be:	4b37      	ldr	r3, [pc, #220]	; (800179c <HAL_ADC_MspInit+0x1a0>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016c6:	61fb      	str	r3, [r7, #28]
 80016c8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	61bb      	str	r3, [r7, #24]
 80016ce:	4b33      	ldr	r3, [pc, #204]	; (800179c <HAL_ADC_MspInit+0x1a0>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	4a32      	ldr	r2, [pc, #200]	; (800179c <HAL_ADC_MspInit+0x1a0>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6313      	str	r3, [r2, #48]	; 0x30
 80016da:	4b30      	ldr	r3, [pc, #192]	; (800179c <HAL_ADC_MspInit+0x1a0>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	61bb      	str	r3, [r7, #24]
 80016e4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = RM1_Pin|RM2_Pin|RM3_Pin|RM6_Pin
 80016e6:	237e      	movs	r3, #126	; 0x7e
 80016e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ea:	2303      	movs	r3, #3
 80016ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016f6:	4619      	mov	r1, r3
 80016f8:	482a      	ldr	r0, [pc, #168]	; (80017a4 <HAL_ADC_MspInit+0x1a8>)
 80016fa:	f001 f8bd 	bl	8002878 <HAL_GPIO_Init>
}
 80016fe:	e046      	b.n	800178e <HAL_ADC_MspInit+0x192>
  else if(hadc->Instance==ADC3)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a29      	ldr	r2, [pc, #164]	; (80017ac <HAL_ADC_MspInit+0x1b0>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d141      	bne.n	800178e <HAL_ADC_MspInit+0x192>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
 800170e:	4b23      	ldr	r3, [pc, #140]	; (800179c <HAL_ADC_MspInit+0x1a0>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	4a22      	ldr	r2, [pc, #136]	; (800179c <HAL_ADC_MspInit+0x1a0>)
 8001714:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001718:	6453      	str	r3, [r2, #68]	; 0x44
 800171a:	4b20      	ldr	r3, [pc, #128]	; (800179c <HAL_ADC_MspInit+0x1a0>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	4b1c      	ldr	r3, [pc, #112]	; (800179c <HAL_ADC_MspInit+0x1a0>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a1b      	ldr	r2, [pc, #108]	; (800179c <HAL_ADC_MspInit+0x1a0>)
 8001730:	f043 0304 	orr.w	r3, r3, #4
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b19      	ldr	r3, [pc, #100]	; (800179c <HAL_ADC_MspInit+0x1a0>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0304 	and.w	r3, r3, #4
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <HAL_ADC_MspInit+0x1a0>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4a14      	ldr	r2, [pc, #80]	; (800179c <HAL_ADC_MspInit+0x1a0>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4b12      	ldr	r3, [pc, #72]	; (800179c <HAL_ADC_MspInit+0x1a0>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AIN4_Pin|AIN2_Pin|AIN1_Pin;
 800175e:	230e      	movs	r3, #14
 8001760:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001762:	2303      	movs	r3, #3
 8001764:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800176a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800176e:	4619      	mov	r1, r3
 8001770:	480b      	ldr	r0, [pc, #44]	; (80017a0 <HAL_ADC_MspInit+0x1a4>)
 8001772:	f001 f881 	bl	8002878 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AIN3_Pin;
 8001776:	2301      	movs	r3, #1
 8001778:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800177a:	2303      	movs	r3, #3
 800177c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(AIN3_GPIO_Port, &GPIO_InitStruct);
 8001782:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001786:	4619      	mov	r1, r3
 8001788:	4806      	ldr	r0, [pc, #24]	; (80017a4 <HAL_ADC_MspInit+0x1a8>)
 800178a:	f001 f875 	bl	8002878 <HAL_GPIO_Init>
}
 800178e:	bf00      	nop
 8001790:	3740      	adds	r7, #64	; 0x40
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40012000 	.word	0x40012000
 800179c:	40023800 	.word	0x40023800
 80017a0:	40020800 	.word	0x40020800
 80017a4:	40020000 	.word	0x40020000
 80017a8:	40012100 	.word	0x40012100
 80017ac:	40012200 	.word	0x40012200

080017b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08c      	sub	sp, #48	; 0x30
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	f107 031c 	add.w	r3, r7, #28
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a42      	ldr	r2, [pc, #264]	; (80018d8 <HAL_I2C_MspInit+0x128>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d12c      	bne.n	800182c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	61bb      	str	r3, [r7, #24]
 80017d6:	4b41      	ldr	r3, [pc, #260]	; (80018dc <HAL_I2C_MspInit+0x12c>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a40      	ldr	r2, [pc, #256]	; (80018dc <HAL_I2C_MspInit+0x12c>)
 80017dc:	f043 0302 	orr.w	r3, r3, #2
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b3e      	ldr	r3, [pc, #248]	; (80018dc <HAL_I2C_MspInit+0x12c>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	61bb      	str	r3, [r7, #24]
 80017ec:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL1_Pin|SDA1_Pin;
 80017ee:	23c0      	movs	r3, #192	; 0xc0
 80017f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017f2:	2312      	movs	r3, #18
 80017f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017fa:	2302      	movs	r3, #2
 80017fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017fe:	2304      	movs	r3, #4
 8001800:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001802:	f107 031c 	add.w	r3, r7, #28
 8001806:	4619      	mov	r1, r3
 8001808:	4835      	ldr	r0, [pc, #212]	; (80018e0 <HAL_I2C_MspInit+0x130>)
 800180a:	f001 f835 	bl	8002878 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]
 8001812:	4b32      	ldr	r3, [pc, #200]	; (80018dc <HAL_I2C_MspInit+0x12c>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	4a31      	ldr	r2, [pc, #196]	; (80018dc <HAL_I2C_MspInit+0x12c>)
 8001818:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800181c:	6413      	str	r3, [r2, #64]	; 0x40
 800181e:	4b2f      	ldr	r3, [pc, #188]	; (80018dc <HAL_I2C_MspInit+0x12c>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001826:	617b      	str	r3, [r7, #20]
 8001828:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800182a:	e050      	b.n	80018ce <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a2c      	ldr	r2, [pc, #176]	; (80018e4 <HAL_I2C_MspInit+0x134>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d14b      	bne.n	80018ce <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]
 800183a:	4b28      	ldr	r3, [pc, #160]	; (80018dc <HAL_I2C_MspInit+0x12c>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4a27      	ldr	r2, [pc, #156]	; (80018dc <HAL_I2C_MspInit+0x12c>)
 8001840:	f043 0304 	orr.w	r3, r3, #4
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4b25      	ldr	r3, [pc, #148]	; (80018dc <HAL_I2C_MspInit+0x12c>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f003 0304 	and.w	r3, r3, #4
 800184e:	613b      	str	r3, [r7, #16]
 8001850:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	4b21      	ldr	r3, [pc, #132]	; (80018dc <HAL_I2C_MspInit+0x12c>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a20      	ldr	r2, [pc, #128]	; (80018dc <HAL_I2C_MspInit+0x12c>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b1e      	ldr	r3, [pc, #120]	; (80018dc <HAL_I2C_MspInit+0x12c>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SDA2_Pin;
 800186e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001874:	2312      	movs	r3, #18
 8001876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800187c:	2302      	movs	r3, #2
 800187e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001880:	2304      	movs	r3, #4
 8001882:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SDA2_GPIO_Port, &GPIO_InitStruct);
 8001884:	f107 031c 	add.w	r3, r7, #28
 8001888:	4619      	mov	r1, r3
 800188a:	4817      	ldr	r0, [pc, #92]	; (80018e8 <HAL_I2C_MspInit+0x138>)
 800188c:	f000 fff4 	bl	8002878 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SCL2_Pin;
 8001890:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001896:	2312      	movs	r3, #18
 8001898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800189e:	2302      	movs	r3, #2
 80018a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80018a2:	2304      	movs	r3, #4
 80018a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SCL2_GPIO_Port, &GPIO_InitStruct);
 80018a6:	f107 031c 	add.w	r3, r7, #28
 80018aa:	4619      	mov	r1, r3
 80018ac:	480f      	ldr	r0, [pc, #60]	; (80018ec <HAL_I2C_MspInit+0x13c>)
 80018ae:	f000 ffe3 	bl	8002878 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	60bb      	str	r3, [r7, #8]
 80018b6:	4b09      	ldr	r3, [pc, #36]	; (80018dc <HAL_I2C_MspInit+0x12c>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	4a08      	ldr	r2, [pc, #32]	; (80018dc <HAL_I2C_MspInit+0x12c>)
 80018bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018c0:	6413      	str	r3, [r2, #64]	; 0x40
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_I2C_MspInit+0x12c>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	68bb      	ldr	r3, [r7, #8]
}
 80018ce:	bf00      	nop
 80018d0:	3730      	adds	r7, #48	; 0x30
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40005400 	.word	0x40005400
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40020400 	.word	0x40020400
 80018e4:	40005c00 	.word	0x40005c00
 80018e8:	40020800 	.word	0x40020800
 80018ec:	40020000 	.word	0x40020000

080018f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08a      	sub	sp, #40	; 0x28
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a29      	ldr	r2, [pc, #164]	; (80019b4 <HAL_SPI_MspInit+0xc4>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d14b      	bne.n	80019aa <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
 8001916:	4b28      	ldr	r3, [pc, #160]	; (80019b8 <HAL_SPI_MspInit+0xc8>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	4a27      	ldr	r2, [pc, #156]	; (80019b8 <HAL_SPI_MspInit+0xc8>)
 800191c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001920:	6413      	str	r3, [r2, #64]	; 0x40
 8001922:	4b25      	ldr	r3, [pc, #148]	; (80019b8 <HAL_SPI_MspInit+0xc8>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800192a:	613b      	str	r3, [r7, #16]
 800192c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	4b21      	ldr	r3, [pc, #132]	; (80019b8 <HAL_SPI_MspInit+0xc8>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	4a20      	ldr	r2, [pc, #128]	; (80019b8 <HAL_SPI_MspInit+0xc8>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	6313      	str	r3, [r2, #48]	; 0x30
 800193e:	4b1e      	ldr	r3, [pc, #120]	; (80019b8 <HAL_SPI_MspInit+0xc8>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	4b1a      	ldr	r3, [pc, #104]	; (80019b8 <HAL_SPI_MspInit+0xc8>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	4a19      	ldr	r2, [pc, #100]	; (80019b8 <HAL_SPI_MspInit+0xc8>)
 8001954:	f043 0304 	orr.w	r3, r3, #4
 8001958:	6313      	str	r3, [r2, #48]	; 0x30
 800195a:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <HAL_SPI_MspInit+0xc8>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f003 0304 	and.w	r3, r3, #4
 8001962:	60bb      	str	r3, [r7, #8]
 8001964:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GCS_Pin;
 8001966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800196a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	2302      	movs	r3, #2
 800196e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001974:	2302      	movs	r3, #2
 8001976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001978:	2306      	movs	r3, #6
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GCS_GPIO_Port, &GPIO_InitStruct);
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	4619      	mov	r1, r3
 8001982:	480e      	ldr	r0, [pc, #56]	; (80019bc <HAL_SPI_MspInit+0xcc>)
 8001984:	f000 ff78 	bl	8002878 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GSCK_Pin|GMISO_Pin|GMOSI_Pin;
 8001988:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800198c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198e:	2302      	movs	r3, #2
 8001990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001996:	2302      	movs	r3, #2
 8001998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800199a:	2306      	movs	r3, #6
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800199e:	f107 0314 	add.w	r3, r7, #20
 80019a2:	4619      	mov	r1, r3
 80019a4:	4806      	ldr	r0, [pc, #24]	; (80019c0 <HAL_SPI_MspInit+0xd0>)
 80019a6:	f000 ff67 	bl	8002878 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80019aa:	bf00      	nop
 80019ac:	3728      	adds	r7, #40	; 0x28
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40003c00 	.word	0x40003c00
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40020000 	.word	0x40020000
 80019c0:	40020800 	.word	0x40020800

080019c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08c      	sub	sp, #48	; 0x30
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a6c      	ldr	r2, [pc, #432]	; (8001b84 <HAL_TIM_Base_MspInit+0x1c0>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d10e      	bne.n	80019f4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019da:	4b6b      	ldr	r3, [pc, #428]	; (8001b88 <HAL_TIM_Base_MspInit+0x1c4>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019de:	4a6a      	ldr	r2, [pc, #424]	; (8001b88 <HAL_TIM_Base_MspInit+0x1c4>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	6453      	str	r3, [r2, #68]	; 0x44
 80019e6:	4b68      	ldr	r3, [pc, #416]	; (8001b88 <HAL_TIM_Base_MspInit+0x1c4>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80019f2:	e0c2      	b.n	8001b7a <HAL_TIM_Base_MspInit+0x1b6>
  else if(htim_base->Instance==TIM2)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019fc:	d10e      	bne.n	8001a1c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a02:	4b61      	ldr	r3, [pc, #388]	; (8001b88 <HAL_TIM_Base_MspInit+0x1c4>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	4a60      	ldr	r2, [pc, #384]	; (8001b88 <HAL_TIM_Base_MspInit+0x1c4>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0e:	4b5e      	ldr	r3, [pc, #376]	; (8001b88 <HAL_TIM_Base_MspInit+0x1c4>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001a1a:	e0ae      	b.n	8001b7a <HAL_TIM_Base_MspInit+0x1b6>
  else if(htim_base->Instance==TIM3)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a5a      	ldr	r2, [pc, #360]	; (8001b8c <HAL_TIM_Base_MspInit+0x1c8>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d10e      	bne.n	8001a44 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	627b      	str	r3, [r7, #36]	; 0x24
 8001a2a:	4b57      	ldr	r3, [pc, #348]	; (8001b88 <HAL_TIM_Base_MspInit+0x1c4>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	4a56      	ldr	r2, [pc, #344]	; (8001b88 <HAL_TIM_Base_MspInit+0x1c4>)
 8001a30:	f043 0302 	orr.w	r3, r3, #2
 8001a34:	6413      	str	r3, [r2, #64]	; 0x40
 8001a36:	4b54      	ldr	r3, [pc, #336]	; (8001b88 <HAL_TIM_Base_MspInit+0x1c4>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001a42:	e09a      	b.n	8001b7a <HAL_TIM_Base_MspInit+0x1b6>
  else if(htim_base->Instance==TIM4)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a51      	ldr	r2, [pc, #324]	; (8001b90 <HAL_TIM_Base_MspInit+0x1cc>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d10e      	bne.n	8001a6c <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	623b      	str	r3, [r7, #32]
 8001a52:	4b4d      	ldr	r3, [pc, #308]	; (8001b88 <HAL_TIM_Base_MspInit+0x1c4>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	4a4c      	ldr	r2, [pc, #304]	; (8001b88 <HAL_TIM_Base_MspInit+0x1c4>)
 8001a58:	f043 0304 	orr.w	r3, r3, #4
 8001a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a5e:	4b4a      	ldr	r3, [pc, #296]	; (8001b88 <HAL_TIM_Base_MspInit+0x1c4>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	f003 0304 	and.w	r3, r3, #4
 8001a66:	623b      	str	r3, [r7, #32]
 8001a68:	6a3b      	ldr	r3, [r7, #32]
}
 8001a6a:	e086      	b.n	8001b7a <HAL_TIM_Base_MspInit+0x1b6>
  else if(htim_base->Instance==TIM5)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a48      	ldr	r2, [pc, #288]	; (8001b94 <HAL_TIM_Base_MspInit+0x1d0>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d116      	bne.n	8001aa4 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
 8001a7a:	4b43      	ldr	r3, [pc, #268]	; (8001b88 <HAL_TIM_Base_MspInit+0x1c4>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	4a42      	ldr	r2, [pc, #264]	; (8001b88 <HAL_TIM_Base_MspInit+0x1c4>)
 8001a80:	f043 0308 	orr.w	r3, r3, #8
 8001a84:	6413      	str	r3, [r2, #64]	; 0x40
 8001a86:	4b40      	ldr	r3, [pc, #256]	; (8001b88 <HAL_TIM_Base_MspInit+0x1c4>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	61fb      	str	r3, [r7, #28]
 8001a90:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001a92:	2200      	movs	r2, #0
 8001a94:	2100      	movs	r1, #0
 8001a96:	2032      	movs	r0, #50	; 0x32
 8001a98:	f000 feb7 	bl	800280a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001a9c:	2032      	movs	r0, #50	; 0x32
 8001a9e:	f000 fed0 	bl	8002842 <HAL_NVIC_EnableIRQ>
}
 8001aa2:	e06a      	b.n	8001b7a <HAL_TIM_Base_MspInit+0x1b6>
  else if(htim_base->Instance==TIM7)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a3b      	ldr	r2, [pc, #236]	; (8001b98 <HAL_TIM_Base_MspInit+0x1d4>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d116      	bne.n	8001adc <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61bb      	str	r3, [r7, #24]
 8001ab2:	4b35      	ldr	r3, [pc, #212]	; (8001b88 <HAL_TIM_Base_MspInit+0x1c4>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	4a34      	ldr	r2, [pc, #208]	; (8001b88 <HAL_TIM_Base_MspInit+0x1c4>)
 8001ab8:	f043 0320 	orr.w	r3, r3, #32
 8001abc:	6413      	str	r3, [r2, #64]	; 0x40
 8001abe:	4b32      	ldr	r3, [pc, #200]	; (8001b88 <HAL_TIM_Base_MspInit+0x1c4>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f003 0320 	and.w	r3, r3, #32
 8001ac6:	61bb      	str	r3, [r7, #24]
 8001ac8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2100      	movs	r1, #0
 8001ace:	2037      	movs	r0, #55	; 0x37
 8001ad0:	f000 fe9b 	bl	800280a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001ad4:	2037      	movs	r0, #55	; 0x37
 8001ad6:	f000 feb4 	bl	8002842 <HAL_NVIC_EnableIRQ>
}
 8001ada:	e04e      	b.n	8001b7a <HAL_TIM_Base_MspInit+0x1b6>
  else if(htim_base->Instance==TIM9)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a2e      	ldr	r2, [pc, #184]	; (8001b9c <HAL_TIM_Base_MspInit+0x1d8>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d10e      	bne.n	8001b04 <HAL_TIM_Base_MspInit+0x140>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	4b27      	ldr	r3, [pc, #156]	; (8001b88 <HAL_TIM_Base_MspInit+0x1c4>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aee:	4a26      	ldr	r2, [pc, #152]	; (8001b88 <HAL_TIM_Base_MspInit+0x1c4>)
 8001af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af4:	6453      	str	r3, [r2, #68]	; 0x44
 8001af6:	4b24      	ldr	r3, [pc, #144]	; (8001b88 <HAL_TIM_Base_MspInit+0x1c4>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	697b      	ldr	r3, [r7, #20]
}
 8001b02:	e03a      	b.n	8001b7a <HAL_TIM_Base_MspInit+0x1b6>
  else if(htim_base->Instance==TIM10)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a25      	ldr	r2, [pc, #148]	; (8001ba0 <HAL_TIM_Base_MspInit+0x1dc>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d10e      	bne.n	8001b2c <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	613b      	str	r3, [r7, #16]
 8001b12:	4b1d      	ldr	r3, [pc, #116]	; (8001b88 <HAL_TIM_Base_MspInit+0x1c4>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b16:	4a1c      	ldr	r2, [pc, #112]	; (8001b88 <HAL_TIM_Base_MspInit+0x1c4>)
 8001b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b1e:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <HAL_TIM_Base_MspInit+0x1c4>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	613b      	str	r3, [r7, #16]
 8001b28:	693b      	ldr	r3, [r7, #16]
}
 8001b2a:	e026      	b.n	8001b7a <HAL_TIM_Base_MspInit+0x1b6>
  else if(htim_base->Instance==TIM11)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a1c      	ldr	r2, [pc, #112]	; (8001ba4 <HAL_TIM_Base_MspInit+0x1e0>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d10e      	bne.n	8001b54 <HAL_TIM_Base_MspInit+0x190>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	4b13      	ldr	r3, [pc, #76]	; (8001b88 <HAL_TIM_Base_MspInit+0x1c4>)
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3e:	4a12      	ldr	r2, [pc, #72]	; (8001b88 <HAL_TIM_Base_MspInit+0x1c4>)
 8001b40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b44:	6453      	str	r3, [r2, #68]	; 0x44
 8001b46:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <HAL_TIM_Base_MspInit+0x1c4>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
}
 8001b52:	e012      	b.n	8001b7a <HAL_TIM_Base_MspInit+0x1b6>
  else if(htim_base->Instance==TIM12)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a13      	ldr	r2, [pc, #76]	; (8001ba8 <HAL_TIM_Base_MspInit+0x1e4>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d10d      	bne.n	8001b7a <HAL_TIM_Base_MspInit+0x1b6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <HAL_TIM_Base_MspInit+0x1c4>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	4a08      	ldr	r2, [pc, #32]	; (8001b88 <HAL_TIM_Base_MspInit+0x1c4>)
 8001b68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b6e:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <HAL_TIM_Base_MspInit+0x1c4>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	68bb      	ldr	r3, [r7, #8]
}
 8001b7a:	bf00      	nop
 8001b7c:	3730      	adds	r7, #48	; 0x30
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40010000 	.word	0x40010000
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	40000400 	.word	0x40000400
 8001b90:	40000800 	.word	0x40000800
 8001b94:	40000c00 	.word	0x40000c00
 8001b98:	40001400 	.word	0x40001400
 8001b9c:	40014000 	.word	0x40014000
 8001ba0:	40014400 	.word	0x40014400
 8001ba4:	40014800 	.word	0x40014800
 8001ba8:	40001800 	.word	0x40001800

08001bac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b090      	sub	sp, #64	; 0x40
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a93      	ldr	r2, [pc, #588]	; (8001e18 <HAL_TIM_MspPostInit+0x26c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d11f      	bne.n	8001c0e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bd2:	4b92      	ldr	r3, [pc, #584]	; (8001e1c <HAL_TIM_MspPostInit+0x270>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	4a91      	ldr	r2, [pc, #580]	; (8001e1c <HAL_TIM_MspPostInit+0x270>)
 8001bd8:	f043 0310 	orr.w	r3, r3, #16
 8001bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bde:	4b8f      	ldr	r3, [pc, #572]	; (8001e1c <HAL_TIM_MspPostInit+0x270>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	f003 0310 	and.w	r3, r3, #16
 8001be6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = SRV1_Pin|SRV2_Pin|SRV3_Pin|SRV4_Pin;
 8001bea:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8001bee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c04:	4619      	mov	r1, r3
 8001c06:	4886      	ldr	r0, [pc, #536]	; (8001e20 <HAL_TIM_MspPostInit+0x274>)
 8001c08:	f000 fe36 	bl	8002878 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001c0c:	e0ff      	b.n	8001e0e <HAL_TIM_MspPostInit+0x262>
  else if(htim->Instance==TIM2)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c16:	d11f      	bne.n	8001c58 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c18:	2300      	movs	r3, #0
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c1c:	4b7f      	ldr	r3, [pc, #508]	; (8001e1c <HAL_TIM_MspPostInit+0x270>)
 8001c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c20:	4a7e      	ldr	r2, [pc, #504]	; (8001e1c <HAL_TIM_MspPostInit+0x270>)
 8001c22:	f043 0302 	orr.w	r3, r3, #2
 8001c26:	6313      	str	r3, [r2, #48]	; 0x30
 8001c28:	4b7c      	ldr	r3, [pc, #496]	; (8001e1c <HAL_TIM_MspPostInit+0x270>)
 8001c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = M5IN1_Pin|M5IN2_Pin;
 8001c34:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c42:	2300      	movs	r3, #0
 8001c44:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c46:	2301      	movs	r3, #1
 8001c48:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4874      	ldr	r0, [pc, #464]	; (8001e24 <HAL_TIM_MspPostInit+0x278>)
 8001c52:	f000 fe11 	bl	8002878 <HAL_GPIO_Init>
}
 8001c56:	e0da      	b.n	8001e0e <HAL_TIM_MspPostInit+0x262>
  else if(htim->Instance==TIM3)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a72      	ldr	r2, [pc, #456]	; (8001e28 <HAL_TIM_MspPostInit+0x27c>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d11e      	bne.n	8001ca0 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	623b      	str	r3, [r7, #32]
 8001c66:	4b6d      	ldr	r3, [pc, #436]	; (8001e1c <HAL_TIM_MspPostInit+0x270>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	4a6c      	ldr	r2, [pc, #432]	; (8001e1c <HAL_TIM_MspPostInit+0x270>)
 8001c6c:	f043 0302 	orr.w	r3, r3, #2
 8001c70:	6313      	str	r3, [r2, #48]	; 0x30
 8001c72:	4b6a      	ldr	r3, [pc, #424]	; (8001e1c <HAL_TIM_MspPostInit+0x270>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	623b      	str	r3, [r7, #32]
 8001c7c:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = M1EN_Pin|M1REF_Pin|M4EN_Pin|M4REF_Pin;
 8001c7e:	2333      	movs	r3, #51	; 0x33
 8001c80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c82:	2302      	movs	r3, #2
 8001c84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c96:	4619      	mov	r1, r3
 8001c98:	4862      	ldr	r0, [pc, #392]	; (8001e24 <HAL_TIM_MspPostInit+0x278>)
 8001c9a:	f000 fded 	bl	8002878 <HAL_GPIO_Init>
}
 8001c9e:	e0b6      	b.n	8001e0e <HAL_TIM_MspPostInit+0x262>
  else if(htim->Instance==TIM4)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a61      	ldr	r2, [pc, #388]	; (8001e2c <HAL_TIM_MspPostInit+0x280>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d11f      	bne.n	8001cea <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
 8001cae:	4b5b      	ldr	r3, [pc, #364]	; (8001e1c <HAL_TIM_MspPostInit+0x270>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	4a5a      	ldr	r2, [pc, #360]	; (8001e1c <HAL_TIM_MspPostInit+0x270>)
 8001cb4:	f043 0308 	orr.w	r3, r3, #8
 8001cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cba:	4b58      	ldr	r3, [pc, #352]	; (8001e1c <HAL_TIM_MspPostInit+0x270>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	f003 0308 	and.w	r3, r3, #8
 8001cc2:	61fb      	str	r3, [r7, #28]
 8001cc4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = M7IN1_Pin|M7IN2_Pin|M8IN1_Pin|M8IN2_Pin;
 8001cc6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4853      	ldr	r0, [pc, #332]	; (8001e30 <HAL_TIM_MspPostInit+0x284>)
 8001ce4:	f000 fdc8 	bl	8002878 <HAL_GPIO_Init>
}
 8001ce8:	e091      	b.n	8001e0e <HAL_TIM_MspPostInit+0x262>
  else if(htim->Instance==TIM9)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a51      	ldr	r2, [pc, #324]	; (8001e34 <HAL_TIM_MspPostInit+0x288>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d11e      	bne.n	8001d32 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	61bb      	str	r3, [r7, #24]
 8001cf8:	4b48      	ldr	r3, [pc, #288]	; (8001e1c <HAL_TIM_MspPostInit+0x270>)
 8001cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfc:	4a47      	ldr	r2, [pc, #284]	; (8001e1c <HAL_TIM_MspPostInit+0x270>)
 8001cfe:	f043 0310 	orr.w	r3, r3, #16
 8001d02:	6313      	str	r3, [r2, #48]	; 0x30
 8001d04:	4b45      	ldr	r3, [pc, #276]	; (8001e1c <HAL_TIM_MspPostInit+0x270>)
 8001d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d08:	f003 0310 	and.w	r3, r3, #16
 8001d0c:	61bb      	str	r3, [r7, #24]
 8001d0e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = M2EN_Pin|M2REF_Pin;
 8001d10:	2360      	movs	r3, #96	; 0x60
 8001d12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d14:	2302      	movs	r3, #2
 8001d16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001d20:	2303      	movs	r3, #3
 8001d22:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d28:	4619      	mov	r1, r3
 8001d2a:	483d      	ldr	r0, [pc, #244]	; (8001e20 <HAL_TIM_MspPostInit+0x274>)
 8001d2c:	f000 fda4 	bl	8002878 <HAL_GPIO_Init>
}
 8001d30:	e06d      	b.n	8001e0e <HAL_TIM_MspPostInit+0x262>
  else if(htim->Instance==TIM10)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a40      	ldr	r2, [pc, #256]	; (8001e38 <HAL_TIM_MspPostInit+0x28c>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d11f      	bne.n	8001d7c <HAL_TIM_MspPostInit+0x1d0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	4b36      	ldr	r3, [pc, #216]	; (8001e1c <HAL_TIM_MspPostInit+0x270>)
 8001d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d44:	4a35      	ldr	r2, [pc, #212]	; (8001e1c <HAL_TIM_MspPostInit+0x270>)
 8001d46:	f043 0302 	orr.w	r3, r3, #2
 8001d4a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4c:	4b33      	ldr	r3, [pc, #204]	; (8001e1c <HAL_TIM_MspPostInit+0x270>)
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	617b      	str	r3, [r7, #20]
 8001d56:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = M3EN_Pin;
 8001d58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d66:	2300      	movs	r3, #0
 8001d68:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(M3EN_GPIO_Port, &GPIO_InitStruct);
 8001d6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d72:	4619      	mov	r1, r3
 8001d74:	482b      	ldr	r0, [pc, #172]	; (8001e24 <HAL_TIM_MspPostInit+0x278>)
 8001d76:	f000 fd7f 	bl	8002878 <HAL_GPIO_Init>
}
 8001d7a:	e048      	b.n	8001e0e <HAL_TIM_MspPostInit+0x262>
  else if(htim->Instance==TIM11)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a2e      	ldr	r2, [pc, #184]	; (8001e3c <HAL_TIM_MspPostInit+0x290>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d11f      	bne.n	8001dc6 <HAL_TIM_MspPostInit+0x21a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	4b24      	ldr	r3, [pc, #144]	; (8001e1c <HAL_TIM_MspPostInit+0x270>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	4a23      	ldr	r2, [pc, #140]	; (8001e1c <HAL_TIM_MspPostInit+0x270>)
 8001d90:	f043 0302 	orr.w	r3, r3, #2
 8001d94:	6313      	str	r3, [r2, #48]	; 0x30
 8001d96:	4b21      	ldr	r3, [pc, #132]	; (8001e1c <HAL_TIM_MspPostInit+0x270>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M3REF_Pin;
 8001da2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001da6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da8:	2302      	movs	r3, #2
 8001daa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db0:	2300      	movs	r3, #0
 8001db2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001db4:	2303      	movs	r3, #3
 8001db6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(M3REF_GPIO_Port, &GPIO_InitStruct);
 8001db8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4819      	ldr	r0, [pc, #100]	; (8001e24 <HAL_TIM_MspPostInit+0x278>)
 8001dc0:	f000 fd5a 	bl	8002878 <HAL_GPIO_Init>
}
 8001dc4:	e023      	b.n	8001e0e <HAL_TIM_MspPostInit+0x262>
  else if(htim->Instance==TIM12)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a1d      	ldr	r2, [pc, #116]	; (8001e40 <HAL_TIM_MspPostInit+0x294>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d11e      	bne.n	8001e0e <HAL_TIM_MspPostInit+0x262>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	4b11      	ldr	r3, [pc, #68]	; (8001e1c <HAL_TIM_MspPostInit+0x270>)
 8001dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd8:	4a10      	ldr	r2, [pc, #64]	; (8001e1c <HAL_TIM_MspPostInit+0x270>)
 8001dda:	f043 0302 	orr.w	r3, r3, #2
 8001dde:	6313      	str	r3, [r2, #48]	; 0x30
 8001de0:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <HAL_TIM_MspPostInit+0x270>)
 8001de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M6IN1_Pin|M6IN2_Pin;
 8001dec:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001df0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df2:	2302      	movs	r3, #2
 8001df4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001dfe:	2309      	movs	r3, #9
 8001e00:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e06:	4619      	mov	r1, r3
 8001e08:	4806      	ldr	r0, [pc, #24]	; (8001e24 <HAL_TIM_MspPostInit+0x278>)
 8001e0a:	f000 fd35 	bl	8002878 <HAL_GPIO_Init>
}
 8001e0e:	bf00      	nop
 8001e10:	3740      	adds	r7, #64	; 0x40
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40010000 	.word	0x40010000
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	40021000 	.word	0x40021000
 8001e24:	40020400 	.word	0x40020400
 8001e28:	40000400 	.word	0x40000400
 8001e2c:	40000800 	.word	0x40000800
 8001e30:	40020c00 	.word	0x40020c00
 8001e34:	40014000 	.word	0x40014000
 8001e38:	40014400 	.word	0x40014400
 8001e3c:	40014800 	.word	0x40014800
 8001e40:	40001800 	.word	0x40001800

08001e44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08c      	sub	sp, #48	; 0x30
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4c:	f107 031c 	add.w	r3, r7, #28
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a32      	ldr	r2, [pc, #200]	; (8001f2c <HAL_UART_MspInit+0xe8>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d12c      	bne.n	8001ec0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	61bb      	str	r3, [r7, #24]
 8001e6a:	4b31      	ldr	r3, [pc, #196]	; (8001f30 <HAL_UART_MspInit+0xec>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	4a30      	ldr	r2, [pc, #192]	; (8001f30 <HAL_UART_MspInit+0xec>)
 8001e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e74:	6413      	str	r3, [r2, #64]	; 0x40
 8001e76:	4b2e      	ldr	r3, [pc, #184]	; (8001f30 <HAL_UART_MspInit+0xec>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7e:	61bb      	str	r3, [r7, #24]
 8001e80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
 8001e86:	4b2a      	ldr	r3, [pc, #168]	; (8001f30 <HAL_UART_MspInit+0xec>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	4a29      	ldr	r2, [pc, #164]	; (8001f30 <HAL_UART_MspInit+0xec>)
 8001e8c:	f043 0308 	orr.w	r3, r3, #8
 8001e90:	6313      	str	r3, [r2, #48]	; 0x30
 8001e92:	4b27      	ldr	r3, [pc, #156]	; (8001f30 <HAL_UART_MspInit+0xec>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	f003 0308 	and.w	r3, r3, #8
 8001e9a:	617b      	str	r3, [r7, #20]
 8001e9c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = TX1_Pin|RX1_Pin;
 8001e9e:	2360      	movs	r3, #96	; 0x60
 8001ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001eae:	2307      	movs	r3, #7
 8001eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eb2:	f107 031c 	add.w	r3, r7, #28
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	481e      	ldr	r0, [pc, #120]	; (8001f34 <HAL_UART_MspInit+0xf0>)
 8001eba:	f000 fcdd 	bl	8002878 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001ebe:	e030      	b.n	8001f22 <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a1c      	ldr	r2, [pc, #112]	; (8001f38 <HAL_UART_MspInit+0xf4>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d12b      	bne.n	8001f22 <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	613b      	str	r3, [r7, #16]
 8001ece:	4b18      	ldr	r3, [pc, #96]	; (8001f30 <HAL_UART_MspInit+0xec>)
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed2:	4a17      	ldr	r2, [pc, #92]	; (8001f30 <HAL_UART_MspInit+0xec>)
 8001ed4:	f043 0320 	orr.w	r3, r3, #32
 8001ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eda:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <HAL_UART_MspInit+0xec>)
 8001edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ede:	f003 0320 	and.w	r3, r3, #32
 8001ee2:	613b      	str	r3, [r7, #16]
 8001ee4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <HAL_UART_MspInit+0xec>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	4a10      	ldr	r2, [pc, #64]	; (8001f30 <HAL_UART_MspInit+0xec>)
 8001ef0:	f043 0304 	orr.w	r3, r3, #4
 8001ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef6:	4b0e      	ldr	r3, [pc, #56]	; (8001f30 <HAL_UART_MspInit+0xec>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	f003 0304 	and.w	r3, r3, #4
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TX2_Pin|RX2_Pin;
 8001f02:	23c0      	movs	r3, #192	; 0xc0
 8001f04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f06:	2302      	movs	r3, #2
 8001f08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001f12:	2308      	movs	r3, #8
 8001f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f16:	f107 031c 	add.w	r3, r7, #28
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4807      	ldr	r0, [pc, #28]	; (8001f3c <HAL_UART_MspInit+0xf8>)
 8001f1e:	f000 fcab 	bl	8002878 <HAL_GPIO_Init>
}
 8001f22:	bf00      	nop
 8001f24:	3730      	adds	r7, #48	; 0x30
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40004400 	.word	0x40004400
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40020c00 	.word	0x40020c00
 8001f38:	40011400 	.word	0x40011400
 8001f3c:	40020800 	.word	0x40020800

08001f40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f44:	e7fe      	b.n	8001f44 <NMI_Handler+0x4>

08001f46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f46:	b480      	push	{r7}
 8001f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f4a:	e7fe      	b.n	8001f4a <HardFault_Handler+0x4>

08001f4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f50:	e7fe      	b.n	8001f50 <MemManage_Handler+0x4>

08001f52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f52:	b480      	push	{r7}
 8001f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f56:	e7fe      	b.n	8001f56 <BusFault_Handler+0x4>

08001f58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f5c:	e7fe      	b.n	8001f5c <UsageFault_Handler+0x4>

08001f5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f62:	bf00      	nop
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f70:	bf00      	nop
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f8c:	f000 f8bc 	bl	8002108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f90:	bf00      	nop
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GINT2_Pin);
 8001f98:	2001      	movs	r0, #1
 8001f9a:	f000 fe23 	bl	8002be4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GINT1_Pin);
 8001fa6:	2002      	movs	r0, #2
 8001fa8:	f000 fe1c 	bl	8002be4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001fac:	bf00      	nop
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001fb4:	4802      	ldr	r0, [pc, #8]	; (8001fc0 <TIM5_IRQHandler+0x10>)
 8001fb6:	f003 f832 	bl	800501e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000410 	.word	0x20000410

08001fc4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001fc8:	4802      	ldr	r0, [pc, #8]	; (8001fd4 <TIM7_IRQHandler+0x10>)
 8001fca:	f003 f828 	bl	800501e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000458 	.word	0x20000458

08001fd8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001fdc:	4802      	ldr	r0, [pc, #8]	; (8001fe8 <OTG_FS_IRQHandler+0x10>)
 8001fde:	f001 f8b9 	bl	8003154 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20001b2c 	.word	0x20001b2c

08001fec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ff0:	4b06      	ldr	r3, [pc, #24]	; (800200c <SystemInit+0x20>)
 8001ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff6:	4a05      	ldr	r2, [pc, #20]	; (800200c <SystemInit+0x20>)
 8001ff8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ffc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002000:	bf00      	nop
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002010:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002048 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002014:	480d      	ldr	r0, [pc, #52]	; (800204c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002016:	490e      	ldr	r1, [pc, #56]	; (8002050 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002018:	4a0e      	ldr	r2, [pc, #56]	; (8002054 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800201a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800201c:	e002      	b.n	8002024 <LoopCopyDataInit>

0800201e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800201e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002020:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002022:	3304      	adds	r3, #4

08002024 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002024:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002026:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002028:	d3f9      	bcc.n	800201e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800202a:	4a0b      	ldr	r2, [pc, #44]	; (8002058 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800202c:	4c0b      	ldr	r4, [pc, #44]	; (800205c <LoopFillZerobss+0x26>)
  movs r3, #0
 800202e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002030:	e001      	b.n	8002036 <LoopFillZerobss>

08002032 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002032:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002034:	3204      	adds	r2, #4

08002036 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002036:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002038:	d3fb      	bcc.n	8002032 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800203a:	f7ff ffd7 	bl	8001fec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800203e:	f008 fa13 	bl	800a468 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002042:	f7fe fa51 	bl	80004e8 <main>
  bx  lr    
 8002046:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002048:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800204c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002050:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8002054:	0800a550 	.word	0x0800a550
  ldr r2, =_sbss
 8002058:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 800205c:	20002258 	.word	0x20002258

08002060 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002060:	e7fe      	b.n	8002060 <ADC_IRQHandler>
	...

08002064 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002068:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <HAL_Init+0x40>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a0d      	ldr	r2, [pc, #52]	; (80020a4 <HAL_Init+0x40>)
 800206e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002072:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002074:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <HAL_Init+0x40>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <HAL_Init+0x40>)
 800207a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800207e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002080:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <HAL_Init+0x40>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a07      	ldr	r2, [pc, #28]	; (80020a4 <HAL_Init+0x40>)
 8002086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800208a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800208c:	2003      	movs	r0, #3
 800208e:	f000 fbb1 	bl	80027f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002092:	200f      	movs	r0, #15
 8002094:	f000 f808 	bl	80020a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002098:	f7ff fa88 	bl	80015ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40023c00 	.word	0x40023c00

080020a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020b0:	4b12      	ldr	r3, [pc, #72]	; (80020fc <HAL_InitTick+0x54>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	4b12      	ldr	r3, [pc, #72]	; (8002100 <HAL_InitTick+0x58>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	4619      	mov	r1, r3
 80020ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020be:	fbb3 f3f1 	udiv	r3, r3, r1
 80020c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c6:	4618      	mov	r0, r3
 80020c8:	f000 fbc9 	bl	800285e <HAL_SYSTICK_Config>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e00e      	b.n	80020f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b0f      	cmp	r3, #15
 80020da:	d80a      	bhi.n	80020f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020dc:	2200      	movs	r2, #0
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	f04f 30ff 	mov.w	r0, #4294967295
 80020e4:	f000 fb91 	bl	800280a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020e8:	4a06      	ldr	r2, [pc, #24]	; (8002104 <HAL_InitTick+0x5c>)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
 80020f0:	e000      	b.n	80020f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20000000 	.word	0x20000000
 8002100:	20000008 	.word	0x20000008
 8002104:	20000004 	.word	0x20000004

08002108 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <HAL_IncTick+0x20>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	461a      	mov	r2, r3
 8002112:	4b06      	ldr	r3, [pc, #24]	; (800212c <HAL_IncTick+0x24>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4413      	add	r3, r2
 8002118:	4a04      	ldr	r2, [pc, #16]	; (800212c <HAL_IncTick+0x24>)
 800211a:	6013      	str	r3, [r2, #0]
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	20000008 	.word	0x20000008
 800212c:	20000648 	.word	0x20000648

08002130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  return uwTick;
 8002134:	4b03      	ldr	r3, [pc, #12]	; (8002144 <HAL_GetTick+0x14>)
 8002136:	681b      	ldr	r3, [r3, #0]
}
 8002138:	4618      	mov	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	20000648 	.word	0x20000648

08002148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002150:	f7ff ffee 	bl	8002130 <HAL_GetTick>
 8002154:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002160:	d005      	beq.n	800216e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002162:	4b0a      	ldr	r3, [pc, #40]	; (800218c <HAL_Delay+0x44>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	461a      	mov	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4413      	add	r3, r2
 800216c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800216e:	bf00      	nop
 8002170:	f7ff ffde 	bl	8002130 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	429a      	cmp	r2, r3
 800217e:	d8f7      	bhi.n	8002170 <HAL_Delay+0x28>
  {
  }
}
 8002180:	bf00      	nop
 8002182:	bf00      	nop
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000008 	.word	0x20000008

08002190 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002198:	2300      	movs	r3, #0
 800219a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e033      	b.n	800220e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d109      	bne.n	80021c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff fa24 	bl	80015fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f003 0310 	and.w	r3, r3, #16
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d118      	bne.n	8002200 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021d6:	f023 0302 	bic.w	r3, r3, #2
 80021da:	f043 0202 	orr.w	r2, r3, #2
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f93a 	bl	800245c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f023 0303 	bic.w	r3, r3, #3
 80021f6:	f043 0201 	orr.w	r2, r3, #1
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	641a      	str	r2, [r3, #64]	; 0x40
 80021fe:	e001      	b.n	8002204 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800220c:	7bfb      	ldrb	r3, [r7, #15]
}
 800220e:	4618      	mov	r0, r3
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
	...

08002218 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002222:	2300      	movs	r3, #0
 8002224:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800222c:	2b01      	cmp	r3, #1
 800222e:	d101      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x1c>
 8002230:	2302      	movs	r3, #2
 8002232:	e105      	b.n	8002440 <HAL_ADC_ConfigChannel+0x228>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b09      	cmp	r3, #9
 8002242:	d925      	bls.n	8002290 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68d9      	ldr	r1, [r3, #12]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	b29b      	uxth	r3, r3
 8002250:	461a      	mov	r2, r3
 8002252:	4613      	mov	r3, r2
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	4413      	add	r3, r2
 8002258:	3b1e      	subs	r3, #30
 800225a:	2207      	movs	r2, #7
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43da      	mvns	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	400a      	ands	r2, r1
 8002268:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68d9      	ldr	r1, [r3, #12]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	b29b      	uxth	r3, r3
 800227a:	4618      	mov	r0, r3
 800227c:	4603      	mov	r3, r0
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	4403      	add	r3, r0
 8002282:	3b1e      	subs	r3, #30
 8002284:	409a      	lsls	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	e022      	b.n	80022d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6919      	ldr	r1, [r3, #16]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	b29b      	uxth	r3, r3
 800229c:	461a      	mov	r2, r3
 800229e:	4613      	mov	r3, r2
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	4413      	add	r3, r2
 80022a4:	2207      	movs	r2, #7
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43da      	mvns	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	400a      	ands	r2, r1
 80022b2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6919      	ldr	r1, [r3, #16]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	689a      	ldr	r2, [r3, #8]
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	4618      	mov	r0, r3
 80022c6:	4603      	mov	r3, r0
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	4403      	add	r3, r0
 80022cc:	409a      	lsls	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b06      	cmp	r3, #6
 80022dc:	d824      	bhi.n	8002328 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	3b05      	subs	r3, #5
 80022f0:	221f      	movs	r2, #31
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43da      	mvns	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	400a      	ands	r2, r1
 80022fe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	b29b      	uxth	r3, r3
 800230c:	4618      	mov	r0, r3
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	3b05      	subs	r3, #5
 800231a:	fa00 f203 	lsl.w	r2, r0, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	430a      	orrs	r2, r1
 8002324:	635a      	str	r2, [r3, #52]	; 0x34
 8002326:	e04c      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b0c      	cmp	r3, #12
 800232e:	d824      	bhi.n	800237a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	4613      	mov	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	3b23      	subs	r3, #35	; 0x23
 8002342:	221f      	movs	r2, #31
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43da      	mvns	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	400a      	ands	r2, r1
 8002350:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	b29b      	uxth	r3, r3
 800235e:	4618      	mov	r0, r3
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	3b23      	subs	r3, #35	; 0x23
 800236c:	fa00 f203 	lsl.w	r2, r0, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	430a      	orrs	r2, r1
 8002376:	631a      	str	r2, [r3, #48]	; 0x30
 8002378:	e023      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	3b41      	subs	r3, #65	; 0x41
 800238c:	221f      	movs	r2, #31
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43da      	mvns	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	400a      	ands	r2, r1
 800239a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	4618      	mov	r0, r3
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	3b41      	subs	r3, #65	; 0x41
 80023b6:	fa00 f203 	lsl.w	r2, r0, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023c2:	4b22      	ldr	r3, [pc, #136]	; (800244c <HAL_ADC_ConfigChannel+0x234>)
 80023c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a21      	ldr	r2, [pc, #132]	; (8002450 <HAL_ADC_ConfigChannel+0x238>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d109      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x1cc>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b12      	cmp	r3, #18
 80023d6:	d105      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a19      	ldr	r2, [pc, #100]	; (8002450 <HAL_ADC_ConfigChannel+0x238>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d123      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x21e>
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2b10      	cmp	r3, #16
 80023f4:	d003      	beq.n	80023fe <HAL_ADC_ConfigChannel+0x1e6>
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2b11      	cmp	r3, #17
 80023fc:	d11b      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2b10      	cmp	r3, #16
 8002410:	d111      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002412:	4b10      	ldr	r3, [pc, #64]	; (8002454 <HAL_ADC_ConfigChannel+0x23c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a10      	ldr	r2, [pc, #64]	; (8002458 <HAL_ADC_ConfigChannel+0x240>)
 8002418:	fba2 2303 	umull	r2, r3, r2, r3
 800241c:	0c9a      	lsrs	r2, r3, #18
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002428:	e002      	b.n	8002430 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	3b01      	subs	r3, #1
 800242e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1f9      	bne.n	800242a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	40012300 	.word	0x40012300
 8002450:	40012000 	.word	0x40012000
 8002454:	20000000 	.word	0x20000000
 8002458:	431bde83 	.word	0x431bde83

0800245c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002464:	4b79      	ldr	r3, [pc, #484]	; (800264c <ADC_Init+0x1f0>)
 8002466:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	431a      	orrs	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002490:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6859      	ldr	r1, [r3, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	021a      	lsls	r2, r3, #8
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80024b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6859      	ldr	r1, [r3, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689a      	ldr	r2, [r3, #8]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6899      	ldr	r1, [r3, #8]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68da      	ldr	r2, [r3, #12]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ee:	4a58      	ldr	r2, [pc, #352]	; (8002650 <ADC_Init+0x1f4>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d022      	beq.n	800253a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689a      	ldr	r2, [r3, #8]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002502:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6899      	ldr	r1, [r3, #8]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	430a      	orrs	r2, r1
 8002514:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002524:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6899      	ldr	r1, [r3, #8]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	e00f      	b.n	800255a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002548:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002558:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0202 	bic.w	r2, r2, #2
 8002568:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6899      	ldr	r1, [r3, #8]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	7e1b      	ldrb	r3, [r3, #24]
 8002574:	005a      	lsls	r2, r3, #1
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d01b      	beq.n	80025c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002596:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	685a      	ldr	r2, [r3, #4]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80025a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6859      	ldr	r1, [r3, #4]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b2:	3b01      	subs	r3, #1
 80025b4:	035a      	lsls	r2, r3, #13
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	605a      	str	r2, [r3, #4]
 80025be:	e007      	b.n	80025d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80025de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	3b01      	subs	r3, #1
 80025ec:	051a      	lsls	r2, r3, #20
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002604:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6899      	ldr	r1, [r3, #8]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002612:	025a      	lsls	r2, r3, #9
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800262a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6899      	ldr	r1, [r3, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	029a      	lsls	r2, r3, #10
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	609a      	str	r2, [r3, #8]
}
 8002640:	bf00      	nop
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	40012300 	.word	0x40012300
 8002650:	0f000001 	.word	0x0f000001

08002654 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002664:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <__NVIC_SetPriorityGrouping+0x44>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002670:	4013      	ands	r3, r2
 8002672:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800267c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002686:	4a04      	ldr	r2, [pc, #16]	; (8002698 <__NVIC_SetPriorityGrouping+0x44>)
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	60d3      	str	r3, [r2, #12]
}
 800268c:	bf00      	nop
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	e000ed00 	.word	0xe000ed00

0800269c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026a0:	4b04      	ldr	r3, [pc, #16]	; (80026b4 <__NVIC_GetPriorityGrouping+0x18>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	0a1b      	lsrs	r3, r3, #8
 80026a6:	f003 0307 	and.w	r3, r3, #7
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	e000ed00 	.word	0xe000ed00

080026b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	db0b      	blt.n	80026e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ca:	79fb      	ldrb	r3, [r7, #7]
 80026cc:	f003 021f 	and.w	r2, r3, #31
 80026d0:	4907      	ldr	r1, [pc, #28]	; (80026f0 <__NVIC_EnableIRQ+0x38>)
 80026d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d6:	095b      	lsrs	r3, r3, #5
 80026d8:	2001      	movs	r0, #1
 80026da:	fa00 f202 	lsl.w	r2, r0, r2
 80026de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	e000e100 	.word	0xe000e100

080026f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	6039      	str	r1, [r7, #0]
 80026fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002704:	2b00      	cmp	r3, #0
 8002706:	db0a      	blt.n	800271e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	b2da      	uxtb	r2, r3
 800270c:	490c      	ldr	r1, [pc, #48]	; (8002740 <__NVIC_SetPriority+0x4c>)
 800270e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002712:	0112      	lsls	r2, r2, #4
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	440b      	add	r3, r1
 8002718:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800271c:	e00a      	b.n	8002734 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	b2da      	uxtb	r2, r3
 8002722:	4908      	ldr	r1, [pc, #32]	; (8002744 <__NVIC_SetPriority+0x50>)
 8002724:	79fb      	ldrb	r3, [r7, #7]
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	3b04      	subs	r3, #4
 800272c:	0112      	lsls	r2, r2, #4
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	440b      	add	r3, r1
 8002732:	761a      	strb	r2, [r3, #24]
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	e000e100 	.word	0xe000e100
 8002744:	e000ed00 	.word	0xe000ed00

08002748 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002748:	b480      	push	{r7}
 800274a:	b089      	sub	sp, #36	; 0x24
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	f1c3 0307 	rsb	r3, r3, #7
 8002762:	2b04      	cmp	r3, #4
 8002764:	bf28      	it	cs
 8002766:	2304      	movcs	r3, #4
 8002768:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	3304      	adds	r3, #4
 800276e:	2b06      	cmp	r3, #6
 8002770:	d902      	bls.n	8002778 <NVIC_EncodePriority+0x30>
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	3b03      	subs	r3, #3
 8002776:	e000      	b.n	800277a <NVIC_EncodePriority+0x32>
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800277c:	f04f 32ff 	mov.w	r2, #4294967295
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43da      	mvns	r2, r3
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	401a      	ands	r2, r3
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002790:	f04f 31ff 	mov.w	r1, #4294967295
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	fa01 f303 	lsl.w	r3, r1, r3
 800279a:	43d9      	mvns	r1, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a0:	4313      	orrs	r3, r2
         );
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3724      	adds	r7, #36	; 0x24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
	...

080027b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	3b01      	subs	r3, #1
 80027bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027c0:	d301      	bcc.n	80027c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027c2:	2301      	movs	r3, #1
 80027c4:	e00f      	b.n	80027e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027c6:	4a0a      	ldr	r2, [pc, #40]	; (80027f0 <SysTick_Config+0x40>)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027ce:	210f      	movs	r1, #15
 80027d0:	f04f 30ff 	mov.w	r0, #4294967295
 80027d4:	f7ff ff8e 	bl	80026f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027d8:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <SysTick_Config+0x40>)
 80027da:	2200      	movs	r2, #0
 80027dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027de:	4b04      	ldr	r3, [pc, #16]	; (80027f0 <SysTick_Config+0x40>)
 80027e0:	2207      	movs	r2, #7
 80027e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	e000e010 	.word	0xe000e010

080027f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f7ff ff29 	bl	8002654 <__NVIC_SetPriorityGrouping>
}
 8002802:	bf00      	nop
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800280a:	b580      	push	{r7, lr}
 800280c:	b086      	sub	sp, #24
 800280e:	af00      	add	r7, sp, #0
 8002810:	4603      	mov	r3, r0
 8002812:	60b9      	str	r1, [r7, #8]
 8002814:	607a      	str	r2, [r7, #4]
 8002816:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002818:	2300      	movs	r3, #0
 800281a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800281c:	f7ff ff3e 	bl	800269c <__NVIC_GetPriorityGrouping>
 8002820:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	68b9      	ldr	r1, [r7, #8]
 8002826:	6978      	ldr	r0, [r7, #20]
 8002828:	f7ff ff8e 	bl	8002748 <NVIC_EncodePriority>
 800282c:	4602      	mov	r2, r0
 800282e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002832:	4611      	mov	r1, r2
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff ff5d 	bl	80026f4 <__NVIC_SetPriority>
}
 800283a:	bf00      	nop
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b082      	sub	sp, #8
 8002846:	af00      	add	r7, sp, #0
 8002848:	4603      	mov	r3, r0
 800284a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800284c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff ff31 	bl	80026b8 <__NVIC_EnableIRQ>
}
 8002856:	bf00      	nop
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b082      	sub	sp, #8
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7ff ffa2 	bl	80027b0 <SysTick_Config>
 800286c:	4603      	mov	r3, r0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002878:	b480      	push	{r7}
 800287a:	b089      	sub	sp, #36	; 0x24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002882:	2300      	movs	r3, #0
 8002884:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002886:	2300      	movs	r3, #0
 8002888:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800288a:	2300      	movs	r3, #0
 800288c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800288e:	2300      	movs	r3, #0
 8002890:	61fb      	str	r3, [r7, #28]
 8002892:	e16b      	b.n	8002b6c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002894:	2201      	movs	r2, #1
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	4013      	ands	r3, r2
 80028a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	f040 815a 	bne.w	8002b66 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f003 0303 	and.w	r3, r3, #3
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d005      	beq.n	80028ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d130      	bne.n	800292c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	2203      	movs	r2, #3
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	43db      	mvns	r3, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4013      	ands	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002900:	2201      	movs	r2, #1
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4013      	ands	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	091b      	lsrs	r3, r3, #4
 8002916:	f003 0201 	and.w	r2, r3, #1
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4313      	orrs	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f003 0303 	and.w	r3, r3, #3
 8002934:	2b03      	cmp	r3, #3
 8002936:	d017      	beq.n	8002968 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	2203      	movs	r2, #3
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4013      	ands	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4313      	orrs	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 0303 	and.w	r3, r3, #3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d123      	bne.n	80029bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	08da      	lsrs	r2, r3, #3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3208      	adds	r2, #8
 800297c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002980:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	f003 0307 	and.w	r3, r3, #7
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	220f      	movs	r2, #15
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	43db      	mvns	r3, r3
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	4013      	ands	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	691a      	ldr	r2, [r3, #16]
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	08da      	lsrs	r2, r3, #3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3208      	adds	r2, #8
 80029b6:	69b9      	ldr	r1, [r7, #24]
 80029b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	2203      	movs	r2, #3
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f003 0203 	and.w	r2, r3, #3
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 80b4 	beq.w	8002b66 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	4b60      	ldr	r3, [pc, #384]	; (8002b84 <HAL_GPIO_Init+0x30c>)
 8002a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a06:	4a5f      	ldr	r2, [pc, #380]	; (8002b84 <HAL_GPIO_Init+0x30c>)
 8002a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a0e:	4b5d      	ldr	r3, [pc, #372]	; (8002b84 <HAL_GPIO_Init+0x30c>)
 8002a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a1a:	4a5b      	ldr	r2, [pc, #364]	; (8002b88 <HAL_GPIO_Init+0x310>)
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	089b      	lsrs	r3, r3, #2
 8002a20:	3302      	adds	r3, #2
 8002a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	220f      	movs	r2, #15
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	43db      	mvns	r3, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a52      	ldr	r2, [pc, #328]	; (8002b8c <HAL_GPIO_Init+0x314>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d02b      	beq.n	8002a9e <HAL_GPIO_Init+0x226>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a51      	ldr	r2, [pc, #324]	; (8002b90 <HAL_GPIO_Init+0x318>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d025      	beq.n	8002a9a <HAL_GPIO_Init+0x222>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a50      	ldr	r2, [pc, #320]	; (8002b94 <HAL_GPIO_Init+0x31c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d01f      	beq.n	8002a96 <HAL_GPIO_Init+0x21e>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a4f      	ldr	r2, [pc, #316]	; (8002b98 <HAL_GPIO_Init+0x320>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d019      	beq.n	8002a92 <HAL_GPIO_Init+0x21a>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a4e      	ldr	r2, [pc, #312]	; (8002b9c <HAL_GPIO_Init+0x324>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d013      	beq.n	8002a8e <HAL_GPIO_Init+0x216>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a4d      	ldr	r2, [pc, #308]	; (8002ba0 <HAL_GPIO_Init+0x328>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d00d      	beq.n	8002a8a <HAL_GPIO_Init+0x212>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a4c      	ldr	r2, [pc, #304]	; (8002ba4 <HAL_GPIO_Init+0x32c>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d007      	beq.n	8002a86 <HAL_GPIO_Init+0x20e>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a4b      	ldr	r2, [pc, #300]	; (8002ba8 <HAL_GPIO_Init+0x330>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d101      	bne.n	8002a82 <HAL_GPIO_Init+0x20a>
 8002a7e:	2307      	movs	r3, #7
 8002a80:	e00e      	b.n	8002aa0 <HAL_GPIO_Init+0x228>
 8002a82:	2308      	movs	r3, #8
 8002a84:	e00c      	b.n	8002aa0 <HAL_GPIO_Init+0x228>
 8002a86:	2306      	movs	r3, #6
 8002a88:	e00a      	b.n	8002aa0 <HAL_GPIO_Init+0x228>
 8002a8a:	2305      	movs	r3, #5
 8002a8c:	e008      	b.n	8002aa0 <HAL_GPIO_Init+0x228>
 8002a8e:	2304      	movs	r3, #4
 8002a90:	e006      	b.n	8002aa0 <HAL_GPIO_Init+0x228>
 8002a92:	2303      	movs	r3, #3
 8002a94:	e004      	b.n	8002aa0 <HAL_GPIO_Init+0x228>
 8002a96:	2302      	movs	r3, #2
 8002a98:	e002      	b.n	8002aa0 <HAL_GPIO_Init+0x228>
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e000      	b.n	8002aa0 <HAL_GPIO_Init+0x228>
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	69fa      	ldr	r2, [r7, #28]
 8002aa2:	f002 0203 	and.w	r2, r2, #3
 8002aa6:	0092      	lsls	r2, r2, #2
 8002aa8:	4093      	lsls	r3, r2
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ab0:	4935      	ldr	r1, [pc, #212]	; (8002b88 <HAL_GPIO_Init+0x310>)
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	089b      	lsrs	r3, r3, #2
 8002ab6:	3302      	adds	r3, #2
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002abe:	4b3b      	ldr	r3, [pc, #236]	; (8002bac <HAL_GPIO_Init+0x334>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4013      	ands	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ae2:	4a32      	ldr	r2, [pc, #200]	; (8002bac <HAL_GPIO_Init+0x334>)
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ae8:	4b30      	ldr	r3, [pc, #192]	; (8002bac <HAL_GPIO_Init+0x334>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	43db      	mvns	r3, r3
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4013      	ands	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b0c:	4a27      	ldr	r2, [pc, #156]	; (8002bac <HAL_GPIO_Init+0x334>)
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b12:	4b26      	ldr	r3, [pc, #152]	; (8002bac <HAL_GPIO_Init+0x334>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b36:	4a1d      	ldr	r2, [pc, #116]	; (8002bac <HAL_GPIO_Init+0x334>)
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b3c:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <HAL_GPIO_Init+0x334>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	43db      	mvns	r3, r3
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d003      	beq.n	8002b60 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b60:	4a12      	ldr	r2, [pc, #72]	; (8002bac <HAL_GPIO_Init+0x334>)
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	61fb      	str	r3, [r7, #28]
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	2b0f      	cmp	r3, #15
 8002b70:	f67f ae90 	bls.w	8002894 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b74:	bf00      	nop
 8002b76:	bf00      	nop
 8002b78:	3724      	adds	r7, #36	; 0x24
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	40023800 	.word	0x40023800
 8002b88:	40013800 	.word	0x40013800
 8002b8c:	40020000 	.word	0x40020000
 8002b90:	40020400 	.word	0x40020400
 8002b94:	40020800 	.word	0x40020800
 8002b98:	40020c00 	.word	0x40020c00
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	40021400 	.word	0x40021400
 8002ba4:	40021800 	.word	0x40021800
 8002ba8:	40021c00 	.word	0x40021c00
 8002bac:	40013c00 	.word	0x40013c00

08002bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	807b      	strh	r3, [r7, #2]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bc0:	787b      	ldrb	r3, [r7, #1]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bc6:	887a      	ldrh	r2, [r7, #2]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bcc:	e003      	b.n	8002bd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bce:	887b      	ldrh	r3, [r7, #2]
 8002bd0:	041a      	lsls	r2, r3, #16
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	619a      	str	r2, [r3, #24]
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
	...

08002be4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002bee:	4b08      	ldr	r3, [pc, #32]	; (8002c10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bf0:	695a      	ldr	r2, [r3, #20]
 8002bf2:	88fb      	ldrh	r3, [r7, #6]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d006      	beq.n	8002c08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bfa:	4a05      	ldr	r2, [pc, #20]	; (8002c10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bfc:	88fb      	ldrh	r3, [r7, #6]
 8002bfe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c00:	88fb      	ldrh	r3, [r7, #6]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f000 f806 	bl	8002c14 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c08:	bf00      	nop
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40013c00 	.word	0x40013c00

08002c14 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
	...

08002c2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e12b      	b.n	8002e96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d106      	bne.n	8002c58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7fe fdac 	bl	80017b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2224      	movs	r2, #36	; 0x24
 8002c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 0201 	bic.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c90:	f001 fffc 	bl	8004c8c <HAL_RCC_GetPCLK1Freq>
 8002c94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	4a81      	ldr	r2, [pc, #516]	; (8002ea0 <HAL_I2C_Init+0x274>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d807      	bhi.n	8002cb0 <HAL_I2C_Init+0x84>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	4a80      	ldr	r2, [pc, #512]	; (8002ea4 <HAL_I2C_Init+0x278>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	bf94      	ite	ls
 8002ca8:	2301      	movls	r3, #1
 8002caa:	2300      	movhi	r3, #0
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	e006      	b.n	8002cbe <HAL_I2C_Init+0x92>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4a7d      	ldr	r2, [pc, #500]	; (8002ea8 <HAL_I2C_Init+0x27c>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	bf94      	ite	ls
 8002cb8:	2301      	movls	r3, #1
 8002cba:	2300      	movhi	r3, #0
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e0e7      	b.n	8002e96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	4a78      	ldr	r2, [pc, #480]	; (8002eac <HAL_I2C_Init+0x280>)
 8002cca:	fba2 2303 	umull	r2, r3, r2, r3
 8002cce:	0c9b      	lsrs	r3, r3, #18
 8002cd0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68ba      	ldr	r2, [r7, #8]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	4a6a      	ldr	r2, [pc, #424]	; (8002ea0 <HAL_I2C_Init+0x274>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d802      	bhi.n	8002d00 <HAL_I2C_Init+0xd4>
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	e009      	b.n	8002d14 <HAL_I2C_Init+0xe8>
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d06:	fb02 f303 	mul.w	r3, r2, r3
 8002d0a:	4a69      	ldr	r2, [pc, #420]	; (8002eb0 <HAL_I2C_Init+0x284>)
 8002d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d10:	099b      	lsrs	r3, r3, #6
 8002d12:	3301      	adds	r3, #1
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6812      	ldr	r2, [r2, #0]
 8002d18:	430b      	orrs	r3, r1
 8002d1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	495c      	ldr	r1, [pc, #368]	; (8002ea0 <HAL_I2C_Init+0x274>)
 8002d30:	428b      	cmp	r3, r1
 8002d32:	d819      	bhi.n	8002d68 <HAL_I2C_Init+0x13c>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	1e59      	subs	r1, r3, #1
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d42:	1c59      	adds	r1, r3, #1
 8002d44:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d48:	400b      	ands	r3, r1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00a      	beq.n	8002d64 <HAL_I2C_Init+0x138>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	1e59      	subs	r1, r3, #1
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d62:	e051      	b.n	8002e08 <HAL_I2C_Init+0x1dc>
 8002d64:	2304      	movs	r3, #4
 8002d66:	e04f      	b.n	8002e08 <HAL_I2C_Init+0x1dc>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d111      	bne.n	8002d94 <HAL_I2C_Init+0x168>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	1e58      	subs	r0, r3, #1
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6859      	ldr	r1, [r3, #4]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	440b      	add	r3, r1
 8002d7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d82:	3301      	adds	r3, #1
 8002d84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	bf0c      	ite	eq
 8002d8c:	2301      	moveq	r3, #1
 8002d8e:	2300      	movne	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	e012      	b.n	8002dba <HAL_I2C_Init+0x18e>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	1e58      	subs	r0, r3, #1
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6859      	ldr	r1, [r3, #4]
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	0099      	lsls	r1, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002daa:	3301      	adds	r3, #1
 8002dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	bf0c      	ite	eq
 8002db4:	2301      	moveq	r3, #1
 8002db6:	2300      	movne	r3, #0
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <HAL_I2C_Init+0x196>
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e022      	b.n	8002e08 <HAL_I2C_Init+0x1dc>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10e      	bne.n	8002de8 <HAL_I2C_Init+0x1bc>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	1e58      	subs	r0, r3, #1
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6859      	ldr	r1, [r3, #4]
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	440b      	add	r3, r1
 8002dd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ddc:	3301      	adds	r3, #1
 8002dde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002de6:	e00f      	b.n	8002e08 <HAL_I2C_Init+0x1dc>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	1e58      	subs	r0, r3, #1
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6859      	ldr	r1, [r3, #4]
 8002df0:	460b      	mov	r3, r1
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	0099      	lsls	r1, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dfe:	3301      	adds	r3, #1
 8002e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	6809      	ldr	r1, [r1, #0]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69da      	ldr	r2, [r3, #28]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6911      	ldr	r1, [r2, #16]
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	68d2      	ldr	r2, [r2, #12]
 8002e42:	4311      	orrs	r1, r2
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6812      	ldr	r2, [r2, #0]
 8002e48:	430b      	orrs	r3, r1
 8002e4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	695a      	ldr	r2, [r3, #20]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0201 	orr.w	r2, r2, #1
 8002e76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2220      	movs	r2, #32
 8002e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	000186a0 	.word	0x000186a0
 8002ea4:	001e847f 	.word	0x001e847f
 8002ea8:	003d08ff 	.word	0x003d08ff
 8002eac:	431bde83 	.word	0x431bde83
 8002eb0:	10624dd3 	.word	0x10624dd3

08002eb4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eb6:	b08f      	sub	sp, #60	; 0x3c
 8002eb8:	af0a      	add	r7, sp, #40	; 0x28
 8002eba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e10f      	b.n	80030e6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d106      	bne.n	8002ee6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f006 ff9f 	bl	8009e24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2203      	movs	r2, #3
 8002eea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d102      	bne.n	8002f00 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f003 faf2 	bl	80064ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	603b      	str	r3, [r7, #0]
 8002f10:	687e      	ldr	r6, [r7, #4]
 8002f12:	466d      	mov	r5, sp
 8002f14:	f106 0410 	add.w	r4, r6, #16
 8002f18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f20:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f24:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f28:	1d33      	adds	r3, r6, #4
 8002f2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f2c:	6838      	ldr	r0, [r7, #0]
 8002f2e:	f003 f9c9 	bl	80062c4 <USB_CoreInit>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d005      	beq.n	8002f44 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e0d0      	b.n	80030e6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2100      	movs	r1, #0
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f003 fae0 	bl	8006510 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f50:	2300      	movs	r3, #0
 8002f52:	73fb      	strb	r3, [r7, #15]
 8002f54:	e04a      	b.n	8002fec <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f56:	7bfa      	ldrb	r2, [r7, #15]
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	4413      	add	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	333d      	adds	r3, #61	; 0x3d
 8002f66:	2201      	movs	r2, #1
 8002f68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f6a:	7bfa      	ldrb	r2, [r7, #15]
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	4413      	add	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	440b      	add	r3, r1
 8002f78:	333c      	adds	r3, #60	; 0x3c
 8002f7a:	7bfa      	ldrb	r2, [r7, #15]
 8002f7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f7e:	7bfa      	ldrb	r2, [r7, #15]
 8002f80:	7bfb      	ldrb	r3, [r7, #15]
 8002f82:	b298      	uxth	r0, r3
 8002f84:	6879      	ldr	r1, [r7, #4]
 8002f86:	4613      	mov	r3, r2
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	4413      	add	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	440b      	add	r3, r1
 8002f90:	3344      	adds	r3, #68	; 0x44
 8002f92:	4602      	mov	r2, r0
 8002f94:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f96:	7bfa      	ldrb	r2, [r7, #15]
 8002f98:	6879      	ldr	r1, [r7, #4]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	4413      	add	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	440b      	add	r3, r1
 8002fa4:	3340      	adds	r3, #64	; 0x40
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002faa:	7bfa      	ldrb	r2, [r7, #15]
 8002fac:	6879      	ldr	r1, [r7, #4]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	4413      	add	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	440b      	add	r3, r1
 8002fb8:	3348      	adds	r3, #72	; 0x48
 8002fba:	2200      	movs	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002fbe:	7bfa      	ldrb	r2, [r7, #15]
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	334c      	adds	r3, #76	; 0x4c
 8002fce:	2200      	movs	r2, #0
 8002fd0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002fd2:	7bfa      	ldrb	r2, [r7, #15]
 8002fd4:	6879      	ldr	r1, [r7, #4]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	4413      	add	r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	440b      	add	r3, r1
 8002fe0:	3354      	adds	r3, #84	; 0x54
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fe6:	7bfb      	ldrb	r3, [r7, #15]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	73fb      	strb	r3, [r7, #15]
 8002fec:	7bfa      	ldrb	r2, [r7, #15]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d3af      	bcc.n	8002f56 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	73fb      	strb	r3, [r7, #15]
 8002ffa:	e044      	b.n	8003086 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ffc:	7bfa      	ldrb	r2, [r7, #15]
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	4613      	mov	r3, r2
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	4413      	add	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800300e:	2200      	movs	r2, #0
 8003010:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003012:	7bfa      	ldrb	r2, [r7, #15]
 8003014:	6879      	ldr	r1, [r7, #4]
 8003016:	4613      	mov	r3, r2
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	4413      	add	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	440b      	add	r3, r1
 8003020:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003024:	7bfa      	ldrb	r2, [r7, #15]
 8003026:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003028:	7bfa      	ldrb	r2, [r7, #15]
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	4613      	mov	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	4413      	add	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800303a:	2200      	movs	r2, #0
 800303c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800303e:	7bfa      	ldrb	r2, [r7, #15]
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	4613      	mov	r3, r2
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	4413      	add	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	440b      	add	r3, r1
 800304c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003054:	7bfa      	ldrb	r2, [r7, #15]
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	4613      	mov	r3, r2
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	4413      	add	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	440b      	add	r3, r1
 8003062:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003066:	2200      	movs	r2, #0
 8003068:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800306a:	7bfa      	ldrb	r2, [r7, #15]
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	4413      	add	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	440b      	add	r3, r1
 8003078:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003080:	7bfb      	ldrb	r3, [r7, #15]
 8003082:	3301      	adds	r3, #1
 8003084:	73fb      	strb	r3, [r7, #15]
 8003086:	7bfa      	ldrb	r2, [r7, #15]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	429a      	cmp	r2, r3
 800308e:	d3b5      	bcc.n	8002ffc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	603b      	str	r3, [r7, #0]
 8003096:	687e      	ldr	r6, [r7, #4]
 8003098:	466d      	mov	r5, sp
 800309a:	f106 0410 	add.w	r4, r6, #16
 800309e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80030ae:	1d33      	adds	r3, r6, #4
 80030b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030b2:	6838      	ldr	r0, [r7, #0]
 80030b4:	f003 fa78 	bl	80065a8 <USB_DevInit>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d005      	beq.n	80030ca <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2202      	movs	r2, #2
 80030c2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e00d      	b.n	80030e6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f004 fbc7 	bl	8007872 <USB_DevDisconnect>

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3714      	adds	r7, #20
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030ee <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b084      	sub	sp, #16
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003102:	2b01      	cmp	r3, #1
 8003104:	d101      	bne.n	800310a <HAL_PCD_Start+0x1c>
 8003106:	2302      	movs	r3, #2
 8003108:	e020      	b.n	800314c <HAL_PCD_Start+0x5e>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003116:	2b01      	cmp	r3, #1
 8003118:	d109      	bne.n	800312e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800311e:	2b01      	cmp	r3, #1
 8003120:	d005      	beq.n	800312e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003126:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f003 f9ca 	bl	80064cc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4618      	mov	r0, r3
 800313e:	f004 fb77 	bl	8007830 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003154:	b590      	push	{r4, r7, lr}
 8003156:	b08d      	sub	sp, #52	; 0x34
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	f004 fc35 	bl	80079da <USB_GetMode>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	f040 848a 	bne.w	8003a8c <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f004 fb99 	bl	80078b4 <USB_ReadInterrupts>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 8480 	beq.w	8003a8a <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	0a1b      	lsrs	r3, r3, #8
 8003194:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f004 fb86 	bl	80078b4 <USB_ReadInterrupts>
 80031a8:	4603      	mov	r3, r0
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d107      	bne.n	80031c2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	695a      	ldr	r2, [r3, #20]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f002 0202 	and.w	r2, r2, #2
 80031c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f004 fb74 	bl	80078b4 <USB_ReadInterrupts>
 80031cc:	4603      	mov	r3, r0
 80031ce:	f003 0310 	and.w	r3, r3, #16
 80031d2:	2b10      	cmp	r3, #16
 80031d4:	d161      	bne.n	800329a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	699a      	ldr	r2, [r3, #24]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 0210 	bic.w	r2, r2, #16
 80031e4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80031e6:	6a3b      	ldr	r3, [r7, #32]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	f003 020f 	and.w	r2, r3, #15
 80031f2:	4613      	mov	r3, r2
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	4413      	add	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	4413      	add	r3, r2
 8003202:	3304      	adds	r3, #4
 8003204:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	0c5b      	lsrs	r3, r3, #17
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	2b02      	cmp	r3, #2
 8003210:	d124      	bne.n	800325c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003218:	4013      	ands	r3, r2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d035      	beq.n	800328a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	091b      	lsrs	r3, r3, #4
 8003226:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003228:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800322c:	b29b      	uxth	r3, r3
 800322e:	461a      	mov	r2, r3
 8003230:	6a38      	ldr	r0, [r7, #32]
 8003232:	f004 f9ab 	bl	800758c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	691a      	ldr	r2, [r3, #16]
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	091b      	lsrs	r3, r3, #4
 800323e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003242:	441a      	add	r2, r3
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	6a1a      	ldr	r2, [r3, #32]
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	091b      	lsrs	r3, r3, #4
 8003250:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003254:	441a      	add	r2, r3
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	621a      	str	r2, [r3, #32]
 800325a:	e016      	b.n	800328a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	0c5b      	lsrs	r3, r3, #17
 8003260:	f003 030f 	and.w	r3, r3, #15
 8003264:	2b06      	cmp	r3, #6
 8003266:	d110      	bne.n	800328a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800326e:	2208      	movs	r2, #8
 8003270:	4619      	mov	r1, r3
 8003272:	6a38      	ldr	r0, [r7, #32]
 8003274:	f004 f98a 	bl	800758c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	6a1a      	ldr	r2, [r3, #32]
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	091b      	lsrs	r3, r3, #4
 8003280:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003284:	441a      	add	r2, r3
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	699a      	ldr	r2, [r3, #24]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f042 0210 	orr.w	r2, r2, #16
 8003298:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f004 fb08 	bl	80078b4 <USB_ReadInterrupts>
 80032a4:	4603      	mov	r3, r0
 80032a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032aa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80032ae:	f040 80a7 	bne.w	8003400 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80032b2:	2300      	movs	r3, #0
 80032b4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f004 fb0d 	bl	80078da <USB_ReadDevAllOutEpInterrupt>
 80032c0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80032c2:	e099      	b.n	80033f8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80032c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f000 808e 	beq.w	80033ec <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d6:	b2d2      	uxtb	r2, r2
 80032d8:	4611      	mov	r1, r2
 80032da:	4618      	mov	r0, r3
 80032dc:	f004 fb31 	bl	8007942 <USB_ReadDevOutEPInterrupt>
 80032e0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00c      	beq.n	8003306 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80032ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ee:	015a      	lsls	r2, r3, #5
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	4413      	add	r3, r2
 80032f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032f8:	461a      	mov	r2, r3
 80032fa:	2301      	movs	r3, #1
 80032fc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80032fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 fec3 	bl	800408c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	f003 0308 	and.w	r3, r3, #8
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00c      	beq.n	800332a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	015a      	lsls	r2, r3, #5
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	4413      	add	r3, r2
 8003318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800331c:	461a      	mov	r2, r3
 800331e:	2308      	movs	r3, #8
 8003320:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003322:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 ff99 	bl	800425c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	f003 0310 	and.w	r3, r3, #16
 8003330:	2b00      	cmp	r3, #0
 8003332:	d008      	beq.n	8003346 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003336:	015a      	lsls	r2, r3, #5
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	4413      	add	r3, r2
 800333c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003340:	461a      	mov	r2, r3
 8003342:	2310      	movs	r3, #16
 8003344:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d030      	beq.n	80033b2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003350:	6a3b      	ldr	r3, [r7, #32]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003358:	2b80      	cmp	r3, #128	; 0x80
 800335a:	d109      	bne.n	8003370 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	69fa      	ldr	r2, [r7, #28]
 8003366:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800336a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800336e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003372:	4613      	mov	r3, r2
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	4413      	add	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	4413      	add	r3, r2
 8003382:	3304      	adds	r3, #4
 8003384:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	78db      	ldrb	r3, [r3, #3]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d108      	bne.n	80033a0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	2200      	movs	r2, #0
 8003392:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003396:	b2db      	uxtb	r3, r3
 8003398:	4619      	mov	r1, r3
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f006 fe56 	bl	800a04c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80033a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a2:	015a      	lsls	r2, r3, #5
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	4413      	add	r3, r2
 80033a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ac:	461a      	mov	r2, r3
 80033ae:	2302      	movs	r3, #2
 80033b0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	f003 0320 	and.w	r3, r3, #32
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d008      	beq.n	80033ce <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033be:	015a      	lsls	r2, r3, #5
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	4413      	add	r3, r2
 80033c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033c8:	461a      	mov	r2, r3
 80033ca:	2320      	movs	r3, #32
 80033cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d009      	beq.n	80033ec <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033da:	015a      	lsls	r2, r3, #5
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	4413      	add	r3, r2
 80033e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e4:	461a      	mov	r2, r3
 80033e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033ea:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80033ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ee:	3301      	adds	r3, #1
 80033f0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80033f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f4:	085b      	lsrs	r3, r3, #1
 80033f6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80033f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f47f af62 	bne.w	80032c4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f004 fa55 	bl	80078b4 <USB_ReadInterrupts>
 800340a:	4603      	mov	r3, r0
 800340c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003410:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003414:	f040 80db 	bne.w	80035ce <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f004 fa76 	bl	800790e <USB_ReadDevAllInEpInterrupt>
 8003422:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003424:	2300      	movs	r3, #0
 8003426:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003428:	e0cd      	b.n	80035c6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800342a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 80c2 	beq.w	80035ba <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800343c:	b2d2      	uxtb	r2, r2
 800343e:	4611      	mov	r1, r2
 8003440:	4618      	mov	r0, r3
 8003442:	f004 fa9c 	bl	800797e <USB_ReadDevInEPInterrupt>
 8003446:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d057      	beq.n	8003502 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	f003 030f 	and.w	r3, r3, #15
 8003458:	2201      	movs	r2, #1
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003466:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	43db      	mvns	r3, r3
 800346c:	69f9      	ldr	r1, [r7, #28]
 800346e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003472:	4013      	ands	r3, r2
 8003474:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	015a      	lsls	r2, r3, #5
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	4413      	add	r3, r2
 800347e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003482:	461a      	mov	r2, r3
 8003484:	2301      	movs	r3, #1
 8003486:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d132      	bne.n	80034f6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003494:	4613      	mov	r3, r2
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	4413      	add	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	334c      	adds	r3, #76	; 0x4c
 80034a0:	6819      	ldr	r1, [r3, #0]
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a6:	4613      	mov	r3, r2
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	4413      	add	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4403      	add	r3, r0
 80034b0:	3348      	adds	r3, #72	; 0x48
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4419      	add	r1, r3
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ba:	4613      	mov	r3, r2
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	4413      	add	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4403      	add	r3, r0
 80034c4:	334c      	adds	r3, #76	; 0x4c
 80034c6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d113      	bne.n	80034f6 <HAL_PCD_IRQHandler+0x3a2>
 80034ce:	6879      	ldr	r1, [r7, #4]
 80034d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d2:	4613      	mov	r3, r2
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	4413      	add	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	440b      	add	r3, r1
 80034dc:	3354      	adds	r3, #84	; 0x54
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d108      	bne.n	80034f6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6818      	ldr	r0, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80034ee:	461a      	mov	r2, r3
 80034f0:	2101      	movs	r1, #1
 80034f2:	f004 faa3 	bl	8007a3c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	4619      	mov	r1, r3
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f006 fd20 	bl	8009f42 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	f003 0308 	and.w	r3, r3, #8
 8003508:	2b00      	cmp	r3, #0
 800350a:	d008      	beq.n	800351e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	015a      	lsls	r2, r3, #5
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	4413      	add	r3, r2
 8003514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003518:	461a      	mov	r2, r3
 800351a:	2308      	movs	r3, #8
 800351c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	f003 0310 	and.w	r3, r3, #16
 8003524:	2b00      	cmp	r3, #0
 8003526:	d008      	beq.n	800353a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	015a      	lsls	r2, r3, #5
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	4413      	add	r3, r2
 8003530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003534:	461a      	mov	r2, r3
 8003536:	2310      	movs	r3, #16
 8003538:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003540:	2b00      	cmp	r3, #0
 8003542:	d008      	beq.n	8003556 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003546:	015a      	lsls	r2, r3, #5
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	4413      	add	r3, r2
 800354c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003550:	461a      	mov	r2, r3
 8003552:	2340      	movs	r3, #64	; 0x40
 8003554:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d023      	beq.n	80035a8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003560:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003562:	6a38      	ldr	r0, [r7, #32]
 8003564:	f003 f984 	bl	8006870 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800356a:	4613      	mov	r3, r2
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	4413      	add	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	3338      	adds	r3, #56	; 0x38
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	4413      	add	r3, r2
 8003578:	3304      	adds	r3, #4
 800357a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	78db      	ldrb	r3, [r3, #3]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d108      	bne.n	8003596 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	2200      	movs	r2, #0
 8003588:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	b2db      	uxtb	r3, r3
 800358e:	4619      	mov	r1, r3
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f006 fd6d 	bl	800a070 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	015a      	lsls	r2, r3, #5
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	4413      	add	r3, r2
 800359e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035a2:	461a      	mov	r2, r3
 80035a4:	2302      	movs	r3, #2
 80035a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80035b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 fcdb 	bl	8003f70 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	3301      	adds	r3, #1
 80035be:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80035c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c2:	085b      	lsrs	r3, r3, #1
 80035c4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80035c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f47f af2e 	bne.w	800342a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f004 f96e 	bl	80078b4 <USB_ReadInterrupts>
 80035d8:	4603      	mov	r3, r0
 80035da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035e2:	d122      	bne.n	800362a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	69fa      	ldr	r2, [r7, #28]
 80035ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035f2:	f023 0301 	bic.w	r3, r3, #1
 80035f6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d108      	bne.n	8003614 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800360a:	2100      	movs	r1, #0
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 fec3 	bl	8004398 <HAL_PCDEx_LPM_Callback>
 8003612:	e002      	b.n	800361a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f006 fd0b 	bl	800a030 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	695a      	ldr	r2, [r3, #20]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003628:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f004 f940 	bl	80078b4 <USB_ReadInterrupts>
 8003634:	4603      	mov	r3, r0
 8003636:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800363a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800363e:	d112      	bne.n	8003666 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b01      	cmp	r3, #1
 800364e:	d102      	bne.n	8003656 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f006 fcc7 	bl	8009fe4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	695a      	ldr	r2, [r3, #20]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003664:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f004 f922 	bl	80078b4 <USB_ReadInterrupts>
 8003670:	4603      	mov	r3, r0
 8003672:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800367a:	f040 80b7 	bne.w	80037ec <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	69fa      	ldr	r2, [r7, #28]
 8003688:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800368c:	f023 0301 	bic.w	r3, r3, #1
 8003690:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2110      	movs	r1, #16
 8003698:	4618      	mov	r0, r3
 800369a:	f003 f8e9 	bl	8006870 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800369e:	2300      	movs	r3, #0
 80036a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036a2:	e046      	b.n	8003732 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80036a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a6:	015a      	lsls	r2, r3, #5
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	4413      	add	r3, r2
 80036ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036b0:	461a      	mov	r2, r3
 80036b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036b6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80036b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ba:	015a      	lsls	r2, r3, #5
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	4413      	add	r3, r2
 80036c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036c8:	0151      	lsls	r1, r2, #5
 80036ca:	69fa      	ldr	r2, [r7, #28]
 80036cc:	440a      	add	r2, r1
 80036ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80036d6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80036d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036da:	015a      	lsls	r2, r3, #5
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	4413      	add	r3, r2
 80036e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036e4:	461a      	mov	r2, r3
 80036e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036ea:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80036ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ee:	015a      	lsls	r2, r3, #5
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	4413      	add	r3, r2
 80036f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036fc:	0151      	lsls	r1, r2, #5
 80036fe:	69fa      	ldr	r2, [r7, #28]
 8003700:	440a      	add	r2, r1
 8003702:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003706:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800370a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800370c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800370e:	015a      	lsls	r2, r3, #5
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	4413      	add	r3, r2
 8003714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800371c:	0151      	lsls	r1, r2, #5
 800371e:	69fa      	ldr	r2, [r7, #28]
 8003720:	440a      	add	r2, r1
 8003722:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003726:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800372a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800372c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800372e:	3301      	adds	r3, #1
 8003730:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003738:	429a      	cmp	r2, r3
 800373a:	d3b3      	bcc.n	80036a4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003742:	69db      	ldr	r3, [r3, #28]
 8003744:	69fa      	ldr	r2, [r7, #28]
 8003746:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800374a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800374e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003754:	2b00      	cmp	r3, #0
 8003756:	d016      	beq.n	8003786 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800375e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003762:	69fa      	ldr	r2, [r7, #28]
 8003764:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003768:	f043 030b 	orr.w	r3, r3, #11
 800376c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003778:	69fa      	ldr	r2, [r7, #28]
 800377a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800377e:	f043 030b 	orr.w	r3, r3, #11
 8003782:	6453      	str	r3, [r2, #68]	; 0x44
 8003784:	e015      	b.n	80037b2 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	69fa      	ldr	r2, [r7, #28]
 8003790:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003794:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003798:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800379c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	69fa      	ldr	r2, [r7, #28]
 80037a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037ac:	f043 030b 	orr.w	r3, r3, #11
 80037b0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	69fa      	ldr	r2, [r7, #28]
 80037bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037c0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80037c4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6818      	ldr	r0, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80037d6:	461a      	mov	r2, r3
 80037d8:	f004 f930 	bl	8007a3c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	695a      	ldr	r2, [r3, #20]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80037ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f004 f85f 	bl	80078b4 <USB_ReadInterrupts>
 80037f6:	4603      	mov	r3, r0
 80037f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003800:	d124      	bne.n	800384c <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f004 f8f5 	bl	80079f6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4618      	mov	r0, r3
 8003812:	f003 f8aa 	bl	800696a <USB_GetDevSpeed>
 8003816:	4603      	mov	r3, r0
 8003818:	461a      	mov	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681c      	ldr	r4, [r3, #0]
 8003822:	f001 fa27 	bl	8004c74 <HAL_RCC_GetHCLKFreq>
 8003826:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800382c:	b2db      	uxtb	r3, r3
 800382e:	461a      	mov	r2, r3
 8003830:	4620      	mov	r0, r4
 8003832:	f002 fda9 	bl	8006388 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f006 fbab 	bl	8009f92 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695a      	ldr	r2, [r3, #20]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800384a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4618      	mov	r0, r3
 8003852:	f004 f82f 	bl	80078b4 <USB_ReadInterrupts>
 8003856:	4603      	mov	r3, r0
 8003858:	f003 0308 	and.w	r3, r3, #8
 800385c:	2b08      	cmp	r3, #8
 800385e:	d10a      	bne.n	8003876 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f006 fb88 	bl	8009f76 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	695a      	ldr	r2, [r3, #20]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f002 0208 	and.w	r2, r2, #8
 8003874:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4618      	mov	r0, r3
 800387c:	f004 f81a 	bl	80078b4 <USB_ReadInterrupts>
 8003880:	4603      	mov	r3, r0
 8003882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003886:	2b80      	cmp	r3, #128	; 0x80
 8003888:	d122      	bne.n	80038d0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800388a:	6a3b      	ldr	r3, [r7, #32]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003892:	6a3b      	ldr	r3, [r7, #32]
 8003894:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003896:	2301      	movs	r3, #1
 8003898:	627b      	str	r3, [r7, #36]	; 0x24
 800389a:	e014      	b.n	80038c6 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a0:	4613      	mov	r3, r2
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	4413      	add	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d105      	bne.n	80038c0 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	4619      	mov	r1, r3
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 fb27 	bl	8003f0e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	3301      	adds	r3, #1
 80038c4:	627b      	str	r3, [r7, #36]	; 0x24
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d3e5      	bcc.n	800389c <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f003 ffed 	bl	80078b4 <USB_ReadInterrupts>
 80038da:	4603      	mov	r3, r0
 80038dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038e4:	d13b      	bne.n	800395e <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038e6:	2301      	movs	r3, #1
 80038e8:	627b      	str	r3, [r7, #36]	; 0x24
 80038ea:	e02b      	b.n	8003944 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80038ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ee:	015a      	lsls	r2, r3, #5
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	4413      	add	r3, r2
 80038f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80038fc:	6879      	ldr	r1, [r7, #4]
 80038fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003900:	4613      	mov	r3, r2
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	4413      	add	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	3340      	adds	r3, #64	; 0x40
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d115      	bne.n	800393e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003912:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003914:	2b00      	cmp	r3, #0
 8003916:	da12      	bge.n	800393e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003918:	6879      	ldr	r1, [r7, #4]
 800391a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800391c:	4613      	mov	r3, r2
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	4413      	add	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	440b      	add	r3, r1
 8003926:	333f      	adds	r3, #63	; 0x3f
 8003928:	2201      	movs	r2, #1
 800392a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800392c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392e:	b2db      	uxtb	r3, r3
 8003930:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003934:	b2db      	uxtb	r3, r3
 8003936:	4619      	mov	r1, r3
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 fae8 	bl	8003f0e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003940:	3301      	adds	r3, #1
 8003942:	627b      	str	r3, [r7, #36]	; 0x24
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800394a:	429a      	cmp	r2, r3
 800394c:	d3ce      	bcc.n	80038ec <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	695a      	ldr	r2, [r3, #20]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800395c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f003 ffa6 	bl	80078b4 <USB_ReadInterrupts>
 8003968:	4603      	mov	r3, r0
 800396a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800396e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003972:	d155      	bne.n	8003a20 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003974:	2301      	movs	r3, #1
 8003976:	627b      	str	r3, [r7, #36]	; 0x24
 8003978:	e045      	b.n	8003a06 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	015a      	lsls	r2, r3, #5
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	4413      	add	r3, r2
 8003982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800398a:	6879      	ldr	r1, [r7, #4]
 800398c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800398e:	4613      	mov	r3, r2
 8003990:	00db      	lsls	r3, r3, #3
 8003992:	4413      	add	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	440b      	add	r3, r1
 8003998:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d12e      	bne.n	8003a00 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80039a2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	da2b      	bge.n	8003a00 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80039b4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d121      	bne.n	8003a00 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c0:	4613      	mov	r3, r2
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	4413      	add	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80039ce:	2201      	movs	r2, #1
 80039d0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80039d2:	6a3b      	ldr	r3, [r7, #32]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10a      	bne.n	8003a00 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	69fa      	ldr	r2, [r7, #28]
 80039f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039fc:	6053      	str	r3, [r2, #4]
            break;
 80039fe:	e007      	b.n	8003a10 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a02:	3301      	adds	r3, #1
 8003a04:	627b      	str	r3, [r7, #36]	; 0x24
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d3b4      	bcc.n	800397a <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	695a      	ldr	r2, [r3, #20]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003a1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f003 ff45 	bl	80078b4 <USB_ReadInterrupts>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a34:	d10a      	bne.n	8003a4c <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f006 fb2c 	bl	800a094 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695a      	ldr	r2, [r3, #20]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003a4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f003 ff2f 	bl	80078b4 <USB_ReadInterrupts>
 8003a56:	4603      	mov	r3, r0
 8003a58:	f003 0304 	and.w	r3, r3, #4
 8003a5c:	2b04      	cmp	r3, #4
 8003a5e:	d115      	bne.n	8003a8c <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	f003 0304 	and.w	r3, r3, #4
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d002      	beq.n	8003a78 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f006 fb1c 	bl	800a0b0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6859      	ldr	r1, [r3, #4]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	430a      	orrs	r2, r1
 8003a86:	605a      	str	r2, [r3, #4]
 8003a88:	e000      	b.n	8003a8c <HAL_PCD_IRQHandler+0x938>
      return;
 8003a8a:	bf00      	nop
    }
  }
}
 8003a8c:	3734      	adds	r7, #52	; 0x34
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd90      	pop	{r4, r7, pc}

08003a92 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b082      	sub	sp, #8
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d101      	bne.n	8003aac <HAL_PCD_SetAddress+0x1a>
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	e013      	b.n	8003ad4 <HAL_PCD_SetAddress+0x42>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	78fa      	ldrb	r2, [r7, #3]
 8003ab8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	78fa      	ldrb	r2, [r7, #3]
 8003ac2:	4611      	mov	r1, r2
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f003 fe8d 	bl	80077e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	4608      	mov	r0, r1
 8003ae6:	4611      	mov	r1, r2
 8003ae8:	461a      	mov	r2, r3
 8003aea:	4603      	mov	r3, r0
 8003aec:	70fb      	strb	r3, [r7, #3]
 8003aee:	460b      	mov	r3, r1
 8003af0:	803b      	strh	r3, [r7, #0]
 8003af2:	4613      	mov	r3, r2
 8003af4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003afa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	da0f      	bge.n	8003b22 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b02:	78fb      	ldrb	r3, [r7, #3]
 8003b04:	f003 020f 	and.w	r2, r3, #15
 8003b08:	4613      	mov	r3, r2
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	4413      	add	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	3338      	adds	r3, #56	; 0x38
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	4413      	add	r3, r2
 8003b16:	3304      	adds	r3, #4
 8003b18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	705a      	strb	r2, [r3, #1]
 8003b20:	e00f      	b.n	8003b42 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b22:	78fb      	ldrb	r3, [r7, #3]
 8003b24:	f003 020f 	and.w	r2, r3, #15
 8003b28:	4613      	mov	r3, r2
 8003b2a:	00db      	lsls	r3, r3, #3
 8003b2c:	4413      	add	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	4413      	add	r3, r2
 8003b38:	3304      	adds	r3, #4
 8003b3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b42:	78fb      	ldrb	r3, [r7, #3]
 8003b44:	f003 030f 	and.w	r3, r3, #15
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003b4e:	883a      	ldrh	r2, [r7, #0]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	78ba      	ldrb	r2, [r7, #2]
 8003b58:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	785b      	ldrb	r3, [r3, #1]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d004      	beq.n	8003b6c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003b6c:	78bb      	ldrb	r3, [r7, #2]
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d102      	bne.n	8003b78 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d101      	bne.n	8003b86 <HAL_PCD_EP_Open+0xaa>
 8003b82:	2302      	movs	r3, #2
 8003b84:	e00e      	b.n	8003ba4 <HAL_PCD_EP_Open+0xc8>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68f9      	ldr	r1, [r7, #12]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f002 ff0d 	bl	80069b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003ba2:	7afb      	ldrb	r3, [r7, #11]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	da0f      	bge.n	8003be0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bc0:	78fb      	ldrb	r3, [r7, #3]
 8003bc2:	f003 020f 	and.w	r2, r3, #15
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	4413      	add	r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	3338      	adds	r3, #56	; 0x38
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	3304      	adds	r3, #4
 8003bd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	705a      	strb	r2, [r3, #1]
 8003bde:	e00f      	b.n	8003c00 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003be0:	78fb      	ldrb	r3, [r7, #3]
 8003be2:	f003 020f 	and.w	r2, r3, #15
 8003be6:	4613      	mov	r3, r2
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	4413      	add	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	3304      	adds	r3, #4
 8003bf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003c00:	78fb      	ldrb	r3, [r7, #3]
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d101      	bne.n	8003c1a <HAL_PCD_EP_Close+0x6e>
 8003c16:	2302      	movs	r3, #2
 8003c18:	e00e      	b.n	8003c38 <HAL_PCD_EP_Close+0x8c>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68f9      	ldr	r1, [r7, #12]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f002 ff4b 	bl	8006ac4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	607a      	str	r2, [r7, #4]
 8003c4a:	603b      	str	r3, [r7, #0]
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c50:	7afb      	ldrb	r3, [r7, #11]
 8003c52:	f003 020f 	and.w	r2, r3, #15
 8003c56:	4613      	mov	r3, r2
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	4413      	add	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	4413      	add	r3, r2
 8003c66:	3304      	adds	r3, #4
 8003c68:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c82:	7afb      	ldrb	r3, [r7, #11]
 8003c84:	f003 030f 	and.w	r3, r3, #15
 8003c88:	b2da      	uxtb	r2, r3
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d102      	bne.n	8003c9c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c9c:	7afb      	ldrb	r3, [r7, #11]
 8003c9e:	f003 030f 	and.w	r3, r3, #15
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d109      	bne.n	8003cba <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6818      	ldr	r0, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	6979      	ldr	r1, [r7, #20]
 8003cb4:	f003 fa2a 	bl	800710c <USB_EP0StartXfer>
 8003cb8:	e008      	b.n	8003ccc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6818      	ldr	r0, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	6979      	ldr	r1, [r7, #20]
 8003cc8:	f002 ffd8 	bl	8006c7c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3718      	adds	r7, #24
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
 8003cde:	460b      	mov	r3, r1
 8003ce0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003ce2:	78fb      	ldrb	r3, [r7, #3]
 8003ce4:	f003 020f 	and.w	r2, r3, #15
 8003ce8:	6879      	ldr	r1, [r7, #4]
 8003cea:	4613      	mov	r3, r2
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	4413      	add	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	440b      	add	r3, r1
 8003cf4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003cf8:	681b      	ldr	r3, [r3, #0]
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b086      	sub	sp, #24
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	60f8      	str	r0, [r7, #12]
 8003d0e:	607a      	str	r2, [r7, #4]
 8003d10:	603b      	str	r3, [r7, #0]
 8003d12:	460b      	mov	r3, r1
 8003d14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d16:	7afb      	ldrb	r3, [r7, #11]
 8003d18:	f003 020f 	and.w	r2, r3, #15
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	4413      	add	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	3338      	adds	r3, #56	; 0x38
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	4413      	add	r3, r2
 8003d2a:	3304      	adds	r3, #4
 8003d2c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	2201      	movs	r2, #1
 8003d44:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d46:	7afb      	ldrb	r3, [r7, #11]
 8003d48:	f003 030f 	and.w	r3, r3, #15
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d102      	bne.n	8003d60 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d60:	7afb      	ldrb	r3, [r7, #11]
 8003d62:	f003 030f 	and.w	r3, r3, #15
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d109      	bne.n	8003d7e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6818      	ldr	r0, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	461a      	mov	r2, r3
 8003d76:	6979      	ldr	r1, [r7, #20]
 8003d78:	f003 f9c8 	bl	800710c <USB_EP0StartXfer>
 8003d7c:	e008      	b.n	8003d90 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6818      	ldr	r0, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	461a      	mov	r2, r3
 8003d8a:	6979      	ldr	r1, [r7, #20]
 8003d8c:	f002 ff76 	bl	8006c7c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3718      	adds	r7, #24
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b084      	sub	sp, #16
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
 8003da2:	460b      	mov	r3, r1
 8003da4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003da6:	78fb      	ldrb	r3, [r7, #3]
 8003da8:	f003 020f 	and.w	r2, r3, #15
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d901      	bls.n	8003db8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e050      	b.n	8003e5a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003db8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	da0f      	bge.n	8003de0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dc0:	78fb      	ldrb	r3, [r7, #3]
 8003dc2:	f003 020f 	and.w	r2, r3, #15
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	00db      	lsls	r3, r3, #3
 8003dca:	4413      	add	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	3338      	adds	r3, #56	; 0x38
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	705a      	strb	r2, [r3, #1]
 8003dde:	e00d      	b.n	8003dfc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003de0:	78fa      	ldrb	r2, [r7, #3]
 8003de2:	4613      	mov	r3, r2
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	4413      	add	r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	4413      	add	r3, r2
 8003df2:	3304      	adds	r3, #4
 8003df4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e02:	78fb      	ldrb	r3, [r7, #3]
 8003e04:	f003 030f 	and.w	r3, r3, #15
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d101      	bne.n	8003e1c <HAL_PCD_EP_SetStall+0x82>
 8003e18:	2302      	movs	r3, #2
 8003e1a:	e01e      	b.n	8003e5a <HAL_PCD_EP_SetStall+0xc0>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68f9      	ldr	r1, [r7, #12]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f003 fc06 	bl	800763c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e30:	78fb      	ldrb	r3, [r7, #3]
 8003e32:	f003 030f 	and.w	r3, r3, #15
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10a      	bne.n	8003e50 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6818      	ldr	r0, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	b2d9      	uxtb	r1, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	f003 fdf6 	bl	8007a3c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b084      	sub	sp, #16
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e6e:	78fb      	ldrb	r3, [r7, #3]
 8003e70:	f003 020f 	and.w	r2, r3, #15
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d901      	bls.n	8003e80 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e042      	b.n	8003f06 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	da0f      	bge.n	8003ea8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e88:	78fb      	ldrb	r3, [r7, #3]
 8003e8a:	f003 020f 	and.w	r2, r3, #15
 8003e8e:	4613      	mov	r3, r2
 8003e90:	00db      	lsls	r3, r3, #3
 8003e92:	4413      	add	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	3338      	adds	r3, #56	; 0x38
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	705a      	strb	r2, [r3, #1]
 8003ea6:	e00f      	b.n	8003ec8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ea8:	78fb      	ldrb	r3, [r7, #3]
 8003eaa:	f003 020f 	and.w	r2, r3, #15
 8003eae:	4613      	mov	r3, r2
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	4413      	add	r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ece:	78fb      	ldrb	r3, [r7, #3]
 8003ed0:	f003 030f 	and.w	r3, r3, #15
 8003ed4:	b2da      	uxtb	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d101      	bne.n	8003ee8 <HAL_PCD_EP_ClrStall+0x86>
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	e00e      	b.n	8003f06 <HAL_PCD_EP_ClrStall+0xa4>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68f9      	ldr	r1, [r7, #12]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f003 fc0e 	bl	8007718 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b084      	sub	sp, #16
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
 8003f16:	460b      	mov	r3, r1
 8003f18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003f1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	da0c      	bge.n	8003f3c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f22:	78fb      	ldrb	r3, [r7, #3]
 8003f24:	f003 020f 	and.w	r2, r3, #15
 8003f28:	4613      	mov	r3, r2
 8003f2a:	00db      	lsls	r3, r3, #3
 8003f2c:	4413      	add	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	3338      	adds	r3, #56	; 0x38
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	4413      	add	r3, r2
 8003f36:	3304      	adds	r3, #4
 8003f38:	60fb      	str	r3, [r7, #12]
 8003f3a:	e00c      	b.n	8003f56 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f3c:	78fb      	ldrb	r3, [r7, #3]
 8003f3e:	f003 020f 	and.w	r2, r3, #15
 8003f42:	4613      	mov	r3, r2
 8003f44:	00db      	lsls	r3, r3, #3
 8003f46:	4413      	add	r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	4413      	add	r3, r2
 8003f52:	3304      	adds	r3, #4
 8003f54:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68f9      	ldr	r1, [r7, #12]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f003 fa2d 	bl	80073bc <USB_EPStopXfer>
 8003f62:	4603      	mov	r3, r0
 8003f64:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003f66:	7afb      	ldrb	r3, [r7, #11]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b08a      	sub	sp, #40	; 0x28
 8003f74:	af02      	add	r7, sp, #8
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	4613      	mov	r3, r2
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	4413      	add	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	3338      	adds	r3, #56	; 0x38
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	4413      	add	r3, r2
 8003f94:	3304      	adds	r3, #4
 8003f96:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6a1a      	ldr	r2, [r3, #32]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d901      	bls.n	8003fa8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e06c      	b.n	8004082 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	699a      	ldr	r2, [r3, #24]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a1b      	ldr	r3, [r3, #32]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	69fa      	ldr	r2, [r7, #28]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d902      	bls.n	8003fc4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	3303      	adds	r3, #3
 8003fc8:	089b      	lsrs	r3, r3, #2
 8003fca:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fcc:	e02b      	b.n	8004026 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	699a      	ldr	r2, [r3, #24]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	69fa      	ldr	r2, [r7, #28]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d902      	bls.n	8003fea <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	3303      	adds	r3, #3
 8003fee:	089b      	lsrs	r3, r3, #2
 8003ff0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6919      	ldr	r1, [r3, #16]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	b2da      	uxtb	r2, r3
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004002:	b2db      	uxtb	r3, r3
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	4603      	mov	r3, r0
 8004008:	6978      	ldr	r0, [r7, #20]
 800400a:	f003 fa81 	bl	8007510 <USB_WritePacket>

    ep->xfer_buff  += len;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	691a      	ldr	r2, [r3, #16]
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	441a      	add	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6a1a      	ldr	r2, [r3, #32]
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	441a      	add	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	015a      	lsls	r2, r3, #5
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	4413      	add	r3, r2
 800402e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	b29b      	uxth	r3, r3
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	429a      	cmp	r2, r3
 800403a:	d809      	bhi.n	8004050 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6a1a      	ldr	r2, [r3, #32]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004044:	429a      	cmp	r2, r3
 8004046:	d203      	bcs.n	8004050 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1be      	bne.n	8003fce <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	699a      	ldr	r2, [r3, #24]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	429a      	cmp	r2, r3
 800405a:	d811      	bhi.n	8004080 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	f003 030f 	and.w	r3, r3, #15
 8004062:	2201      	movs	r2, #1
 8004064:	fa02 f303 	lsl.w	r3, r2, r3
 8004068:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	43db      	mvns	r3, r3
 8004076:	6939      	ldr	r1, [r7, #16]
 8004078:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800407c:	4013      	ands	r3, r2
 800407e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3720      	adds	r7, #32
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
	...

0800408c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b088      	sub	sp, #32
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	333c      	adds	r3, #60	; 0x3c
 80040a4:	3304      	adds	r3, #4
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	015a      	lsls	r2, r3, #5
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	4413      	add	r3, r2
 80040b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d17b      	bne.n	80041ba <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	f003 0308 	and.w	r3, r3, #8
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d015      	beq.n	80040f8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	4a61      	ldr	r2, [pc, #388]	; (8004254 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	f240 80b9 	bls.w	8004248 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f000 80b3 	beq.w	8004248 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	015a      	lsls	r2, r3, #5
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	4413      	add	r3, r2
 80040ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ee:	461a      	mov	r2, r3
 80040f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040f4:	6093      	str	r3, [r2, #8]
 80040f6:	e0a7      	b.n	8004248 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	f003 0320 	and.w	r3, r3, #32
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d009      	beq.n	8004116 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	015a      	lsls	r2, r3, #5
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	4413      	add	r3, r2
 800410a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800410e:	461a      	mov	r2, r3
 8004110:	2320      	movs	r3, #32
 8004112:	6093      	str	r3, [r2, #8]
 8004114:	e098      	b.n	8004248 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800411c:	2b00      	cmp	r3, #0
 800411e:	f040 8093 	bne.w	8004248 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	4a4b      	ldr	r2, [pc, #300]	; (8004254 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d90f      	bls.n	800414a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00a      	beq.n	800414a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	015a      	lsls	r2, r3, #5
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	4413      	add	r3, r2
 800413c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004140:	461a      	mov	r2, r3
 8004142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004146:	6093      	str	r3, [r2, #8]
 8004148:	e07e      	b.n	8004248 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	4613      	mov	r3, r2
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	4413      	add	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	4413      	add	r3, r2
 800415c:	3304      	adds	r3, #4
 800415e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	69da      	ldr	r2, [r3, #28]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	0159      	lsls	r1, r3, #5
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	440b      	add	r3, r1
 800416c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004176:	1ad2      	subs	r2, r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d114      	bne.n	80041ac <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d109      	bne.n	800419e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6818      	ldr	r0, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004194:	461a      	mov	r2, r3
 8004196:	2101      	movs	r1, #1
 8004198:	f003 fc50 	bl	8007a3c <USB_EP0_OutStart>
 800419c:	e006      	b.n	80041ac <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	691a      	ldr	r2, [r3, #16]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	441a      	add	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	4619      	mov	r1, r3
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f005 feaa 	bl	8009f0c <HAL_PCD_DataOutStageCallback>
 80041b8:	e046      	b.n	8004248 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	4a26      	ldr	r2, [pc, #152]	; (8004258 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d124      	bne.n	800420c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00a      	beq.n	80041e2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	015a      	lsls	r2, r3, #5
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	4413      	add	r3, r2
 80041d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d8:	461a      	mov	r2, r3
 80041da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041de:	6093      	str	r3, [r2, #8]
 80041e0:	e032      	b.n	8004248 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	f003 0320 	and.w	r3, r3, #32
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d008      	beq.n	80041fe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	015a      	lsls	r2, r3, #5
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	4413      	add	r3, r2
 80041f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f8:	461a      	mov	r2, r3
 80041fa:	2320      	movs	r3, #32
 80041fc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	b2db      	uxtb	r3, r3
 8004202:	4619      	mov	r1, r3
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f005 fe81 	bl	8009f0c <HAL_PCD_DataOutStageCallback>
 800420a:	e01d      	b.n	8004248 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d114      	bne.n	800423c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004212:	6879      	ldr	r1, [r7, #4]
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	4613      	mov	r3, r2
 8004218:	00db      	lsls	r3, r3, #3
 800421a:	4413      	add	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	440b      	add	r3, r1
 8004220:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d108      	bne.n	800423c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6818      	ldr	r0, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004234:	461a      	mov	r2, r3
 8004236:	2100      	movs	r1, #0
 8004238:	f003 fc00 	bl	8007a3c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	b2db      	uxtb	r3, r3
 8004240:	4619      	mov	r1, r3
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f005 fe62 	bl	8009f0c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3720      	adds	r7, #32
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	4f54300a 	.word	0x4f54300a
 8004258:	4f54310a 	.word	0x4f54310a

0800425c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	333c      	adds	r3, #60	; 0x3c
 8004274:	3304      	adds	r3, #4
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	015a      	lsls	r2, r3, #5
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	4413      	add	r3, r2
 8004282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	4a15      	ldr	r2, [pc, #84]	; (80042e4 <PCD_EP_OutSetupPacket_int+0x88>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d90e      	bls.n	80042b0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004298:	2b00      	cmp	r3, #0
 800429a:	d009      	beq.n	80042b0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	015a      	lsls	r2, r3, #5
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a8:	461a      	mov	r2, r3
 80042aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042ae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f005 fe19 	bl	8009ee8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	4a0a      	ldr	r2, [pc, #40]	; (80042e4 <PCD_EP_OutSetupPacket_int+0x88>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d90c      	bls.n	80042d8 <PCD_EP_OutSetupPacket_int+0x7c>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d108      	bne.n	80042d8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6818      	ldr	r0, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80042d0:	461a      	mov	r2, r3
 80042d2:	2101      	movs	r1, #1
 80042d4:	f003 fbb2 	bl	8007a3c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3718      	adds	r7, #24
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	4f54300a 	.word	0x4f54300a

080042e8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	460b      	mov	r3, r1
 80042f2:	70fb      	strb	r3, [r7, #3]
 80042f4:	4613      	mov	r3, r2
 80042f6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004300:	78fb      	ldrb	r3, [r7, #3]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d107      	bne.n	8004316 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004306:	883b      	ldrh	r3, [r7, #0]
 8004308:	0419      	lsls	r1, r3, #16
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	430a      	orrs	r2, r1
 8004312:	629a      	str	r2, [r3, #40]	; 0x28
 8004314:	e028      	b.n	8004368 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431c:	0c1b      	lsrs	r3, r3, #16
 800431e:	68ba      	ldr	r2, [r7, #8]
 8004320:	4413      	add	r3, r2
 8004322:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004324:	2300      	movs	r3, #0
 8004326:	73fb      	strb	r3, [r7, #15]
 8004328:	e00d      	b.n	8004346 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	7bfb      	ldrb	r3, [r7, #15]
 8004330:	3340      	adds	r3, #64	; 0x40
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	0c1b      	lsrs	r3, r3, #16
 800433a:	68ba      	ldr	r2, [r7, #8]
 800433c:	4413      	add	r3, r2
 800433e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004340:	7bfb      	ldrb	r3, [r7, #15]
 8004342:	3301      	adds	r3, #1
 8004344:	73fb      	strb	r3, [r7, #15]
 8004346:	7bfa      	ldrb	r2, [r7, #15]
 8004348:	78fb      	ldrb	r3, [r7, #3]
 800434a:	3b01      	subs	r3, #1
 800434c:	429a      	cmp	r2, r3
 800434e:	d3ec      	bcc.n	800432a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004350:	883b      	ldrh	r3, [r7, #0]
 8004352:	0418      	lsls	r0, r3, #16
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6819      	ldr	r1, [r3, #0]
 8004358:	78fb      	ldrb	r3, [r7, #3]
 800435a:	3b01      	subs	r3, #1
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	4302      	orrs	r2, r0
 8004360:	3340      	adds	r3, #64	; 0x40
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	440b      	add	r3, r1
 8004366:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004376:	b480      	push	{r7}
 8004378:	b083      	sub	sp, #12
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
 800437e:	460b      	mov	r3, r1
 8004380:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	887a      	ldrh	r2, [r7, #2]
 8004388:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	460b      	mov	r3, r1
 80043a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e267      	b.n	8004892 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d075      	beq.n	80044ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043ce:	4b88      	ldr	r3, [pc, #544]	; (80045f0 <HAL_RCC_OscConfig+0x240>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f003 030c 	and.w	r3, r3, #12
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	d00c      	beq.n	80043f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043da:	4b85      	ldr	r3, [pc, #532]	; (80045f0 <HAL_RCC_OscConfig+0x240>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043e2:	2b08      	cmp	r3, #8
 80043e4:	d112      	bne.n	800440c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043e6:	4b82      	ldr	r3, [pc, #520]	; (80045f0 <HAL_RCC_OscConfig+0x240>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043f2:	d10b      	bne.n	800440c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043f4:	4b7e      	ldr	r3, [pc, #504]	; (80045f0 <HAL_RCC_OscConfig+0x240>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d05b      	beq.n	80044b8 <HAL_RCC_OscConfig+0x108>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d157      	bne.n	80044b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e242      	b.n	8004892 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004414:	d106      	bne.n	8004424 <HAL_RCC_OscConfig+0x74>
 8004416:	4b76      	ldr	r3, [pc, #472]	; (80045f0 <HAL_RCC_OscConfig+0x240>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a75      	ldr	r2, [pc, #468]	; (80045f0 <HAL_RCC_OscConfig+0x240>)
 800441c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004420:	6013      	str	r3, [r2, #0]
 8004422:	e01d      	b.n	8004460 <HAL_RCC_OscConfig+0xb0>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800442c:	d10c      	bne.n	8004448 <HAL_RCC_OscConfig+0x98>
 800442e:	4b70      	ldr	r3, [pc, #448]	; (80045f0 <HAL_RCC_OscConfig+0x240>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a6f      	ldr	r2, [pc, #444]	; (80045f0 <HAL_RCC_OscConfig+0x240>)
 8004434:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004438:	6013      	str	r3, [r2, #0]
 800443a:	4b6d      	ldr	r3, [pc, #436]	; (80045f0 <HAL_RCC_OscConfig+0x240>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a6c      	ldr	r2, [pc, #432]	; (80045f0 <HAL_RCC_OscConfig+0x240>)
 8004440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004444:	6013      	str	r3, [r2, #0]
 8004446:	e00b      	b.n	8004460 <HAL_RCC_OscConfig+0xb0>
 8004448:	4b69      	ldr	r3, [pc, #420]	; (80045f0 <HAL_RCC_OscConfig+0x240>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a68      	ldr	r2, [pc, #416]	; (80045f0 <HAL_RCC_OscConfig+0x240>)
 800444e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004452:	6013      	str	r3, [r2, #0]
 8004454:	4b66      	ldr	r3, [pc, #408]	; (80045f0 <HAL_RCC_OscConfig+0x240>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a65      	ldr	r2, [pc, #404]	; (80045f0 <HAL_RCC_OscConfig+0x240>)
 800445a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800445e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d013      	beq.n	8004490 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004468:	f7fd fe62 	bl	8002130 <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800446e:	e008      	b.n	8004482 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004470:	f7fd fe5e 	bl	8002130 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b64      	cmp	r3, #100	; 0x64
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e207      	b.n	8004892 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004482:	4b5b      	ldr	r3, [pc, #364]	; (80045f0 <HAL_RCC_OscConfig+0x240>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d0f0      	beq.n	8004470 <HAL_RCC_OscConfig+0xc0>
 800448e:	e014      	b.n	80044ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004490:	f7fd fe4e 	bl	8002130 <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004498:	f7fd fe4a 	bl	8002130 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b64      	cmp	r3, #100	; 0x64
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e1f3      	b.n	8004892 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044aa:	4b51      	ldr	r3, [pc, #324]	; (80045f0 <HAL_RCC_OscConfig+0x240>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1f0      	bne.n	8004498 <HAL_RCC_OscConfig+0xe8>
 80044b6:	e000      	b.n	80044ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d063      	beq.n	800458e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044c6:	4b4a      	ldr	r3, [pc, #296]	; (80045f0 <HAL_RCC_OscConfig+0x240>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 030c 	and.w	r3, r3, #12
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00b      	beq.n	80044ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044d2:	4b47      	ldr	r3, [pc, #284]	; (80045f0 <HAL_RCC_OscConfig+0x240>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044da:	2b08      	cmp	r3, #8
 80044dc:	d11c      	bne.n	8004518 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044de:	4b44      	ldr	r3, [pc, #272]	; (80045f0 <HAL_RCC_OscConfig+0x240>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d116      	bne.n	8004518 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ea:	4b41      	ldr	r3, [pc, #260]	; (80045f0 <HAL_RCC_OscConfig+0x240>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d005      	beq.n	8004502 <HAL_RCC_OscConfig+0x152>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d001      	beq.n	8004502 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e1c7      	b.n	8004892 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004502:	4b3b      	ldr	r3, [pc, #236]	; (80045f0 <HAL_RCC_OscConfig+0x240>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	4937      	ldr	r1, [pc, #220]	; (80045f0 <HAL_RCC_OscConfig+0x240>)
 8004512:	4313      	orrs	r3, r2
 8004514:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004516:	e03a      	b.n	800458e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d020      	beq.n	8004562 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004520:	4b34      	ldr	r3, [pc, #208]	; (80045f4 <HAL_RCC_OscConfig+0x244>)
 8004522:	2201      	movs	r2, #1
 8004524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004526:	f7fd fe03 	bl	8002130 <HAL_GetTick>
 800452a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800452c:	e008      	b.n	8004540 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800452e:	f7fd fdff 	bl	8002130 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d901      	bls.n	8004540 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e1a8      	b.n	8004892 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004540:	4b2b      	ldr	r3, [pc, #172]	; (80045f0 <HAL_RCC_OscConfig+0x240>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d0f0      	beq.n	800452e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800454c:	4b28      	ldr	r3, [pc, #160]	; (80045f0 <HAL_RCC_OscConfig+0x240>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	00db      	lsls	r3, r3, #3
 800455a:	4925      	ldr	r1, [pc, #148]	; (80045f0 <HAL_RCC_OscConfig+0x240>)
 800455c:	4313      	orrs	r3, r2
 800455e:	600b      	str	r3, [r1, #0]
 8004560:	e015      	b.n	800458e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004562:	4b24      	ldr	r3, [pc, #144]	; (80045f4 <HAL_RCC_OscConfig+0x244>)
 8004564:	2200      	movs	r2, #0
 8004566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004568:	f7fd fde2 	bl	8002130 <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004570:	f7fd fdde 	bl	8002130 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e187      	b.n	8004892 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004582:	4b1b      	ldr	r3, [pc, #108]	; (80045f0 <HAL_RCC_OscConfig+0x240>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1f0      	bne.n	8004570 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0308 	and.w	r3, r3, #8
 8004596:	2b00      	cmp	r3, #0
 8004598:	d036      	beq.n	8004608 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d016      	beq.n	80045d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045a2:	4b15      	ldr	r3, [pc, #84]	; (80045f8 <HAL_RCC_OscConfig+0x248>)
 80045a4:	2201      	movs	r2, #1
 80045a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a8:	f7fd fdc2 	bl	8002130 <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045b0:	f7fd fdbe 	bl	8002130 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e167      	b.n	8004892 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045c2:	4b0b      	ldr	r3, [pc, #44]	; (80045f0 <HAL_RCC_OscConfig+0x240>)
 80045c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0f0      	beq.n	80045b0 <HAL_RCC_OscConfig+0x200>
 80045ce:	e01b      	b.n	8004608 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045d0:	4b09      	ldr	r3, [pc, #36]	; (80045f8 <HAL_RCC_OscConfig+0x248>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045d6:	f7fd fdab 	bl	8002130 <HAL_GetTick>
 80045da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045dc:	e00e      	b.n	80045fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045de:	f7fd fda7 	bl	8002130 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d907      	bls.n	80045fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e150      	b.n	8004892 <HAL_RCC_OscConfig+0x4e2>
 80045f0:	40023800 	.word	0x40023800
 80045f4:	42470000 	.word	0x42470000
 80045f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045fc:	4b88      	ldr	r3, [pc, #544]	; (8004820 <HAL_RCC_OscConfig+0x470>)
 80045fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1ea      	bne.n	80045de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	2b00      	cmp	r3, #0
 8004612:	f000 8097 	beq.w	8004744 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004616:	2300      	movs	r3, #0
 8004618:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800461a:	4b81      	ldr	r3, [pc, #516]	; (8004820 <HAL_RCC_OscConfig+0x470>)
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10f      	bne.n	8004646 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004626:	2300      	movs	r3, #0
 8004628:	60bb      	str	r3, [r7, #8]
 800462a:	4b7d      	ldr	r3, [pc, #500]	; (8004820 <HAL_RCC_OscConfig+0x470>)
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	4a7c      	ldr	r2, [pc, #496]	; (8004820 <HAL_RCC_OscConfig+0x470>)
 8004630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004634:	6413      	str	r3, [r2, #64]	; 0x40
 8004636:	4b7a      	ldr	r3, [pc, #488]	; (8004820 <HAL_RCC_OscConfig+0x470>)
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800463e:	60bb      	str	r3, [r7, #8]
 8004640:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004642:	2301      	movs	r3, #1
 8004644:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004646:	4b77      	ldr	r3, [pc, #476]	; (8004824 <HAL_RCC_OscConfig+0x474>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800464e:	2b00      	cmp	r3, #0
 8004650:	d118      	bne.n	8004684 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004652:	4b74      	ldr	r3, [pc, #464]	; (8004824 <HAL_RCC_OscConfig+0x474>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a73      	ldr	r2, [pc, #460]	; (8004824 <HAL_RCC_OscConfig+0x474>)
 8004658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800465c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800465e:	f7fd fd67 	bl	8002130 <HAL_GetTick>
 8004662:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004664:	e008      	b.n	8004678 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004666:	f7fd fd63 	bl	8002130 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	2b02      	cmp	r3, #2
 8004672:	d901      	bls.n	8004678 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e10c      	b.n	8004892 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004678:	4b6a      	ldr	r3, [pc, #424]	; (8004824 <HAL_RCC_OscConfig+0x474>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0f0      	beq.n	8004666 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d106      	bne.n	800469a <HAL_RCC_OscConfig+0x2ea>
 800468c:	4b64      	ldr	r3, [pc, #400]	; (8004820 <HAL_RCC_OscConfig+0x470>)
 800468e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004690:	4a63      	ldr	r2, [pc, #396]	; (8004820 <HAL_RCC_OscConfig+0x470>)
 8004692:	f043 0301 	orr.w	r3, r3, #1
 8004696:	6713      	str	r3, [r2, #112]	; 0x70
 8004698:	e01c      	b.n	80046d4 <HAL_RCC_OscConfig+0x324>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	2b05      	cmp	r3, #5
 80046a0:	d10c      	bne.n	80046bc <HAL_RCC_OscConfig+0x30c>
 80046a2:	4b5f      	ldr	r3, [pc, #380]	; (8004820 <HAL_RCC_OscConfig+0x470>)
 80046a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a6:	4a5e      	ldr	r2, [pc, #376]	; (8004820 <HAL_RCC_OscConfig+0x470>)
 80046a8:	f043 0304 	orr.w	r3, r3, #4
 80046ac:	6713      	str	r3, [r2, #112]	; 0x70
 80046ae:	4b5c      	ldr	r3, [pc, #368]	; (8004820 <HAL_RCC_OscConfig+0x470>)
 80046b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b2:	4a5b      	ldr	r2, [pc, #364]	; (8004820 <HAL_RCC_OscConfig+0x470>)
 80046b4:	f043 0301 	orr.w	r3, r3, #1
 80046b8:	6713      	str	r3, [r2, #112]	; 0x70
 80046ba:	e00b      	b.n	80046d4 <HAL_RCC_OscConfig+0x324>
 80046bc:	4b58      	ldr	r3, [pc, #352]	; (8004820 <HAL_RCC_OscConfig+0x470>)
 80046be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c0:	4a57      	ldr	r2, [pc, #348]	; (8004820 <HAL_RCC_OscConfig+0x470>)
 80046c2:	f023 0301 	bic.w	r3, r3, #1
 80046c6:	6713      	str	r3, [r2, #112]	; 0x70
 80046c8:	4b55      	ldr	r3, [pc, #340]	; (8004820 <HAL_RCC_OscConfig+0x470>)
 80046ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046cc:	4a54      	ldr	r2, [pc, #336]	; (8004820 <HAL_RCC_OscConfig+0x470>)
 80046ce:	f023 0304 	bic.w	r3, r3, #4
 80046d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d015      	beq.n	8004708 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046dc:	f7fd fd28 	bl	8002130 <HAL_GetTick>
 80046e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e2:	e00a      	b.n	80046fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046e4:	f7fd fd24 	bl	8002130 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e0cb      	b.n	8004892 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046fa:	4b49      	ldr	r3, [pc, #292]	; (8004820 <HAL_RCC_OscConfig+0x470>)
 80046fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d0ee      	beq.n	80046e4 <HAL_RCC_OscConfig+0x334>
 8004706:	e014      	b.n	8004732 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004708:	f7fd fd12 	bl	8002130 <HAL_GetTick>
 800470c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800470e:	e00a      	b.n	8004726 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004710:	f7fd fd0e 	bl	8002130 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	f241 3288 	movw	r2, #5000	; 0x1388
 800471e:	4293      	cmp	r3, r2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e0b5      	b.n	8004892 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004726:	4b3e      	ldr	r3, [pc, #248]	; (8004820 <HAL_RCC_OscConfig+0x470>)
 8004728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1ee      	bne.n	8004710 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004732:	7dfb      	ldrb	r3, [r7, #23]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d105      	bne.n	8004744 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004738:	4b39      	ldr	r3, [pc, #228]	; (8004820 <HAL_RCC_OscConfig+0x470>)
 800473a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473c:	4a38      	ldr	r2, [pc, #224]	; (8004820 <HAL_RCC_OscConfig+0x470>)
 800473e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004742:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	2b00      	cmp	r3, #0
 800474a:	f000 80a1 	beq.w	8004890 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800474e:	4b34      	ldr	r3, [pc, #208]	; (8004820 <HAL_RCC_OscConfig+0x470>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f003 030c 	and.w	r3, r3, #12
 8004756:	2b08      	cmp	r3, #8
 8004758:	d05c      	beq.n	8004814 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	2b02      	cmp	r3, #2
 8004760:	d141      	bne.n	80047e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004762:	4b31      	ldr	r3, [pc, #196]	; (8004828 <HAL_RCC_OscConfig+0x478>)
 8004764:	2200      	movs	r2, #0
 8004766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004768:	f7fd fce2 	bl	8002130 <HAL_GetTick>
 800476c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800476e:	e008      	b.n	8004782 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004770:	f7fd fcde 	bl	8002130 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b02      	cmp	r3, #2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e087      	b.n	8004892 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004782:	4b27      	ldr	r3, [pc, #156]	; (8004820 <HAL_RCC_OscConfig+0x470>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1f0      	bne.n	8004770 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	69da      	ldr	r2, [r3, #28]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479c:	019b      	lsls	r3, r3, #6
 800479e:	431a      	orrs	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a4:	085b      	lsrs	r3, r3, #1
 80047a6:	3b01      	subs	r3, #1
 80047a8:	041b      	lsls	r3, r3, #16
 80047aa:	431a      	orrs	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b0:	061b      	lsls	r3, r3, #24
 80047b2:	491b      	ldr	r1, [pc, #108]	; (8004820 <HAL_RCC_OscConfig+0x470>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047b8:	4b1b      	ldr	r3, [pc, #108]	; (8004828 <HAL_RCC_OscConfig+0x478>)
 80047ba:	2201      	movs	r2, #1
 80047bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047be:	f7fd fcb7 	bl	8002130 <HAL_GetTick>
 80047c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047c4:	e008      	b.n	80047d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047c6:	f7fd fcb3 	bl	8002130 <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d901      	bls.n	80047d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e05c      	b.n	8004892 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047d8:	4b11      	ldr	r3, [pc, #68]	; (8004820 <HAL_RCC_OscConfig+0x470>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d0f0      	beq.n	80047c6 <HAL_RCC_OscConfig+0x416>
 80047e4:	e054      	b.n	8004890 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047e6:	4b10      	ldr	r3, [pc, #64]	; (8004828 <HAL_RCC_OscConfig+0x478>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ec:	f7fd fca0 	bl	8002130 <HAL_GetTick>
 80047f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047f2:	e008      	b.n	8004806 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047f4:	f7fd fc9c 	bl	8002130 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d901      	bls.n	8004806 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e045      	b.n	8004892 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004806:	4b06      	ldr	r3, [pc, #24]	; (8004820 <HAL_RCC_OscConfig+0x470>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1f0      	bne.n	80047f4 <HAL_RCC_OscConfig+0x444>
 8004812:	e03d      	b.n	8004890 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d107      	bne.n	800482c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e038      	b.n	8004892 <HAL_RCC_OscConfig+0x4e2>
 8004820:	40023800 	.word	0x40023800
 8004824:	40007000 	.word	0x40007000
 8004828:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800482c:	4b1b      	ldr	r3, [pc, #108]	; (800489c <HAL_RCC_OscConfig+0x4ec>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d028      	beq.n	800488c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004844:	429a      	cmp	r2, r3
 8004846:	d121      	bne.n	800488c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004852:	429a      	cmp	r2, r3
 8004854:	d11a      	bne.n	800488c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800485c:	4013      	ands	r3, r2
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004862:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004864:	4293      	cmp	r3, r2
 8004866:	d111      	bne.n	800488c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004872:	085b      	lsrs	r3, r3, #1
 8004874:	3b01      	subs	r3, #1
 8004876:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004878:	429a      	cmp	r2, r3
 800487a:	d107      	bne.n	800488c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004886:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004888:	429a      	cmp	r2, r3
 800488a:	d001      	beq.n	8004890 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e000      	b.n	8004892 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3718      	adds	r7, #24
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	40023800 	.word	0x40023800

080048a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d101      	bne.n	80048b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e0cc      	b.n	8004a4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048b4:	4b68      	ldr	r3, [pc, #416]	; (8004a58 <HAL_RCC_ClockConfig+0x1b8>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0307 	and.w	r3, r3, #7
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d90c      	bls.n	80048dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048c2:	4b65      	ldr	r3, [pc, #404]	; (8004a58 <HAL_RCC_ClockConfig+0x1b8>)
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	b2d2      	uxtb	r2, r2
 80048c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ca:	4b63      	ldr	r3, [pc, #396]	; (8004a58 <HAL_RCC_ClockConfig+0x1b8>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0307 	and.w	r3, r3, #7
 80048d2:	683a      	ldr	r2, [r7, #0]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d001      	beq.n	80048dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e0b8      	b.n	8004a4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0302 	and.w	r3, r3, #2
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d020      	beq.n	800492a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0304 	and.w	r3, r3, #4
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d005      	beq.n	8004900 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048f4:	4b59      	ldr	r3, [pc, #356]	; (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	4a58      	ldr	r2, [pc, #352]	; (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0308 	and.w	r3, r3, #8
 8004908:	2b00      	cmp	r3, #0
 800490a:	d005      	beq.n	8004918 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800490c:	4b53      	ldr	r3, [pc, #332]	; (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	4a52      	ldr	r2, [pc, #328]	; (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 8004912:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004916:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004918:	4b50      	ldr	r3, [pc, #320]	; (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	494d      	ldr	r1, [pc, #308]	; (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 8004926:	4313      	orrs	r3, r2
 8004928:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	d044      	beq.n	80049c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d107      	bne.n	800494e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800493e:	4b47      	ldr	r3, [pc, #284]	; (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d119      	bne.n	800497e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e07f      	b.n	8004a4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	2b02      	cmp	r3, #2
 8004954:	d003      	beq.n	800495e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800495a:	2b03      	cmp	r3, #3
 800495c:	d107      	bne.n	800496e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800495e:	4b3f      	ldr	r3, [pc, #252]	; (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d109      	bne.n	800497e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e06f      	b.n	8004a4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800496e:	4b3b      	ldr	r3, [pc, #236]	; (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e067      	b.n	8004a4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800497e:	4b37      	ldr	r3, [pc, #220]	; (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f023 0203 	bic.w	r2, r3, #3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	4934      	ldr	r1, [pc, #208]	; (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 800498c:	4313      	orrs	r3, r2
 800498e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004990:	f7fd fbce 	bl	8002130 <HAL_GetTick>
 8004994:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004996:	e00a      	b.n	80049ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004998:	f7fd fbca 	bl	8002130 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e04f      	b.n	8004a4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ae:	4b2b      	ldr	r3, [pc, #172]	; (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 020c 	and.w	r2, r3, #12
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	429a      	cmp	r2, r3
 80049be:	d1eb      	bne.n	8004998 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049c0:	4b25      	ldr	r3, [pc, #148]	; (8004a58 <HAL_RCC_ClockConfig+0x1b8>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0307 	and.w	r3, r3, #7
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d20c      	bcs.n	80049e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ce:	4b22      	ldr	r3, [pc, #136]	; (8004a58 <HAL_RCC_ClockConfig+0x1b8>)
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	b2d2      	uxtb	r2, r2
 80049d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049d6:	4b20      	ldr	r3, [pc, #128]	; (8004a58 <HAL_RCC_ClockConfig+0x1b8>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0307 	and.w	r3, r3, #7
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d001      	beq.n	80049e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e032      	b.n	8004a4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d008      	beq.n	8004a06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049f4:	4b19      	ldr	r3, [pc, #100]	; (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	4916      	ldr	r1, [pc, #88]	; (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0308 	and.w	r3, r3, #8
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d009      	beq.n	8004a26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a12:	4b12      	ldr	r3, [pc, #72]	; (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	490e      	ldr	r1, [pc, #56]	; (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a26:	f000 f821 	bl	8004a6c <HAL_RCC_GetSysClockFreq>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	4b0b      	ldr	r3, [pc, #44]	; (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	091b      	lsrs	r3, r3, #4
 8004a32:	f003 030f 	and.w	r3, r3, #15
 8004a36:	490a      	ldr	r1, [pc, #40]	; (8004a60 <HAL_RCC_ClockConfig+0x1c0>)
 8004a38:	5ccb      	ldrb	r3, [r1, r3]
 8004a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a3e:	4a09      	ldr	r2, [pc, #36]	; (8004a64 <HAL_RCC_ClockConfig+0x1c4>)
 8004a40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a42:	4b09      	ldr	r3, [pc, #36]	; (8004a68 <HAL_RCC_ClockConfig+0x1c8>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fd fb2e 	bl	80020a8 <HAL_InitTick>

  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	40023c00 	.word	0x40023c00
 8004a5c:	40023800 	.word	0x40023800
 8004a60:	0800a528 	.word	0x0800a528
 8004a64:	20000000 	.word	0x20000000
 8004a68:	20000004 	.word	0x20000004

08004a6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a70:	b094      	sub	sp, #80	; 0x50
 8004a72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a74:	2300      	movs	r3, #0
 8004a76:	647b      	str	r3, [r7, #68]	; 0x44
 8004a78:	2300      	movs	r3, #0
 8004a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004a80:	2300      	movs	r3, #0
 8004a82:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a84:	4b79      	ldr	r3, [pc, #484]	; (8004c6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f003 030c 	and.w	r3, r3, #12
 8004a8c:	2b08      	cmp	r3, #8
 8004a8e:	d00d      	beq.n	8004aac <HAL_RCC_GetSysClockFreq+0x40>
 8004a90:	2b08      	cmp	r3, #8
 8004a92:	f200 80e1 	bhi.w	8004c58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d002      	beq.n	8004aa0 <HAL_RCC_GetSysClockFreq+0x34>
 8004a9a:	2b04      	cmp	r3, #4
 8004a9c:	d003      	beq.n	8004aa6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a9e:	e0db      	b.n	8004c58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004aa0:	4b73      	ldr	r3, [pc, #460]	; (8004c70 <HAL_RCC_GetSysClockFreq+0x204>)
 8004aa2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004aa4:	e0db      	b.n	8004c5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004aa6:	4b72      	ldr	r3, [pc, #456]	; (8004c70 <HAL_RCC_GetSysClockFreq+0x204>)
 8004aa8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004aaa:	e0d8      	b.n	8004c5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004aac:	4b6f      	ldr	r3, [pc, #444]	; (8004c6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ab4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ab6:	4b6d      	ldr	r3, [pc, #436]	; (8004c6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d063      	beq.n	8004b8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ac2:	4b6a      	ldr	r3, [pc, #424]	; (8004c6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	099b      	lsrs	r3, r3, #6
 8004ac8:	2200      	movs	r2, #0
 8004aca:	63bb      	str	r3, [r7, #56]	; 0x38
 8004acc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ad4:	633b      	str	r3, [r7, #48]	; 0x30
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	637b      	str	r3, [r7, #52]	; 0x34
 8004ada:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004ade:	4622      	mov	r2, r4
 8004ae0:	462b      	mov	r3, r5
 8004ae2:	f04f 0000 	mov.w	r0, #0
 8004ae6:	f04f 0100 	mov.w	r1, #0
 8004aea:	0159      	lsls	r1, r3, #5
 8004aec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004af0:	0150      	lsls	r0, r2, #5
 8004af2:	4602      	mov	r2, r0
 8004af4:	460b      	mov	r3, r1
 8004af6:	4621      	mov	r1, r4
 8004af8:	1a51      	subs	r1, r2, r1
 8004afa:	6139      	str	r1, [r7, #16]
 8004afc:	4629      	mov	r1, r5
 8004afe:	eb63 0301 	sbc.w	r3, r3, r1
 8004b02:	617b      	str	r3, [r7, #20]
 8004b04:	f04f 0200 	mov.w	r2, #0
 8004b08:	f04f 0300 	mov.w	r3, #0
 8004b0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b10:	4659      	mov	r1, fp
 8004b12:	018b      	lsls	r3, r1, #6
 8004b14:	4651      	mov	r1, sl
 8004b16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b1a:	4651      	mov	r1, sl
 8004b1c:	018a      	lsls	r2, r1, #6
 8004b1e:	4651      	mov	r1, sl
 8004b20:	ebb2 0801 	subs.w	r8, r2, r1
 8004b24:	4659      	mov	r1, fp
 8004b26:	eb63 0901 	sbc.w	r9, r3, r1
 8004b2a:	f04f 0200 	mov.w	r2, #0
 8004b2e:	f04f 0300 	mov.w	r3, #0
 8004b32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b3e:	4690      	mov	r8, r2
 8004b40:	4699      	mov	r9, r3
 8004b42:	4623      	mov	r3, r4
 8004b44:	eb18 0303 	adds.w	r3, r8, r3
 8004b48:	60bb      	str	r3, [r7, #8]
 8004b4a:	462b      	mov	r3, r5
 8004b4c:	eb49 0303 	adc.w	r3, r9, r3
 8004b50:	60fb      	str	r3, [r7, #12]
 8004b52:	f04f 0200 	mov.w	r2, #0
 8004b56:	f04f 0300 	mov.w	r3, #0
 8004b5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b5e:	4629      	mov	r1, r5
 8004b60:	028b      	lsls	r3, r1, #10
 8004b62:	4621      	mov	r1, r4
 8004b64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b68:	4621      	mov	r1, r4
 8004b6a:	028a      	lsls	r2, r1, #10
 8004b6c:	4610      	mov	r0, r2
 8004b6e:	4619      	mov	r1, r3
 8004b70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b72:	2200      	movs	r2, #0
 8004b74:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b7c:	f7fb fb24 	bl	80001c8 <__aeabi_uldivmod>
 8004b80:	4602      	mov	r2, r0
 8004b82:	460b      	mov	r3, r1
 8004b84:	4613      	mov	r3, r2
 8004b86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b88:	e058      	b.n	8004c3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b8a:	4b38      	ldr	r3, [pc, #224]	; (8004c6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	099b      	lsrs	r3, r3, #6
 8004b90:	2200      	movs	r2, #0
 8004b92:	4618      	mov	r0, r3
 8004b94:	4611      	mov	r1, r2
 8004b96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b9a:	623b      	str	r3, [r7, #32]
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004ba0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ba4:	4642      	mov	r2, r8
 8004ba6:	464b      	mov	r3, r9
 8004ba8:	f04f 0000 	mov.w	r0, #0
 8004bac:	f04f 0100 	mov.w	r1, #0
 8004bb0:	0159      	lsls	r1, r3, #5
 8004bb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bb6:	0150      	lsls	r0, r2, #5
 8004bb8:	4602      	mov	r2, r0
 8004bba:	460b      	mov	r3, r1
 8004bbc:	4641      	mov	r1, r8
 8004bbe:	ebb2 0a01 	subs.w	sl, r2, r1
 8004bc2:	4649      	mov	r1, r9
 8004bc4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004bc8:	f04f 0200 	mov.w	r2, #0
 8004bcc:	f04f 0300 	mov.w	r3, #0
 8004bd0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004bd4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004bd8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004bdc:	ebb2 040a 	subs.w	r4, r2, sl
 8004be0:	eb63 050b 	sbc.w	r5, r3, fp
 8004be4:	f04f 0200 	mov.w	r2, #0
 8004be8:	f04f 0300 	mov.w	r3, #0
 8004bec:	00eb      	lsls	r3, r5, #3
 8004bee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bf2:	00e2      	lsls	r2, r4, #3
 8004bf4:	4614      	mov	r4, r2
 8004bf6:	461d      	mov	r5, r3
 8004bf8:	4643      	mov	r3, r8
 8004bfa:	18e3      	adds	r3, r4, r3
 8004bfc:	603b      	str	r3, [r7, #0]
 8004bfe:	464b      	mov	r3, r9
 8004c00:	eb45 0303 	adc.w	r3, r5, r3
 8004c04:	607b      	str	r3, [r7, #4]
 8004c06:	f04f 0200 	mov.w	r2, #0
 8004c0a:	f04f 0300 	mov.w	r3, #0
 8004c0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c12:	4629      	mov	r1, r5
 8004c14:	028b      	lsls	r3, r1, #10
 8004c16:	4621      	mov	r1, r4
 8004c18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c1c:	4621      	mov	r1, r4
 8004c1e:	028a      	lsls	r2, r1, #10
 8004c20:	4610      	mov	r0, r2
 8004c22:	4619      	mov	r1, r3
 8004c24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c26:	2200      	movs	r2, #0
 8004c28:	61bb      	str	r3, [r7, #24]
 8004c2a:	61fa      	str	r2, [r7, #28]
 8004c2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c30:	f7fb faca 	bl	80001c8 <__aeabi_uldivmod>
 8004c34:	4602      	mov	r2, r0
 8004c36:	460b      	mov	r3, r1
 8004c38:	4613      	mov	r3, r2
 8004c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c3c:	4b0b      	ldr	r3, [pc, #44]	; (8004c6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	0c1b      	lsrs	r3, r3, #16
 8004c42:	f003 0303 	and.w	r3, r3, #3
 8004c46:	3301      	adds	r3, #1
 8004c48:	005b      	lsls	r3, r3, #1
 8004c4a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004c4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c56:	e002      	b.n	8004c5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c58:	4b05      	ldr	r3, [pc, #20]	; (8004c70 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c5a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3750      	adds	r7, #80	; 0x50
 8004c64:	46bd      	mov	sp, r7
 8004c66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c6a:	bf00      	nop
 8004c6c:	40023800 	.word	0x40023800
 8004c70:	00f42400 	.word	0x00f42400

08004c74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c74:	b480      	push	{r7}
 8004c76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c78:	4b03      	ldr	r3, [pc, #12]	; (8004c88 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	20000000 	.word	0x20000000

08004c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c90:	f7ff fff0 	bl	8004c74 <HAL_RCC_GetHCLKFreq>
 8004c94:	4602      	mov	r2, r0
 8004c96:	4b05      	ldr	r3, [pc, #20]	; (8004cac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	0a9b      	lsrs	r3, r3, #10
 8004c9c:	f003 0307 	and.w	r3, r3, #7
 8004ca0:	4903      	ldr	r1, [pc, #12]	; (8004cb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ca2:	5ccb      	ldrb	r3, [r1, r3]
 8004ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	40023800 	.word	0x40023800
 8004cb0:	0800a538 	.word	0x0800a538

08004cb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004cb8:	f7ff ffdc 	bl	8004c74 <HAL_RCC_GetHCLKFreq>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	4b05      	ldr	r3, [pc, #20]	; (8004cd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	0b5b      	lsrs	r3, r3, #13
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	4903      	ldr	r1, [pc, #12]	; (8004cd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cca:	5ccb      	ldrb	r3, [r1, r3]
 8004ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	40023800 	.word	0x40023800
 8004cd8:	0800a538 	.word	0x0800a538

08004cdc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e07b      	b.n	8004de6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d108      	bne.n	8004d08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cfe:	d009      	beq.n	8004d14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	61da      	str	r2, [r3, #28]
 8004d06:	e005      	b.n	8004d14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d106      	bne.n	8004d34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7fc fdde 	bl	80018f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2202      	movs	r2, #2
 8004d38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d4a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d5c:	431a      	orrs	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d66:	431a      	orrs	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	f003 0302 	and.w	r3, r3, #2
 8004d70:	431a      	orrs	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d84:	431a      	orrs	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	69db      	ldr	r3, [r3, #28]
 8004d8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d98:	ea42 0103 	orr.w	r1, r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	430a      	orrs	r2, r1
 8004daa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	0c1b      	lsrs	r3, r3, #16
 8004db2:	f003 0104 	and.w	r1, r3, #4
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	f003 0210 	and.w	r2, r3, #16
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	69da      	ldr	r2, [r3, #28]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dd4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3708      	adds	r7, #8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b082      	sub	sp, #8
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d101      	bne.n	8004e00 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e041      	b.n	8004e84 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d106      	bne.n	8004e1a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f7fc fdd5 	bl	80019c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	3304      	adds	r3, #4
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	4610      	mov	r0, r2
 8004e2e:	f000 fbbb 	bl	80055a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3708      	adds	r7, #8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d001      	beq.n	8004ea4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e04e      	b.n	8004f42 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68da      	ldr	r2, [r3, #12]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f042 0201 	orr.w	r2, r2, #1
 8004eba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a23      	ldr	r2, [pc, #140]	; (8004f50 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d022      	beq.n	8004f0c <HAL_TIM_Base_Start_IT+0x80>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ece:	d01d      	beq.n	8004f0c <HAL_TIM_Base_Start_IT+0x80>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a1f      	ldr	r2, [pc, #124]	; (8004f54 <HAL_TIM_Base_Start_IT+0xc8>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d018      	beq.n	8004f0c <HAL_TIM_Base_Start_IT+0x80>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a1e      	ldr	r2, [pc, #120]	; (8004f58 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d013      	beq.n	8004f0c <HAL_TIM_Base_Start_IT+0x80>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a1c      	ldr	r2, [pc, #112]	; (8004f5c <HAL_TIM_Base_Start_IT+0xd0>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d00e      	beq.n	8004f0c <HAL_TIM_Base_Start_IT+0x80>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a1b      	ldr	r2, [pc, #108]	; (8004f60 <HAL_TIM_Base_Start_IT+0xd4>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d009      	beq.n	8004f0c <HAL_TIM_Base_Start_IT+0x80>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a19      	ldr	r2, [pc, #100]	; (8004f64 <HAL_TIM_Base_Start_IT+0xd8>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d004      	beq.n	8004f0c <HAL_TIM_Base_Start_IT+0x80>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a18      	ldr	r2, [pc, #96]	; (8004f68 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d111      	bne.n	8004f30 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f003 0307 	and.w	r3, r3, #7
 8004f16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2b06      	cmp	r3, #6
 8004f1c:	d010      	beq.n	8004f40 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f042 0201 	orr.w	r2, r2, #1
 8004f2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f2e:	e007      	b.n	8004f40 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f042 0201 	orr.w	r2, r2, #1
 8004f3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3714      	adds	r7, #20
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	40010000 	.word	0x40010000
 8004f54:	40000400 	.word	0x40000400
 8004f58:	40000800 	.word	0x40000800
 8004f5c:	40000c00 	.word	0x40000c00
 8004f60:	40010400 	.word	0x40010400
 8004f64:	40014000 	.word	0x40014000
 8004f68:	40001800 	.word	0x40001800

08004f6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e041      	b.n	8005002 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d106      	bne.n	8004f98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 f839 	bl	800500a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	3304      	adds	r3, #4
 8004fa8:	4619      	mov	r1, r3
 8004faa:	4610      	mov	r0, r2
 8004fac:	f000 fafc 	bl	80055a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3708      	adds	r7, #8
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800500a:	b480      	push	{r7}
 800500c:	b083      	sub	sp, #12
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005012:	bf00      	nop
 8005014:	370c      	adds	r7, #12
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr

0800501e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b082      	sub	sp, #8
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	2b02      	cmp	r3, #2
 8005032:	d122      	bne.n	800507a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b02      	cmp	r3, #2
 8005040:	d11b      	bne.n	800507a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f06f 0202 	mvn.w	r2, #2
 800504a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	f003 0303 	and.w	r3, r3, #3
 800505c:	2b00      	cmp	r3, #0
 800505e:	d003      	beq.n	8005068 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 fa82 	bl	800556a <HAL_TIM_IC_CaptureCallback>
 8005066:	e005      	b.n	8005074 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 fa74 	bl	8005556 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 fa85 	bl	800557e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	f003 0304 	and.w	r3, r3, #4
 8005084:	2b04      	cmp	r3, #4
 8005086:	d122      	bne.n	80050ce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	f003 0304 	and.w	r3, r3, #4
 8005092:	2b04      	cmp	r3, #4
 8005094:	d11b      	bne.n	80050ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f06f 0204 	mvn.w	r2, #4
 800509e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2202      	movs	r2, #2
 80050a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d003      	beq.n	80050bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 fa58 	bl	800556a <HAL_TIM_IC_CaptureCallback>
 80050ba:	e005      	b.n	80050c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 fa4a 	bl	8005556 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 fa5b 	bl	800557e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	f003 0308 	and.w	r3, r3, #8
 80050d8:	2b08      	cmp	r3, #8
 80050da:	d122      	bne.n	8005122 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	f003 0308 	and.w	r3, r3, #8
 80050e6:	2b08      	cmp	r3, #8
 80050e8:	d11b      	bne.n	8005122 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f06f 0208 	mvn.w	r2, #8
 80050f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2204      	movs	r2, #4
 80050f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	f003 0303 	and.w	r3, r3, #3
 8005104:	2b00      	cmp	r3, #0
 8005106:	d003      	beq.n	8005110 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 fa2e 	bl	800556a <HAL_TIM_IC_CaptureCallback>
 800510e:	e005      	b.n	800511c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 fa20 	bl	8005556 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 fa31 	bl	800557e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	f003 0310 	and.w	r3, r3, #16
 800512c:	2b10      	cmp	r3, #16
 800512e:	d122      	bne.n	8005176 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	f003 0310 	and.w	r3, r3, #16
 800513a:	2b10      	cmp	r3, #16
 800513c:	d11b      	bne.n	8005176 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f06f 0210 	mvn.w	r2, #16
 8005146:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2208      	movs	r2, #8
 800514c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	69db      	ldr	r3, [r3, #28]
 8005154:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005158:	2b00      	cmp	r3, #0
 800515a:	d003      	beq.n	8005164 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 fa04 	bl	800556a <HAL_TIM_IC_CaptureCallback>
 8005162:	e005      	b.n	8005170 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 f9f6 	bl	8005556 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 fa07 	bl	800557e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	2b01      	cmp	r3, #1
 8005182:	d10e      	bne.n	80051a2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	2b01      	cmp	r3, #1
 8005190:	d107      	bne.n	80051a2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f06f 0201 	mvn.w	r2, #1
 800519a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 f9d0 	bl	8005542 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ac:	2b80      	cmp	r3, #128	; 0x80
 80051ae:	d10e      	bne.n	80051ce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ba:	2b80      	cmp	r3, #128	; 0x80
 80051bc:	d107      	bne.n	80051ce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 fdaf 	bl	8005d2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d8:	2b40      	cmp	r3, #64	; 0x40
 80051da:	d10e      	bne.n	80051fa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e6:	2b40      	cmp	r3, #64	; 0x40
 80051e8:	d107      	bne.n	80051fa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 f9cc 	bl	8005592 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	f003 0320 	and.w	r3, r3, #32
 8005204:	2b20      	cmp	r3, #32
 8005206:	d10e      	bne.n	8005226 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	f003 0320 	and.w	r3, r3, #32
 8005212:	2b20      	cmp	r3, #32
 8005214:	d107      	bne.n	8005226 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f06f 0220 	mvn.w	r2, #32
 800521e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 fd79 	bl	8005d18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005226:	bf00      	nop
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
	...

08005230 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800523c:	2300      	movs	r3, #0
 800523e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005246:	2b01      	cmp	r3, #1
 8005248:	d101      	bne.n	800524e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800524a:	2302      	movs	r3, #2
 800524c:	e0ae      	b.n	80053ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2b0c      	cmp	r3, #12
 800525a:	f200 809f 	bhi.w	800539c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800525e:	a201      	add	r2, pc, #4	; (adr r2, 8005264 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005264:	08005299 	.word	0x08005299
 8005268:	0800539d 	.word	0x0800539d
 800526c:	0800539d 	.word	0x0800539d
 8005270:	0800539d 	.word	0x0800539d
 8005274:	080052d9 	.word	0x080052d9
 8005278:	0800539d 	.word	0x0800539d
 800527c:	0800539d 	.word	0x0800539d
 8005280:	0800539d 	.word	0x0800539d
 8005284:	0800531b 	.word	0x0800531b
 8005288:	0800539d 	.word	0x0800539d
 800528c:	0800539d 	.word	0x0800539d
 8005290:	0800539d 	.word	0x0800539d
 8005294:	0800535b 	.word	0x0800535b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68b9      	ldr	r1, [r7, #8]
 800529e:	4618      	mov	r0, r3
 80052a0:	f000 fa22 	bl	80056e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	699a      	ldr	r2, [r3, #24]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f042 0208 	orr.w	r2, r2, #8
 80052b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	699a      	ldr	r2, [r3, #24]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f022 0204 	bic.w	r2, r2, #4
 80052c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6999      	ldr	r1, [r3, #24]
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	691a      	ldr	r2, [r3, #16]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	619a      	str	r2, [r3, #24]
      break;
 80052d6:	e064      	b.n	80053a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68b9      	ldr	r1, [r7, #8]
 80052de:	4618      	mov	r0, r3
 80052e0:	f000 fa72 	bl	80057c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	699a      	ldr	r2, [r3, #24]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	699a      	ldr	r2, [r3, #24]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6999      	ldr	r1, [r3, #24]
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	021a      	lsls	r2, r3, #8
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	430a      	orrs	r2, r1
 8005316:	619a      	str	r2, [r3, #24]
      break;
 8005318:	e043      	b.n	80053a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68b9      	ldr	r1, [r7, #8]
 8005320:	4618      	mov	r0, r3
 8005322:	f000 fac7 	bl	80058b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	69da      	ldr	r2, [r3, #28]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f042 0208 	orr.w	r2, r2, #8
 8005334:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	69da      	ldr	r2, [r3, #28]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f022 0204 	bic.w	r2, r2, #4
 8005344:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	69d9      	ldr	r1, [r3, #28]
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	691a      	ldr	r2, [r3, #16]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	430a      	orrs	r2, r1
 8005356:	61da      	str	r2, [r3, #28]
      break;
 8005358:	e023      	b.n	80053a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68b9      	ldr	r1, [r7, #8]
 8005360:	4618      	mov	r0, r3
 8005362:	f000 fb1b 	bl	800599c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	69da      	ldr	r2, [r3, #28]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005374:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	69da      	ldr	r2, [r3, #28]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005384:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	69d9      	ldr	r1, [r3, #28]
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	021a      	lsls	r2, r3, #8
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	430a      	orrs	r2, r1
 8005398:	61da      	str	r2, [r3, #28]
      break;
 800539a:	e002      	b.n	80053a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	75fb      	strb	r3, [r7, #23]
      break;
 80053a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3718      	adds	r7, #24
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053be:	2300      	movs	r3, #0
 80053c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d101      	bne.n	80053d0 <HAL_TIM_ConfigClockSource+0x1c>
 80053cc:	2302      	movs	r3, #2
 80053ce:	e0b4      	b.n	800553a <HAL_TIM_ConfigClockSource+0x186>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2202      	movs	r2, #2
 80053dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80053ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005408:	d03e      	beq.n	8005488 <HAL_TIM_ConfigClockSource+0xd4>
 800540a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800540e:	f200 8087 	bhi.w	8005520 <HAL_TIM_ConfigClockSource+0x16c>
 8005412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005416:	f000 8086 	beq.w	8005526 <HAL_TIM_ConfigClockSource+0x172>
 800541a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800541e:	d87f      	bhi.n	8005520 <HAL_TIM_ConfigClockSource+0x16c>
 8005420:	2b70      	cmp	r3, #112	; 0x70
 8005422:	d01a      	beq.n	800545a <HAL_TIM_ConfigClockSource+0xa6>
 8005424:	2b70      	cmp	r3, #112	; 0x70
 8005426:	d87b      	bhi.n	8005520 <HAL_TIM_ConfigClockSource+0x16c>
 8005428:	2b60      	cmp	r3, #96	; 0x60
 800542a:	d050      	beq.n	80054ce <HAL_TIM_ConfigClockSource+0x11a>
 800542c:	2b60      	cmp	r3, #96	; 0x60
 800542e:	d877      	bhi.n	8005520 <HAL_TIM_ConfigClockSource+0x16c>
 8005430:	2b50      	cmp	r3, #80	; 0x50
 8005432:	d03c      	beq.n	80054ae <HAL_TIM_ConfigClockSource+0xfa>
 8005434:	2b50      	cmp	r3, #80	; 0x50
 8005436:	d873      	bhi.n	8005520 <HAL_TIM_ConfigClockSource+0x16c>
 8005438:	2b40      	cmp	r3, #64	; 0x40
 800543a:	d058      	beq.n	80054ee <HAL_TIM_ConfigClockSource+0x13a>
 800543c:	2b40      	cmp	r3, #64	; 0x40
 800543e:	d86f      	bhi.n	8005520 <HAL_TIM_ConfigClockSource+0x16c>
 8005440:	2b30      	cmp	r3, #48	; 0x30
 8005442:	d064      	beq.n	800550e <HAL_TIM_ConfigClockSource+0x15a>
 8005444:	2b30      	cmp	r3, #48	; 0x30
 8005446:	d86b      	bhi.n	8005520 <HAL_TIM_ConfigClockSource+0x16c>
 8005448:	2b20      	cmp	r3, #32
 800544a:	d060      	beq.n	800550e <HAL_TIM_ConfigClockSource+0x15a>
 800544c:	2b20      	cmp	r3, #32
 800544e:	d867      	bhi.n	8005520 <HAL_TIM_ConfigClockSource+0x16c>
 8005450:	2b00      	cmp	r3, #0
 8005452:	d05c      	beq.n	800550e <HAL_TIM_ConfigClockSource+0x15a>
 8005454:	2b10      	cmp	r3, #16
 8005456:	d05a      	beq.n	800550e <HAL_TIM_ConfigClockSource+0x15a>
 8005458:	e062      	b.n	8005520 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6818      	ldr	r0, [r3, #0]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	6899      	ldr	r1, [r3, #8]
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	685a      	ldr	r2, [r3, #4]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	f000 fb67 	bl	8005b3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800547c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	609a      	str	r2, [r3, #8]
      break;
 8005486:	e04f      	b.n	8005528 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6818      	ldr	r0, [r3, #0]
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	6899      	ldr	r1, [r3, #8]
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	685a      	ldr	r2, [r3, #4]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	f000 fb50 	bl	8005b3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	689a      	ldr	r2, [r3, #8]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054aa:	609a      	str	r2, [r3, #8]
      break;
 80054ac:	e03c      	b.n	8005528 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6818      	ldr	r0, [r3, #0]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	6859      	ldr	r1, [r3, #4]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	461a      	mov	r2, r3
 80054bc:	f000 fac4 	bl	8005a48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2150      	movs	r1, #80	; 0x50
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 fb1d 	bl	8005b06 <TIM_ITRx_SetConfig>
      break;
 80054cc:	e02c      	b.n	8005528 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6818      	ldr	r0, [r3, #0]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	6859      	ldr	r1, [r3, #4]
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	461a      	mov	r2, r3
 80054dc:	f000 fae3 	bl	8005aa6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2160      	movs	r1, #96	; 0x60
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 fb0d 	bl	8005b06 <TIM_ITRx_SetConfig>
      break;
 80054ec:	e01c      	b.n	8005528 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6818      	ldr	r0, [r3, #0]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	6859      	ldr	r1, [r3, #4]
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	461a      	mov	r2, r3
 80054fc:	f000 faa4 	bl	8005a48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2140      	movs	r1, #64	; 0x40
 8005506:	4618      	mov	r0, r3
 8005508:	f000 fafd 	bl	8005b06 <TIM_ITRx_SetConfig>
      break;
 800550c:	e00c      	b.n	8005528 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4619      	mov	r1, r3
 8005518:	4610      	mov	r0, r2
 800551a:	f000 faf4 	bl	8005b06 <TIM_ITRx_SetConfig>
      break;
 800551e:	e003      	b.n	8005528 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	73fb      	strb	r3, [r7, #15]
      break;
 8005524:	e000      	b.n	8005528 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005526:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005538:	7bfb      	ldrb	r3, [r7, #15]
}
 800553a:	4618      	mov	r0, r3
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005542:	b480      	push	{r7}
 8005544:	b083      	sub	sp, #12
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800554a:	bf00      	nop
 800554c:	370c      	adds	r7, #12
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005556:	b480      	push	{r7}
 8005558:	b083      	sub	sp, #12
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800555e:	bf00      	nop
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800556a:	b480      	push	{r7}
 800556c:	b083      	sub	sp, #12
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005572:	bf00      	nop
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800557e:	b480      	push	{r7}
 8005580:	b083      	sub	sp, #12
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005586:	bf00      	nop
 8005588:	370c      	adds	r7, #12
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr

08005592 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005592:	b480      	push	{r7}
 8005594:	b083      	sub	sp, #12
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800559a:	bf00      	nop
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
	...

080055a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a40      	ldr	r2, [pc, #256]	; (80056bc <TIM_Base_SetConfig+0x114>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d013      	beq.n	80055e8 <TIM_Base_SetConfig+0x40>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055c6:	d00f      	beq.n	80055e8 <TIM_Base_SetConfig+0x40>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a3d      	ldr	r2, [pc, #244]	; (80056c0 <TIM_Base_SetConfig+0x118>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d00b      	beq.n	80055e8 <TIM_Base_SetConfig+0x40>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a3c      	ldr	r2, [pc, #240]	; (80056c4 <TIM_Base_SetConfig+0x11c>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d007      	beq.n	80055e8 <TIM_Base_SetConfig+0x40>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a3b      	ldr	r2, [pc, #236]	; (80056c8 <TIM_Base_SetConfig+0x120>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d003      	beq.n	80055e8 <TIM_Base_SetConfig+0x40>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a3a      	ldr	r2, [pc, #232]	; (80056cc <TIM_Base_SetConfig+0x124>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d108      	bne.n	80055fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a2f      	ldr	r2, [pc, #188]	; (80056bc <TIM_Base_SetConfig+0x114>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d02b      	beq.n	800565a <TIM_Base_SetConfig+0xb2>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005608:	d027      	beq.n	800565a <TIM_Base_SetConfig+0xb2>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a2c      	ldr	r2, [pc, #176]	; (80056c0 <TIM_Base_SetConfig+0x118>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d023      	beq.n	800565a <TIM_Base_SetConfig+0xb2>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a2b      	ldr	r2, [pc, #172]	; (80056c4 <TIM_Base_SetConfig+0x11c>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d01f      	beq.n	800565a <TIM_Base_SetConfig+0xb2>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a2a      	ldr	r2, [pc, #168]	; (80056c8 <TIM_Base_SetConfig+0x120>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d01b      	beq.n	800565a <TIM_Base_SetConfig+0xb2>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a29      	ldr	r2, [pc, #164]	; (80056cc <TIM_Base_SetConfig+0x124>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d017      	beq.n	800565a <TIM_Base_SetConfig+0xb2>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a28      	ldr	r2, [pc, #160]	; (80056d0 <TIM_Base_SetConfig+0x128>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d013      	beq.n	800565a <TIM_Base_SetConfig+0xb2>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a27      	ldr	r2, [pc, #156]	; (80056d4 <TIM_Base_SetConfig+0x12c>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d00f      	beq.n	800565a <TIM_Base_SetConfig+0xb2>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a26      	ldr	r2, [pc, #152]	; (80056d8 <TIM_Base_SetConfig+0x130>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d00b      	beq.n	800565a <TIM_Base_SetConfig+0xb2>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a25      	ldr	r2, [pc, #148]	; (80056dc <TIM_Base_SetConfig+0x134>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d007      	beq.n	800565a <TIM_Base_SetConfig+0xb2>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a24      	ldr	r2, [pc, #144]	; (80056e0 <TIM_Base_SetConfig+0x138>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d003      	beq.n	800565a <TIM_Base_SetConfig+0xb2>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a23      	ldr	r2, [pc, #140]	; (80056e4 <TIM_Base_SetConfig+0x13c>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d108      	bne.n	800566c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005660:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	4313      	orrs	r3, r2
 800566a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	4313      	orrs	r3, r2
 8005678:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	689a      	ldr	r2, [r3, #8]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a0a      	ldr	r2, [pc, #40]	; (80056bc <TIM_Base_SetConfig+0x114>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d003      	beq.n	80056a0 <TIM_Base_SetConfig+0xf8>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a0c      	ldr	r2, [pc, #48]	; (80056cc <TIM_Base_SetConfig+0x124>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d103      	bne.n	80056a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	691a      	ldr	r2, [r3, #16]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	615a      	str	r2, [r3, #20]
}
 80056ae:	bf00      	nop
 80056b0:	3714      	adds	r7, #20
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	40010000 	.word	0x40010000
 80056c0:	40000400 	.word	0x40000400
 80056c4:	40000800 	.word	0x40000800
 80056c8:	40000c00 	.word	0x40000c00
 80056cc:	40010400 	.word	0x40010400
 80056d0:	40014000 	.word	0x40014000
 80056d4:	40014400 	.word	0x40014400
 80056d8:	40014800 	.word	0x40014800
 80056dc:	40001800 	.word	0x40001800
 80056e0:	40001c00 	.word	0x40001c00
 80056e4:	40002000 	.word	0x40002000

080056e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b087      	sub	sp, #28
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	f023 0201 	bic.w	r2, r3, #1
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f023 0303 	bic.w	r3, r3, #3
 800571e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	4313      	orrs	r3, r2
 8005728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	f023 0302 	bic.w	r3, r3, #2
 8005730:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	4313      	orrs	r3, r2
 800573a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a20      	ldr	r2, [pc, #128]	; (80057c0 <TIM_OC1_SetConfig+0xd8>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d003      	beq.n	800574c <TIM_OC1_SetConfig+0x64>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a1f      	ldr	r2, [pc, #124]	; (80057c4 <TIM_OC1_SetConfig+0xdc>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d10c      	bne.n	8005766 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	f023 0308 	bic.w	r3, r3, #8
 8005752:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	697a      	ldr	r2, [r7, #20]
 800575a:	4313      	orrs	r3, r2
 800575c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	f023 0304 	bic.w	r3, r3, #4
 8005764:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a15      	ldr	r2, [pc, #84]	; (80057c0 <TIM_OC1_SetConfig+0xd8>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d003      	beq.n	8005776 <TIM_OC1_SetConfig+0x8e>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a14      	ldr	r2, [pc, #80]	; (80057c4 <TIM_OC1_SetConfig+0xdc>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d111      	bne.n	800579a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800577c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005784:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	4313      	orrs	r3, r2
 800578e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	4313      	orrs	r3, r2
 8005798:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	685a      	ldr	r2, [r3, #4]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	621a      	str	r2, [r3, #32]
}
 80057b4:	bf00      	nop
 80057b6:	371c      	adds	r7, #28
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr
 80057c0:	40010000 	.word	0x40010000
 80057c4:	40010400 	.word	0x40010400

080057c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b087      	sub	sp, #28
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	f023 0210 	bic.w	r2, r3, #16
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	021b      	lsls	r3, r3, #8
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	4313      	orrs	r3, r2
 800580a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	f023 0320 	bic.w	r3, r3, #32
 8005812:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	011b      	lsls	r3, r3, #4
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	4313      	orrs	r3, r2
 800581e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a22      	ldr	r2, [pc, #136]	; (80058ac <TIM_OC2_SetConfig+0xe4>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d003      	beq.n	8005830 <TIM_OC2_SetConfig+0x68>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a21      	ldr	r2, [pc, #132]	; (80058b0 <TIM_OC2_SetConfig+0xe8>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d10d      	bne.n	800584c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005836:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	011b      	lsls	r3, r3, #4
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	4313      	orrs	r3, r2
 8005842:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800584a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a17      	ldr	r2, [pc, #92]	; (80058ac <TIM_OC2_SetConfig+0xe4>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d003      	beq.n	800585c <TIM_OC2_SetConfig+0x94>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a16      	ldr	r2, [pc, #88]	; (80058b0 <TIM_OC2_SetConfig+0xe8>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d113      	bne.n	8005884 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005862:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800586a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	695b      	ldr	r3, [r3, #20]
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	4313      	orrs	r3, r2
 8005876:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	4313      	orrs	r3, r2
 8005882:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	685a      	ldr	r2, [r3, #4]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	697a      	ldr	r2, [r7, #20]
 800589c:	621a      	str	r2, [r3, #32]
}
 800589e:	bf00      	nop
 80058a0:	371c      	adds	r7, #28
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	40010000 	.word	0x40010000
 80058b0:	40010400 	.word	0x40010400

080058b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b087      	sub	sp, #28
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a1b      	ldr	r3, [r3, #32]
 80058c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a1b      	ldr	r3, [r3, #32]
 80058ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	69db      	ldr	r3, [r3, #28]
 80058da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f023 0303 	bic.w	r3, r3, #3
 80058ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	021b      	lsls	r3, r3, #8
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	4313      	orrs	r3, r2
 8005908:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a21      	ldr	r2, [pc, #132]	; (8005994 <TIM_OC3_SetConfig+0xe0>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d003      	beq.n	800591a <TIM_OC3_SetConfig+0x66>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a20      	ldr	r2, [pc, #128]	; (8005998 <TIM_OC3_SetConfig+0xe4>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d10d      	bne.n	8005936 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005920:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	021b      	lsls	r3, r3, #8
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	4313      	orrs	r3, r2
 800592c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005934:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a16      	ldr	r2, [pc, #88]	; (8005994 <TIM_OC3_SetConfig+0xe0>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d003      	beq.n	8005946 <TIM_OC3_SetConfig+0x92>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a15      	ldr	r2, [pc, #84]	; (8005998 <TIM_OC3_SetConfig+0xe4>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d113      	bne.n	800596e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800594c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005954:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	011b      	lsls	r3, r3, #4
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	4313      	orrs	r3, r2
 8005960:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	011b      	lsls	r3, r3, #4
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	4313      	orrs	r3, r2
 800596c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	685a      	ldr	r2, [r3, #4]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	621a      	str	r2, [r3, #32]
}
 8005988:	bf00      	nop
 800598a:	371c      	adds	r7, #28
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr
 8005994:	40010000 	.word	0x40010000
 8005998:	40010400 	.word	0x40010400

0800599c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800599c:	b480      	push	{r7}
 800599e:	b087      	sub	sp, #28
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	021b      	lsls	r3, r3, #8
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	4313      	orrs	r3, r2
 80059de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	031b      	lsls	r3, r3, #12
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a12      	ldr	r2, [pc, #72]	; (8005a40 <TIM_OC4_SetConfig+0xa4>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d003      	beq.n	8005a04 <TIM_OC4_SetConfig+0x68>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a11      	ldr	r2, [pc, #68]	; (8005a44 <TIM_OC4_SetConfig+0xa8>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d109      	bne.n	8005a18 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	695b      	ldr	r3, [r3, #20]
 8005a10:	019b      	lsls	r3, r3, #6
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	685a      	ldr	r2, [r3, #4]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	621a      	str	r2, [r3, #32]
}
 8005a32:	bf00      	nop
 8005a34:	371c      	adds	r7, #28
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	40010000 	.word	0x40010000
 8005a44:	40010400 	.word	0x40010400

08005a48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b087      	sub	sp, #28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6a1b      	ldr	r3, [r3, #32]
 8005a58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	f023 0201 	bic.w	r2, r3, #1
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	011b      	lsls	r3, r3, #4
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	f023 030a 	bic.w	r3, r3, #10
 8005a84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	621a      	str	r2, [r3, #32]
}
 8005a9a:	bf00      	nop
 8005a9c:	371c      	adds	r7, #28
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr

08005aa6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	b087      	sub	sp, #28
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	60f8      	str	r0, [r7, #12]
 8005aae:	60b9      	str	r1, [r7, #8]
 8005ab0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	f023 0210 	bic.w	r2, r3, #16
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6a1b      	ldr	r3, [r3, #32]
 8005ac8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ad0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	031b      	lsls	r3, r3, #12
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ae2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	011b      	lsls	r3, r3, #4
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	697a      	ldr	r2, [r7, #20]
 8005af2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	621a      	str	r2, [r3, #32]
}
 8005afa:	bf00      	nop
 8005afc:	371c      	adds	r7, #28
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b06:	b480      	push	{r7}
 8005b08:	b085      	sub	sp, #20
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
 8005b0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b1e:	683a      	ldr	r2, [r7, #0]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	f043 0307 	orr.w	r3, r3, #7
 8005b28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	609a      	str	r2, [r3, #8]
}
 8005b30:	bf00      	nop
 8005b32:	3714      	adds	r7, #20
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b087      	sub	sp, #28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
 8005b48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	021a      	lsls	r2, r3, #8
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	431a      	orrs	r2, r3
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	609a      	str	r2, [r3, #8]
}
 8005b70:	bf00      	nop
 8005b72:	371c      	adds	r7, #28
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d101      	bne.n	8005b94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b90:	2302      	movs	r3, #2
 8005b92:	e05a      	b.n	8005c4a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a21      	ldr	r2, [pc, #132]	; (8005c58 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d022      	beq.n	8005c1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005be0:	d01d      	beq.n	8005c1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a1d      	ldr	r2, [pc, #116]	; (8005c5c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d018      	beq.n	8005c1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a1b      	ldr	r2, [pc, #108]	; (8005c60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d013      	beq.n	8005c1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a1a      	ldr	r2, [pc, #104]	; (8005c64 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d00e      	beq.n	8005c1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a18      	ldr	r2, [pc, #96]	; (8005c68 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d009      	beq.n	8005c1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a17      	ldr	r2, [pc, #92]	; (8005c6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d004      	beq.n	8005c1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a15      	ldr	r2, [pc, #84]	; (8005c70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d10c      	bne.n	8005c38 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3714      	adds	r7, #20
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	40010000 	.word	0x40010000
 8005c5c:	40000400 	.word	0x40000400
 8005c60:	40000800 	.word	0x40000800
 8005c64:	40000c00 	.word	0x40000c00
 8005c68:	40010400 	.word	0x40010400
 8005c6c:	40014000 	.word	0x40014000
 8005c70:	40001800 	.word	0x40001800

08005c74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d101      	bne.n	8005c90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	e03d      	b.n	8005d0c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	695b      	ldr	r3, [r3, #20]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	69db      	ldr	r3, [r3, #28]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3714      	adds	r7, #20
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d101      	bne.n	8005d52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e03f      	b.n	8005dd2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d106      	bne.n	8005d6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7fc f86c 	bl	8001e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2224      	movs	r2, #36	; 0x24
 8005d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68da      	ldr	r2, [r3, #12]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 f829 	bl	8005ddc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	691a      	ldr	r2, [r3, #16]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	695a      	ldr	r2, [r3, #20]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005da8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68da      	ldr	r2, [r3, #12]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005db8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2220      	movs	r2, #32
 8005dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2220      	movs	r2, #32
 8005dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3708      	adds	r7, #8
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
	...

08005ddc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ddc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005de0:	b0c0      	sub	sp, #256	; 0x100
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005df8:	68d9      	ldr	r1, [r3, #12]
 8005dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	ea40 0301 	orr.w	r3, r0, r1
 8005e04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e0a:	689a      	ldr	r2, [r3, #8]
 8005e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	431a      	orrs	r2, r3
 8005e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	431a      	orrs	r2, r3
 8005e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e20:	69db      	ldr	r3, [r3, #28]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005e34:	f021 010c 	bic.w	r1, r1, #12
 8005e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e42:	430b      	orrs	r3, r1
 8005e44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	695b      	ldr	r3, [r3, #20]
 8005e4e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e56:	6999      	ldr	r1, [r3, #24]
 8005e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	ea40 0301 	orr.w	r3, r0, r1
 8005e62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	4b8f      	ldr	r3, [pc, #572]	; (80060a8 <UART_SetConfig+0x2cc>)
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d005      	beq.n	8005e7c <UART_SetConfig+0xa0>
 8005e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	4b8d      	ldr	r3, [pc, #564]	; (80060ac <UART_SetConfig+0x2d0>)
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d104      	bne.n	8005e86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e7c:	f7fe ff1a 	bl	8004cb4 <HAL_RCC_GetPCLK2Freq>
 8005e80:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005e84:	e003      	b.n	8005e8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e86:	f7fe ff01 	bl	8004c8c <HAL_RCC_GetPCLK1Freq>
 8005e8a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e92:	69db      	ldr	r3, [r3, #28]
 8005e94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e98:	f040 810c 	bne.w	80060b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ea6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005eaa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005eae:	4622      	mov	r2, r4
 8005eb0:	462b      	mov	r3, r5
 8005eb2:	1891      	adds	r1, r2, r2
 8005eb4:	65b9      	str	r1, [r7, #88]	; 0x58
 8005eb6:	415b      	adcs	r3, r3
 8005eb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005eba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005ebe:	4621      	mov	r1, r4
 8005ec0:	eb12 0801 	adds.w	r8, r2, r1
 8005ec4:	4629      	mov	r1, r5
 8005ec6:	eb43 0901 	adc.w	r9, r3, r1
 8005eca:	f04f 0200 	mov.w	r2, #0
 8005ece:	f04f 0300 	mov.w	r3, #0
 8005ed2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ed6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005eda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ede:	4690      	mov	r8, r2
 8005ee0:	4699      	mov	r9, r3
 8005ee2:	4623      	mov	r3, r4
 8005ee4:	eb18 0303 	adds.w	r3, r8, r3
 8005ee8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005eec:	462b      	mov	r3, r5
 8005eee:	eb49 0303 	adc.w	r3, r9, r3
 8005ef2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f02:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005f06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	18db      	adds	r3, r3, r3
 8005f0e:	653b      	str	r3, [r7, #80]	; 0x50
 8005f10:	4613      	mov	r3, r2
 8005f12:	eb42 0303 	adc.w	r3, r2, r3
 8005f16:	657b      	str	r3, [r7, #84]	; 0x54
 8005f18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005f1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005f20:	f7fa f952 	bl	80001c8 <__aeabi_uldivmod>
 8005f24:	4602      	mov	r2, r0
 8005f26:	460b      	mov	r3, r1
 8005f28:	4b61      	ldr	r3, [pc, #388]	; (80060b0 <UART_SetConfig+0x2d4>)
 8005f2a:	fba3 2302 	umull	r2, r3, r3, r2
 8005f2e:	095b      	lsrs	r3, r3, #5
 8005f30:	011c      	lsls	r4, r3, #4
 8005f32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f36:	2200      	movs	r2, #0
 8005f38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f3c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005f40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005f44:	4642      	mov	r2, r8
 8005f46:	464b      	mov	r3, r9
 8005f48:	1891      	adds	r1, r2, r2
 8005f4a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005f4c:	415b      	adcs	r3, r3
 8005f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005f54:	4641      	mov	r1, r8
 8005f56:	eb12 0a01 	adds.w	sl, r2, r1
 8005f5a:	4649      	mov	r1, r9
 8005f5c:	eb43 0b01 	adc.w	fp, r3, r1
 8005f60:	f04f 0200 	mov.w	r2, #0
 8005f64:	f04f 0300 	mov.w	r3, #0
 8005f68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f74:	4692      	mov	sl, r2
 8005f76:	469b      	mov	fp, r3
 8005f78:	4643      	mov	r3, r8
 8005f7a:	eb1a 0303 	adds.w	r3, sl, r3
 8005f7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f82:	464b      	mov	r3, r9
 8005f84:	eb4b 0303 	adc.w	r3, fp, r3
 8005f88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f98:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005f9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	18db      	adds	r3, r3, r3
 8005fa4:	643b      	str	r3, [r7, #64]	; 0x40
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	eb42 0303 	adc.w	r3, r2, r3
 8005fac:	647b      	str	r3, [r7, #68]	; 0x44
 8005fae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005fb2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005fb6:	f7fa f907 	bl	80001c8 <__aeabi_uldivmod>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	4611      	mov	r1, r2
 8005fc0:	4b3b      	ldr	r3, [pc, #236]	; (80060b0 <UART_SetConfig+0x2d4>)
 8005fc2:	fba3 2301 	umull	r2, r3, r3, r1
 8005fc6:	095b      	lsrs	r3, r3, #5
 8005fc8:	2264      	movs	r2, #100	; 0x64
 8005fca:	fb02 f303 	mul.w	r3, r2, r3
 8005fce:	1acb      	subs	r3, r1, r3
 8005fd0:	00db      	lsls	r3, r3, #3
 8005fd2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005fd6:	4b36      	ldr	r3, [pc, #216]	; (80060b0 <UART_SetConfig+0x2d4>)
 8005fd8:	fba3 2302 	umull	r2, r3, r3, r2
 8005fdc:	095b      	lsrs	r3, r3, #5
 8005fde:	005b      	lsls	r3, r3, #1
 8005fe0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005fe4:	441c      	add	r4, r3
 8005fe6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fea:	2200      	movs	r2, #0
 8005fec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ff0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005ff4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005ff8:	4642      	mov	r2, r8
 8005ffa:	464b      	mov	r3, r9
 8005ffc:	1891      	adds	r1, r2, r2
 8005ffe:	63b9      	str	r1, [r7, #56]	; 0x38
 8006000:	415b      	adcs	r3, r3
 8006002:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006004:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006008:	4641      	mov	r1, r8
 800600a:	1851      	adds	r1, r2, r1
 800600c:	6339      	str	r1, [r7, #48]	; 0x30
 800600e:	4649      	mov	r1, r9
 8006010:	414b      	adcs	r3, r1
 8006012:	637b      	str	r3, [r7, #52]	; 0x34
 8006014:	f04f 0200 	mov.w	r2, #0
 8006018:	f04f 0300 	mov.w	r3, #0
 800601c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006020:	4659      	mov	r1, fp
 8006022:	00cb      	lsls	r3, r1, #3
 8006024:	4651      	mov	r1, sl
 8006026:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800602a:	4651      	mov	r1, sl
 800602c:	00ca      	lsls	r2, r1, #3
 800602e:	4610      	mov	r0, r2
 8006030:	4619      	mov	r1, r3
 8006032:	4603      	mov	r3, r0
 8006034:	4642      	mov	r2, r8
 8006036:	189b      	adds	r3, r3, r2
 8006038:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800603c:	464b      	mov	r3, r9
 800603e:	460a      	mov	r2, r1
 8006040:	eb42 0303 	adc.w	r3, r2, r3
 8006044:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006054:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006058:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800605c:	460b      	mov	r3, r1
 800605e:	18db      	adds	r3, r3, r3
 8006060:	62bb      	str	r3, [r7, #40]	; 0x28
 8006062:	4613      	mov	r3, r2
 8006064:	eb42 0303 	adc.w	r3, r2, r3
 8006068:	62fb      	str	r3, [r7, #44]	; 0x2c
 800606a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800606e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006072:	f7fa f8a9 	bl	80001c8 <__aeabi_uldivmod>
 8006076:	4602      	mov	r2, r0
 8006078:	460b      	mov	r3, r1
 800607a:	4b0d      	ldr	r3, [pc, #52]	; (80060b0 <UART_SetConfig+0x2d4>)
 800607c:	fba3 1302 	umull	r1, r3, r3, r2
 8006080:	095b      	lsrs	r3, r3, #5
 8006082:	2164      	movs	r1, #100	; 0x64
 8006084:	fb01 f303 	mul.w	r3, r1, r3
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	00db      	lsls	r3, r3, #3
 800608c:	3332      	adds	r3, #50	; 0x32
 800608e:	4a08      	ldr	r2, [pc, #32]	; (80060b0 <UART_SetConfig+0x2d4>)
 8006090:	fba2 2303 	umull	r2, r3, r2, r3
 8006094:	095b      	lsrs	r3, r3, #5
 8006096:	f003 0207 	and.w	r2, r3, #7
 800609a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4422      	add	r2, r4
 80060a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80060a4:	e105      	b.n	80062b2 <UART_SetConfig+0x4d6>
 80060a6:	bf00      	nop
 80060a8:	40011000 	.word	0x40011000
 80060ac:	40011400 	.word	0x40011400
 80060b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060b8:	2200      	movs	r2, #0
 80060ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80060be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80060c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80060c6:	4642      	mov	r2, r8
 80060c8:	464b      	mov	r3, r9
 80060ca:	1891      	adds	r1, r2, r2
 80060cc:	6239      	str	r1, [r7, #32]
 80060ce:	415b      	adcs	r3, r3
 80060d0:	627b      	str	r3, [r7, #36]	; 0x24
 80060d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80060d6:	4641      	mov	r1, r8
 80060d8:	1854      	adds	r4, r2, r1
 80060da:	4649      	mov	r1, r9
 80060dc:	eb43 0501 	adc.w	r5, r3, r1
 80060e0:	f04f 0200 	mov.w	r2, #0
 80060e4:	f04f 0300 	mov.w	r3, #0
 80060e8:	00eb      	lsls	r3, r5, #3
 80060ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060ee:	00e2      	lsls	r2, r4, #3
 80060f0:	4614      	mov	r4, r2
 80060f2:	461d      	mov	r5, r3
 80060f4:	4643      	mov	r3, r8
 80060f6:	18e3      	adds	r3, r4, r3
 80060f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80060fc:	464b      	mov	r3, r9
 80060fe:	eb45 0303 	adc.w	r3, r5, r3
 8006102:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006112:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006116:	f04f 0200 	mov.w	r2, #0
 800611a:	f04f 0300 	mov.w	r3, #0
 800611e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006122:	4629      	mov	r1, r5
 8006124:	008b      	lsls	r3, r1, #2
 8006126:	4621      	mov	r1, r4
 8006128:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800612c:	4621      	mov	r1, r4
 800612e:	008a      	lsls	r2, r1, #2
 8006130:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006134:	f7fa f848 	bl	80001c8 <__aeabi_uldivmod>
 8006138:	4602      	mov	r2, r0
 800613a:	460b      	mov	r3, r1
 800613c:	4b60      	ldr	r3, [pc, #384]	; (80062c0 <UART_SetConfig+0x4e4>)
 800613e:	fba3 2302 	umull	r2, r3, r3, r2
 8006142:	095b      	lsrs	r3, r3, #5
 8006144:	011c      	lsls	r4, r3, #4
 8006146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800614a:	2200      	movs	r2, #0
 800614c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006150:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006154:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006158:	4642      	mov	r2, r8
 800615a:	464b      	mov	r3, r9
 800615c:	1891      	adds	r1, r2, r2
 800615e:	61b9      	str	r1, [r7, #24]
 8006160:	415b      	adcs	r3, r3
 8006162:	61fb      	str	r3, [r7, #28]
 8006164:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006168:	4641      	mov	r1, r8
 800616a:	1851      	adds	r1, r2, r1
 800616c:	6139      	str	r1, [r7, #16]
 800616e:	4649      	mov	r1, r9
 8006170:	414b      	adcs	r3, r1
 8006172:	617b      	str	r3, [r7, #20]
 8006174:	f04f 0200 	mov.w	r2, #0
 8006178:	f04f 0300 	mov.w	r3, #0
 800617c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006180:	4659      	mov	r1, fp
 8006182:	00cb      	lsls	r3, r1, #3
 8006184:	4651      	mov	r1, sl
 8006186:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800618a:	4651      	mov	r1, sl
 800618c:	00ca      	lsls	r2, r1, #3
 800618e:	4610      	mov	r0, r2
 8006190:	4619      	mov	r1, r3
 8006192:	4603      	mov	r3, r0
 8006194:	4642      	mov	r2, r8
 8006196:	189b      	adds	r3, r3, r2
 8006198:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800619c:	464b      	mov	r3, r9
 800619e:	460a      	mov	r2, r1
 80061a0:	eb42 0303 	adc.w	r3, r2, r3
 80061a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80061a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80061b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80061b4:	f04f 0200 	mov.w	r2, #0
 80061b8:	f04f 0300 	mov.w	r3, #0
 80061bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80061c0:	4649      	mov	r1, r9
 80061c2:	008b      	lsls	r3, r1, #2
 80061c4:	4641      	mov	r1, r8
 80061c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061ca:	4641      	mov	r1, r8
 80061cc:	008a      	lsls	r2, r1, #2
 80061ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80061d2:	f7f9 fff9 	bl	80001c8 <__aeabi_uldivmod>
 80061d6:	4602      	mov	r2, r0
 80061d8:	460b      	mov	r3, r1
 80061da:	4b39      	ldr	r3, [pc, #228]	; (80062c0 <UART_SetConfig+0x4e4>)
 80061dc:	fba3 1302 	umull	r1, r3, r3, r2
 80061e0:	095b      	lsrs	r3, r3, #5
 80061e2:	2164      	movs	r1, #100	; 0x64
 80061e4:	fb01 f303 	mul.w	r3, r1, r3
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	011b      	lsls	r3, r3, #4
 80061ec:	3332      	adds	r3, #50	; 0x32
 80061ee:	4a34      	ldr	r2, [pc, #208]	; (80062c0 <UART_SetConfig+0x4e4>)
 80061f0:	fba2 2303 	umull	r2, r3, r2, r3
 80061f4:	095b      	lsrs	r3, r3, #5
 80061f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061fa:	441c      	add	r4, r3
 80061fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006200:	2200      	movs	r2, #0
 8006202:	673b      	str	r3, [r7, #112]	; 0x70
 8006204:	677a      	str	r2, [r7, #116]	; 0x74
 8006206:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800620a:	4642      	mov	r2, r8
 800620c:	464b      	mov	r3, r9
 800620e:	1891      	adds	r1, r2, r2
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	415b      	adcs	r3, r3
 8006214:	60fb      	str	r3, [r7, #12]
 8006216:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800621a:	4641      	mov	r1, r8
 800621c:	1851      	adds	r1, r2, r1
 800621e:	6039      	str	r1, [r7, #0]
 8006220:	4649      	mov	r1, r9
 8006222:	414b      	adcs	r3, r1
 8006224:	607b      	str	r3, [r7, #4]
 8006226:	f04f 0200 	mov.w	r2, #0
 800622a:	f04f 0300 	mov.w	r3, #0
 800622e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006232:	4659      	mov	r1, fp
 8006234:	00cb      	lsls	r3, r1, #3
 8006236:	4651      	mov	r1, sl
 8006238:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800623c:	4651      	mov	r1, sl
 800623e:	00ca      	lsls	r2, r1, #3
 8006240:	4610      	mov	r0, r2
 8006242:	4619      	mov	r1, r3
 8006244:	4603      	mov	r3, r0
 8006246:	4642      	mov	r2, r8
 8006248:	189b      	adds	r3, r3, r2
 800624a:	66bb      	str	r3, [r7, #104]	; 0x68
 800624c:	464b      	mov	r3, r9
 800624e:	460a      	mov	r2, r1
 8006250:	eb42 0303 	adc.w	r3, r2, r3
 8006254:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	663b      	str	r3, [r7, #96]	; 0x60
 8006260:	667a      	str	r2, [r7, #100]	; 0x64
 8006262:	f04f 0200 	mov.w	r2, #0
 8006266:	f04f 0300 	mov.w	r3, #0
 800626a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800626e:	4649      	mov	r1, r9
 8006270:	008b      	lsls	r3, r1, #2
 8006272:	4641      	mov	r1, r8
 8006274:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006278:	4641      	mov	r1, r8
 800627a:	008a      	lsls	r2, r1, #2
 800627c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006280:	f7f9 ffa2 	bl	80001c8 <__aeabi_uldivmod>
 8006284:	4602      	mov	r2, r0
 8006286:	460b      	mov	r3, r1
 8006288:	4b0d      	ldr	r3, [pc, #52]	; (80062c0 <UART_SetConfig+0x4e4>)
 800628a:	fba3 1302 	umull	r1, r3, r3, r2
 800628e:	095b      	lsrs	r3, r3, #5
 8006290:	2164      	movs	r1, #100	; 0x64
 8006292:	fb01 f303 	mul.w	r3, r1, r3
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	011b      	lsls	r3, r3, #4
 800629a:	3332      	adds	r3, #50	; 0x32
 800629c:	4a08      	ldr	r2, [pc, #32]	; (80062c0 <UART_SetConfig+0x4e4>)
 800629e:	fba2 2303 	umull	r2, r3, r2, r3
 80062a2:	095b      	lsrs	r3, r3, #5
 80062a4:	f003 020f 	and.w	r2, r3, #15
 80062a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4422      	add	r2, r4
 80062b0:	609a      	str	r2, [r3, #8]
}
 80062b2:	bf00      	nop
 80062b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80062b8:	46bd      	mov	sp, r7
 80062ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062be:	bf00      	nop
 80062c0:	51eb851f 	.word	0x51eb851f

080062c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80062c4:	b084      	sub	sp, #16
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b084      	sub	sp, #16
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
 80062ce:	f107 001c 	add.w	r0, r7, #28
 80062d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80062d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d122      	bne.n	8006322 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80062f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006306:	2b01      	cmp	r3, #1
 8006308:	d105      	bne.n	8006316 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f001 fbee 	bl	8007af8 <USB_CoreReset>
 800631c:	4603      	mov	r3, r0
 800631e:	73fb      	strb	r3, [r7, #15]
 8006320:	e01a      	b.n	8006358 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f001 fbe2 	bl	8007af8 <USB_CoreReset>
 8006334:	4603      	mov	r3, r0
 8006336:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800633a:	2b00      	cmp	r3, #0
 800633c:	d106      	bne.n	800634c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006342:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	639a      	str	r2, [r3, #56]	; 0x38
 800634a:	e005      	b.n	8006358 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006350:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635a:	2b01      	cmp	r3, #1
 800635c:	d10b      	bne.n	8006376 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	f043 0206 	orr.w	r2, r3, #6
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f043 0220 	orr.w	r2, r3, #32
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006376:	7bfb      	ldrb	r3, [r7, #15]
}
 8006378:	4618      	mov	r0, r3
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006382:	b004      	add	sp, #16
 8006384:	4770      	bx	lr
	...

08006388 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006388:	b480      	push	{r7}
 800638a:	b087      	sub	sp, #28
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	4613      	mov	r3, r2
 8006394:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006396:	79fb      	ldrb	r3, [r7, #7]
 8006398:	2b02      	cmp	r3, #2
 800639a:	d165      	bne.n	8006468 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	4a41      	ldr	r2, [pc, #260]	; (80064a4 <USB_SetTurnaroundTime+0x11c>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d906      	bls.n	80063b2 <USB_SetTurnaroundTime+0x2a>
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	4a40      	ldr	r2, [pc, #256]	; (80064a8 <USB_SetTurnaroundTime+0x120>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d202      	bcs.n	80063b2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80063ac:	230f      	movs	r3, #15
 80063ae:	617b      	str	r3, [r7, #20]
 80063b0:	e062      	b.n	8006478 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	4a3c      	ldr	r2, [pc, #240]	; (80064a8 <USB_SetTurnaroundTime+0x120>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d306      	bcc.n	80063c8 <USB_SetTurnaroundTime+0x40>
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	4a3b      	ldr	r2, [pc, #236]	; (80064ac <USB_SetTurnaroundTime+0x124>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d202      	bcs.n	80063c8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80063c2:	230e      	movs	r3, #14
 80063c4:	617b      	str	r3, [r7, #20]
 80063c6:	e057      	b.n	8006478 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	4a38      	ldr	r2, [pc, #224]	; (80064ac <USB_SetTurnaroundTime+0x124>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d306      	bcc.n	80063de <USB_SetTurnaroundTime+0x56>
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	4a37      	ldr	r2, [pc, #220]	; (80064b0 <USB_SetTurnaroundTime+0x128>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d202      	bcs.n	80063de <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80063d8:	230d      	movs	r3, #13
 80063da:	617b      	str	r3, [r7, #20]
 80063dc:	e04c      	b.n	8006478 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	4a33      	ldr	r2, [pc, #204]	; (80064b0 <USB_SetTurnaroundTime+0x128>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d306      	bcc.n	80063f4 <USB_SetTurnaroundTime+0x6c>
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	4a32      	ldr	r2, [pc, #200]	; (80064b4 <USB_SetTurnaroundTime+0x12c>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d802      	bhi.n	80063f4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80063ee:	230c      	movs	r3, #12
 80063f0:	617b      	str	r3, [r7, #20]
 80063f2:	e041      	b.n	8006478 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	4a2f      	ldr	r2, [pc, #188]	; (80064b4 <USB_SetTurnaroundTime+0x12c>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d906      	bls.n	800640a <USB_SetTurnaroundTime+0x82>
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	4a2e      	ldr	r2, [pc, #184]	; (80064b8 <USB_SetTurnaroundTime+0x130>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d802      	bhi.n	800640a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006404:	230b      	movs	r3, #11
 8006406:	617b      	str	r3, [r7, #20]
 8006408:	e036      	b.n	8006478 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	4a2a      	ldr	r2, [pc, #168]	; (80064b8 <USB_SetTurnaroundTime+0x130>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d906      	bls.n	8006420 <USB_SetTurnaroundTime+0x98>
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	4a29      	ldr	r2, [pc, #164]	; (80064bc <USB_SetTurnaroundTime+0x134>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d802      	bhi.n	8006420 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800641a:	230a      	movs	r3, #10
 800641c:	617b      	str	r3, [r7, #20]
 800641e:	e02b      	b.n	8006478 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	4a26      	ldr	r2, [pc, #152]	; (80064bc <USB_SetTurnaroundTime+0x134>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d906      	bls.n	8006436 <USB_SetTurnaroundTime+0xae>
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	4a25      	ldr	r2, [pc, #148]	; (80064c0 <USB_SetTurnaroundTime+0x138>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d202      	bcs.n	8006436 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006430:	2309      	movs	r3, #9
 8006432:	617b      	str	r3, [r7, #20]
 8006434:	e020      	b.n	8006478 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	4a21      	ldr	r2, [pc, #132]	; (80064c0 <USB_SetTurnaroundTime+0x138>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d306      	bcc.n	800644c <USB_SetTurnaroundTime+0xc4>
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	4a20      	ldr	r2, [pc, #128]	; (80064c4 <USB_SetTurnaroundTime+0x13c>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d802      	bhi.n	800644c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006446:	2308      	movs	r3, #8
 8006448:	617b      	str	r3, [r7, #20]
 800644a:	e015      	b.n	8006478 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	4a1d      	ldr	r2, [pc, #116]	; (80064c4 <USB_SetTurnaroundTime+0x13c>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d906      	bls.n	8006462 <USB_SetTurnaroundTime+0xda>
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	4a1c      	ldr	r2, [pc, #112]	; (80064c8 <USB_SetTurnaroundTime+0x140>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d202      	bcs.n	8006462 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800645c:	2307      	movs	r3, #7
 800645e:	617b      	str	r3, [r7, #20]
 8006460:	e00a      	b.n	8006478 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006462:	2306      	movs	r3, #6
 8006464:	617b      	str	r3, [r7, #20]
 8006466:	e007      	b.n	8006478 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006468:	79fb      	ldrb	r3, [r7, #7]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d102      	bne.n	8006474 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800646e:	2309      	movs	r3, #9
 8006470:	617b      	str	r3, [r7, #20]
 8006472:	e001      	b.n	8006478 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006474:	2309      	movs	r3, #9
 8006476:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	68da      	ldr	r2, [r3, #12]
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	029b      	lsls	r3, r3, #10
 800648c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006490:	431a      	orrs	r2, r3
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	371c      	adds	r7, #28
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	00d8acbf 	.word	0x00d8acbf
 80064a8:	00e4e1c0 	.word	0x00e4e1c0
 80064ac:	00f42400 	.word	0x00f42400
 80064b0:	01067380 	.word	0x01067380
 80064b4:	011a499f 	.word	0x011a499f
 80064b8:	01312cff 	.word	0x01312cff
 80064bc:	014ca43f 	.word	0x014ca43f
 80064c0:	016e3600 	.word	0x016e3600
 80064c4:	01a6ab1f 	.word	0x01a6ab1f
 80064c8:	01e84800 	.word	0x01e84800

080064cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	f043 0201 	orr.w	r2, r3, #1
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	370c      	adds	r7, #12
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr

080064ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064ee:	b480      	push	{r7}
 80064f0:	b083      	sub	sp, #12
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	f023 0201 	bic.w	r2, r3, #1
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	460b      	mov	r3, r1
 800651a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800651c:	2300      	movs	r3, #0
 800651e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800652c:	78fb      	ldrb	r3, [r7, #3]
 800652e:	2b01      	cmp	r3, #1
 8006530:	d115      	bne.n	800655e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800653e:	2001      	movs	r0, #1
 8006540:	f7fb fe02 	bl	8002148 <HAL_Delay>
      ms++;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	3301      	adds	r3, #1
 8006548:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f001 fa45 	bl	80079da <USB_GetMode>
 8006550:	4603      	mov	r3, r0
 8006552:	2b01      	cmp	r3, #1
 8006554:	d01e      	beq.n	8006594 <USB_SetCurrentMode+0x84>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2b31      	cmp	r3, #49	; 0x31
 800655a:	d9f0      	bls.n	800653e <USB_SetCurrentMode+0x2e>
 800655c:	e01a      	b.n	8006594 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800655e:	78fb      	ldrb	r3, [r7, #3]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d115      	bne.n	8006590 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006570:	2001      	movs	r0, #1
 8006572:	f7fb fde9 	bl	8002148 <HAL_Delay>
      ms++;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	3301      	adds	r3, #1
 800657a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f001 fa2c 	bl	80079da <USB_GetMode>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d005      	beq.n	8006594 <USB_SetCurrentMode+0x84>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2b31      	cmp	r3, #49	; 0x31
 800658c:	d9f0      	bls.n	8006570 <USB_SetCurrentMode+0x60>
 800658e:	e001      	b.n	8006594 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	e005      	b.n	80065a0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2b32      	cmp	r3, #50	; 0x32
 8006598:	d101      	bne.n	800659e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e000      	b.n	80065a0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3710      	adds	r7, #16
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065a8:	b084      	sub	sp, #16
 80065aa:	b580      	push	{r7, lr}
 80065ac:	b086      	sub	sp, #24
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
 80065b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80065b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80065ba:	2300      	movs	r3, #0
 80065bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80065c2:	2300      	movs	r3, #0
 80065c4:	613b      	str	r3, [r7, #16]
 80065c6:	e009      	b.n	80065dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	3340      	adds	r3, #64	; 0x40
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	4413      	add	r3, r2
 80065d2:	2200      	movs	r2, #0
 80065d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	3301      	adds	r3, #1
 80065da:	613b      	str	r3, [r7, #16]
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	2b0e      	cmp	r3, #14
 80065e0:	d9f2      	bls.n	80065c8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80065e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d11c      	bne.n	8006622 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065f6:	f043 0302 	orr.w	r3, r3, #2
 80065fa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006600:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006618:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	639a      	str	r2, [r3, #56]	; 0x38
 8006620:	e00b      	b.n	800663a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006626:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006632:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006640:	461a      	mov	r2, r3
 8006642:	2300      	movs	r3, #0
 8006644:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800664c:	4619      	mov	r1, r3
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006654:	461a      	mov	r2, r3
 8006656:	680b      	ldr	r3, [r1, #0]
 8006658:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800665a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665c:	2b01      	cmp	r3, #1
 800665e:	d10c      	bne.n	800667a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006662:	2b00      	cmp	r3, #0
 8006664:	d104      	bne.n	8006670 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006666:	2100      	movs	r1, #0
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 f965 	bl	8006938 <USB_SetDevSpeed>
 800666e:	e008      	b.n	8006682 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006670:	2101      	movs	r1, #1
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f960 	bl	8006938 <USB_SetDevSpeed>
 8006678:	e003      	b.n	8006682 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800667a:	2103      	movs	r1, #3
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 f95b 	bl	8006938 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006682:	2110      	movs	r1, #16
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 f8f3 	bl	8006870 <USB_FlushTxFifo>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d001      	beq.n	8006694 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 f91f 	bl	80068d8 <USB_FlushRxFifo>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d001      	beq.n	80066a4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066aa:	461a      	mov	r2, r3
 80066ac:	2300      	movs	r3, #0
 80066ae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066b6:	461a      	mov	r2, r3
 80066b8:	2300      	movs	r3, #0
 80066ba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066c2:	461a      	mov	r2, r3
 80066c4:	2300      	movs	r3, #0
 80066c6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066c8:	2300      	movs	r3, #0
 80066ca:	613b      	str	r3, [r7, #16]
 80066cc:	e043      	b.n	8006756 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	015a      	lsls	r2, r3, #5
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	4413      	add	r3, r2
 80066d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066e4:	d118      	bne.n	8006718 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d10a      	bne.n	8006702 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	015a      	lsls	r2, r3, #5
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	4413      	add	r3, r2
 80066f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f8:	461a      	mov	r2, r3
 80066fa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80066fe:	6013      	str	r3, [r2, #0]
 8006700:	e013      	b.n	800672a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	015a      	lsls	r2, r3, #5
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	4413      	add	r3, r2
 800670a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800670e:	461a      	mov	r2, r3
 8006710:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006714:	6013      	str	r3, [r2, #0]
 8006716:	e008      	b.n	800672a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	015a      	lsls	r2, r3, #5
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	4413      	add	r3, r2
 8006720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006724:	461a      	mov	r2, r3
 8006726:	2300      	movs	r3, #0
 8006728:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	015a      	lsls	r2, r3, #5
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	4413      	add	r3, r2
 8006732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006736:	461a      	mov	r2, r3
 8006738:	2300      	movs	r3, #0
 800673a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	015a      	lsls	r2, r3, #5
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	4413      	add	r3, r2
 8006744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006748:	461a      	mov	r2, r3
 800674a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800674e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	3301      	adds	r3, #1
 8006754:	613b      	str	r3, [r7, #16]
 8006756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006758:	693a      	ldr	r2, [r7, #16]
 800675a:	429a      	cmp	r2, r3
 800675c:	d3b7      	bcc.n	80066ce <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800675e:	2300      	movs	r3, #0
 8006760:	613b      	str	r3, [r7, #16]
 8006762:	e043      	b.n	80067ec <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	015a      	lsls	r2, r3, #5
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	4413      	add	r3, r2
 800676c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006776:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800677a:	d118      	bne.n	80067ae <USB_DevInit+0x206>
    {
      if (i == 0U)
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10a      	bne.n	8006798 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	015a      	lsls	r2, r3, #5
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	4413      	add	r3, r2
 800678a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800678e:	461a      	mov	r2, r3
 8006790:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006794:	6013      	str	r3, [r2, #0]
 8006796:	e013      	b.n	80067c0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	015a      	lsls	r2, r3, #5
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	4413      	add	r3, r2
 80067a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a4:	461a      	mov	r2, r3
 80067a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80067aa:	6013      	str	r3, [r2, #0]
 80067ac:	e008      	b.n	80067c0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	015a      	lsls	r2, r3, #5
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	4413      	add	r3, r2
 80067b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ba:	461a      	mov	r2, r3
 80067bc:	2300      	movs	r3, #0
 80067be:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	015a      	lsls	r2, r3, #5
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	4413      	add	r3, r2
 80067c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067cc:	461a      	mov	r2, r3
 80067ce:	2300      	movs	r3, #0
 80067d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	015a      	lsls	r2, r3, #5
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	4413      	add	r3, r2
 80067da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067de:	461a      	mov	r2, r3
 80067e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80067e4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	3301      	adds	r3, #1
 80067ea:	613b      	str	r3, [r7, #16]
 80067ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d3b7      	bcc.n	8006764 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006802:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006806:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006814:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006818:	2b00      	cmp	r3, #0
 800681a:	d105      	bne.n	8006828 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	699b      	ldr	r3, [r3, #24]
 8006820:	f043 0210 	orr.w	r2, r3, #16
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	699a      	ldr	r2, [r3, #24]
 800682c:	4b0f      	ldr	r3, [pc, #60]	; (800686c <USB_DevInit+0x2c4>)
 800682e:	4313      	orrs	r3, r2
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006836:	2b00      	cmp	r3, #0
 8006838:	d005      	beq.n	8006846 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	699b      	ldr	r3, [r3, #24]
 800683e:	f043 0208 	orr.w	r2, r3, #8
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006848:	2b01      	cmp	r3, #1
 800684a:	d107      	bne.n	800685c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006854:	f043 0304 	orr.w	r3, r3, #4
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800685c:	7dfb      	ldrb	r3, [r7, #23]
}
 800685e:	4618      	mov	r0, r3
 8006860:	3718      	adds	r7, #24
 8006862:	46bd      	mov	sp, r7
 8006864:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006868:	b004      	add	sp, #16
 800686a:	4770      	bx	lr
 800686c:	803c3800 	.word	0x803c3800

08006870 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006870:	b480      	push	{r7}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800687a:	2300      	movs	r3, #0
 800687c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	3301      	adds	r3, #1
 8006882:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	4a13      	ldr	r2, [pc, #76]	; (80068d4 <USB_FlushTxFifo+0x64>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d901      	bls.n	8006890 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800688c:	2303      	movs	r3, #3
 800688e:	e01b      	b.n	80068c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	2b00      	cmp	r3, #0
 8006896:	daf2      	bge.n	800687e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006898:	2300      	movs	r3, #0
 800689a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	019b      	lsls	r3, r3, #6
 80068a0:	f043 0220 	orr.w	r2, r3, #32
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	3301      	adds	r3, #1
 80068ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	4a08      	ldr	r2, [pc, #32]	; (80068d4 <USB_FlushTxFifo+0x64>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d901      	bls.n	80068ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e006      	b.n	80068c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	f003 0320 	and.w	r3, r3, #32
 80068c2:	2b20      	cmp	r3, #32
 80068c4:	d0f0      	beq.n	80068a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3714      	adds	r7, #20
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr
 80068d4:	00030d40 	.word	0x00030d40

080068d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068e0:	2300      	movs	r3, #0
 80068e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	3301      	adds	r3, #1
 80068e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	4a11      	ldr	r2, [pc, #68]	; (8006934 <USB_FlushRxFifo+0x5c>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d901      	bls.n	80068f6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80068f2:	2303      	movs	r3, #3
 80068f4:	e018      	b.n	8006928 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	daf2      	bge.n	80068e4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80068fe:	2300      	movs	r3, #0
 8006900:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2210      	movs	r2, #16
 8006906:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	3301      	adds	r3, #1
 800690c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	4a08      	ldr	r2, [pc, #32]	; (8006934 <USB_FlushRxFifo+0x5c>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d901      	bls.n	800691a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	e006      	b.n	8006928 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	f003 0310 	and.w	r3, r3, #16
 8006922:	2b10      	cmp	r3, #16
 8006924:	d0f0      	beq.n	8006908 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3714      	adds	r7, #20
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr
 8006934:	00030d40 	.word	0x00030d40

08006938 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	460b      	mov	r3, r1
 8006942:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	78fb      	ldrb	r3, [r7, #3]
 8006952:	68f9      	ldr	r1, [r7, #12]
 8006954:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006958:	4313      	orrs	r3, r2
 800695a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3714      	adds	r7, #20
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr

0800696a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800696a:	b480      	push	{r7}
 800696c:	b087      	sub	sp, #28
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	f003 0306 	and.w	r3, r3, #6
 8006982:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d102      	bne.n	8006990 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800698a:	2300      	movs	r3, #0
 800698c:	75fb      	strb	r3, [r7, #23]
 800698e:	e00a      	b.n	80069a6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2b02      	cmp	r3, #2
 8006994:	d002      	beq.n	800699c <USB_GetDevSpeed+0x32>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2b06      	cmp	r3, #6
 800699a:	d102      	bne.n	80069a2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800699c:	2302      	movs	r3, #2
 800699e:	75fb      	strb	r3, [r7, #23]
 80069a0:	e001      	b.n	80069a6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80069a2:	230f      	movs	r3, #15
 80069a4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80069a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	371c      	adds	r7, #28
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	785b      	ldrb	r3, [r3, #1]
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d13a      	bne.n	8006a46 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069d6:	69da      	ldr	r2, [r3, #28]
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	f003 030f 	and.w	r3, r3, #15
 80069e0:	2101      	movs	r1, #1
 80069e2:	fa01 f303 	lsl.w	r3, r1, r3
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	68f9      	ldr	r1, [r7, #12]
 80069ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069ee:	4313      	orrs	r3, r2
 80069f0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	015a      	lsls	r2, r3, #5
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	4413      	add	r3, r2
 80069fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d155      	bne.n	8006ab4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	015a      	lsls	r2, r3, #5
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	4413      	add	r3, r2
 8006a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	791b      	ldrb	r3, [r3, #4]
 8006a22:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a24:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	059b      	lsls	r3, r3, #22
 8006a2a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	68ba      	ldr	r2, [r7, #8]
 8006a30:	0151      	lsls	r1, r2, #5
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	440a      	add	r2, r1
 8006a36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a42:	6013      	str	r3, [r2, #0]
 8006a44:	e036      	b.n	8006ab4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a4c:	69da      	ldr	r2, [r3, #28]
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	f003 030f 	and.w	r3, r3, #15
 8006a56:	2101      	movs	r1, #1
 8006a58:	fa01 f303 	lsl.w	r3, r1, r3
 8006a5c:	041b      	lsls	r3, r3, #16
 8006a5e:	68f9      	ldr	r1, [r7, #12]
 8006a60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a64:	4313      	orrs	r3, r2
 8006a66:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	015a      	lsls	r2, r3, #5
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	4413      	add	r3, r2
 8006a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d11a      	bne.n	8006ab4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	015a      	lsls	r2, r3, #5
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	4413      	add	r3, r2
 8006a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	791b      	ldrb	r3, [r3, #4]
 8006a98:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006a9a:	430b      	orrs	r3, r1
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	68ba      	ldr	r2, [r7, #8]
 8006aa0:	0151      	lsls	r1, r2, #5
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	440a      	add	r2, r1
 8006aa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006aae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ab2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3714      	adds	r7, #20
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr
	...

08006ac4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b085      	sub	sp, #20
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	785b      	ldrb	r3, [r3, #1]
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d161      	bne.n	8006ba4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	015a      	lsls	r2, r3, #5
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006af2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006af6:	d11f      	bne.n	8006b38 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	015a      	lsls	r2, r3, #5
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	4413      	add	r3, r2
 8006b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68ba      	ldr	r2, [r7, #8]
 8006b08:	0151      	lsls	r1, r2, #5
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	440a      	add	r2, r1
 8006b0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b12:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006b16:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	015a      	lsls	r2, r3, #5
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	4413      	add	r3, r2
 8006b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68ba      	ldr	r2, [r7, #8]
 8006b28:	0151      	lsls	r1, r2, #5
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	440a      	add	r2, r1
 8006b2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b36:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	f003 030f 	and.w	r3, r3, #15
 8006b48:	2101      	movs	r1, #1
 8006b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	43db      	mvns	r3, r3
 8006b52:	68f9      	ldr	r1, [r7, #12]
 8006b54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b58:	4013      	ands	r3, r2
 8006b5a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b62:	69da      	ldr	r2, [r3, #28]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	f003 030f 	and.w	r3, r3, #15
 8006b6c:	2101      	movs	r1, #1
 8006b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	43db      	mvns	r3, r3
 8006b76:	68f9      	ldr	r1, [r7, #12]
 8006b78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	015a      	lsls	r2, r3, #5
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	4413      	add	r3, r2
 8006b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	0159      	lsls	r1, r3, #5
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	440b      	add	r3, r1
 8006b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	4b35      	ldr	r3, [pc, #212]	; (8006c74 <USB_DeactivateEndpoint+0x1b0>)
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	600b      	str	r3, [r1, #0]
 8006ba2:	e060      	b.n	8006c66 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	015a      	lsls	r2, r3, #5
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	4413      	add	r3, r2
 8006bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bba:	d11f      	bne.n	8006bfc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	015a      	lsls	r2, r3, #5
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68ba      	ldr	r2, [r7, #8]
 8006bcc:	0151      	lsls	r1, r2, #5
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	440a      	add	r2, r1
 8006bd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bd6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006bda:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	015a      	lsls	r2, r3, #5
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	4413      	add	r3, r2
 8006be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68ba      	ldr	r2, [r7, #8]
 8006bec:	0151      	lsls	r1, r2, #5
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	440a      	add	r2, r1
 8006bf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bf6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bfa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	f003 030f 	and.w	r3, r3, #15
 8006c0c:	2101      	movs	r1, #1
 8006c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8006c12:	041b      	lsls	r3, r3, #16
 8006c14:	43db      	mvns	r3, r3
 8006c16:	68f9      	ldr	r1, [r7, #12]
 8006c18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c26:	69da      	ldr	r2, [r3, #28]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	f003 030f 	and.w	r3, r3, #15
 8006c30:	2101      	movs	r1, #1
 8006c32:	fa01 f303 	lsl.w	r3, r1, r3
 8006c36:	041b      	lsls	r3, r3, #16
 8006c38:	43db      	mvns	r3, r3
 8006c3a:	68f9      	ldr	r1, [r7, #12]
 8006c3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c40:	4013      	ands	r3, r2
 8006c42:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	015a      	lsls	r2, r3, #5
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	0159      	lsls	r1, r3, #5
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	440b      	add	r3, r1
 8006c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c5e:	4619      	mov	r1, r3
 8006c60:	4b05      	ldr	r3, [pc, #20]	; (8006c78 <USB_DeactivateEndpoint+0x1b4>)
 8006c62:	4013      	ands	r3, r2
 8006c64:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3714      	adds	r7, #20
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr
 8006c74:	ec337800 	.word	0xec337800
 8006c78:	eff37800 	.word	0xeff37800

08006c7c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b08a      	sub	sp, #40	; 0x28
 8006c80:	af02      	add	r7, sp, #8
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	4613      	mov	r3, r2
 8006c88:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	785b      	ldrb	r3, [r3, #1]
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	f040 815c 	bne.w	8006f56 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	699b      	ldr	r3, [r3, #24]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d132      	bne.n	8006d0c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	015a      	lsls	r2, r3, #5
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	4413      	add	r3, r2
 8006cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cb2:	691b      	ldr	r3, [r3, #16]
 8006cb4:	69ba      	ldr	r2, [r7, #24]
 8006cb6:	0151      	lsls	r1, r2, #5
 8006cb8:	69fa      	ldr	r2, [r7, #28]
 8006cba:	440a      	add	r2, r1
 8006cbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cc0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006cc4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006cc8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	015a      	lsls	r2, r3, #5
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	69ba      	ldr	r2, [r7, #24]
 8006cda:	0151      	lsls	r1, r2, #5
 8006cdc:	69fa      	ldr	r2, [r7, #28]
 8006cde:	440a      	add	r2, r1
 8006ce0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ce4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ce8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	015a      	lsls	r2, r3, #5
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	69ba      	ldr	r2, [r7, #24]
 8006cfa:	0151      	lsls	r1, r2, #5
 8006cfc:	69fa      	ldr	r2, [r7, #28]
 8006cfe:	440a      	add	r2, r1
 8006d00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d04:	0cdb      	lsrs	r3, r3, #19
 8006d06:	04db      	lsls	r3, r3, #19
 8006d08:	6113      	str	r3, [r2, #16]
 8006d0a:	e074      	b.n	8006df6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	015a      	lsls	r2, r3, #5
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	4413      	add	r3, r2
 8006d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	69ba      	ldr	r2, [r7, #24]
 8006d1c:	0151      	lsls	r1, r2, #5
 8006d1e:	69fa      	ldr	r2, [r7, #28]
 8006d20:	440a      	add	r2, r1
 8006d22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d26:	0cdb      	lsrs	r3, r3, #19
 8006d28:	04db      	lsls	r3, r3, #19
 8006d2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	015a      	lsls	r2, r3, #5
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	4413      	add	r3, r2
 8006d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	69ba      	ldr	r2, [r7, #24]
 8006d3c:	0151      	lsls	r1, r2, #5
 8006d3e:	69fa      	ldr	r2, [r7, #28]
 8006d40:	440a      	add	r2, r1
 8006d42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d46:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d4a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	015a      	lsls	r2, r3, #5
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	4413      	add	r3, r2
 8006d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d5c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	6999      	ldr	r1, [r3, #24]
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	440b      	add	r3, r1
 8006d68:	1e59      	subs	r1, r3, #1
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006d72:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006d74:	4b9d      	ldr	r3, [pc, #628]	; (8006fec <USB_EPStartXfer+0x370>)
 8006d76:	400b      	ands	r3, r1
 8006d78:	69b9      	ldr	r1, [r7, #24]
 8006d7a:	0148      	lsls	r0, r1, #5
 8006d7c:	69f9      	ldr	r1, [r7, #28]
 8006d7e:	4401      	add	r1, r0
 8006d80:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006d84:	4313      	orrs	r3, r2
 8006d86:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	015a      	lsls	r2, r3, #5
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	4413      	add	r3, r2
 8006d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d94:	691a      	ldr	r2, [r3, #16]
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d9e:	69b9      	ldr	r1, [r7, #24]
 8006da0:	0148      	lsls	r0, r1, #5
 8006da2:	69f9      	ldr	r1, [r7, #28]
 8006da4:	4401      	add	r1, r0
 8006da6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006daa:	4313      	orrs	r3, r2
 8006dac:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	791b      	ldrb	r3, [r3, #4]
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d11f      	bne.n	8006df6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	015a      	lsls	r2, r3, #5
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	69ba      	ldr	r2, [r7, #24]
 8006dc6:	0151      	lsls	r1, r2, #5
 8006dc8:	69fa      	ldr	r2, [r7, #28]
 8006dca:	440a      	add	r2, r1
 8006dcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dd0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006dd4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	015a      	lsls	r2, r3, #5
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	4413      	add	r3, r2
 8006dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	69ba      	ldr	r2, [r7, #24]
 8006de6:	0151      	lsls	r1, r2, #5
 8006de8:	69fa      	ldr	r2, [r7, #28]
 8006dea:	440a      	add	r2, r1
 8006dec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006df0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006df4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006df6:	79fb      	ldrb	r3, [r7, #7]
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d14b      	bne.n	8006e94 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	695b      	ldr	r3, [r3, #20]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d009      	beq.n	8006e18 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	015a      	lsls	r2, r3, #5
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e10:	461a      	mov	r2, r3
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	695b      	ldr	r3, [r3, #20]
 8006e16:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	791b      	ldrb	r3, [r3, #4]
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d128      	bne.n	8006e72 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d110      	bne.n	8006e52 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	015a      	lsls	r2, r3, #5
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	4413      	add	r3, r2
 8006e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	69ba      	ldr	r2, [r7, #24]
 8006e40:	0151      	lsls	r1, r2, #5
 8006e42:	69fa      	ldr	r2, [r7, #28]
 8006e44:	440a      	add	r2, r1
 8006e46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e4a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e4e:	6013      	str	r3, [r2, #0]
 8006e50:	e00f      	b.n	8006e72 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	015a      	lsls	r2, r3, #5
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	4413      	add	r3, r2
 8006e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	69ba      	ldr	r2, [r7, #24]
 8006e62:	0151      	lsls	r1, r2, #5
 8006e64:	69fa      	ldr	r2, [r7, #28]
 8006e66:	440a      	add	r2, r1
 8006e68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e70:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	015a      	lsls	r2, r3, #5
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	4413      	add	r3, r2
 8006e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	69ba      	ldr	r2, [r7, #24]
 8006e82:	0151      	lsls	r1, r2, #5
 8006e84:	69fa      	ldr	r2, [r7, #28]
 8006e86:	440a      	add	r2, r1
 8006e88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e8c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e90:	6013      	str	r3, [r2, #0]
 8006e92:	e133      	b.n	80070fc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	015a      	lsls	r2, r3, #5
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	69ba      	ldr	r2, [r7, #24]
 8006ea4:	0151      	lsls	r1, r2, #5
 8006ea6:	69fa      	ldr	r2, [r7, #28]
 8006ea8:	440a      	add	r2, r1
 8006eaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006eb2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	791b      	ldrb	r3, [r3, #4]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d015      	beq.n	8006ee8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	699b      	ldr	r3, [r3, #24]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	f000 811b 	beq.w	80070fc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ecc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	f003 030f 	and.w	r3, r3, #15
 8006ed6:	2101      	movs	r1, #1
 8006ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8006edc:	69f9      	ldr	r1, [r7, #28]
 8006ede:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	634b      	str	r3, [r1, #52]	; 0x34
 8006ee6:	e109      	b.n	80070fc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d110      	bne.n	8006f1a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	015a      	lsls	r2, r3, #5
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	4413      	add	r3, r2
 8006f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	69ba      	ldr	r2, [r7, #24]
 8006f08:	0151      	lsls	r1, r2, #5
 8006f0a:	69fa      	ldr	r2, [r7, #28]
 8006f0c:	440a      	add	r2, r1
 8006f0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f12:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f16:	6013      	str	r3, [r2, #0]
 8006f18:	e00f      	b.n	8006f3a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	015a      	lsls	r2, r3, #5
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	4413      	add	r3, r2
 8006f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	69ba      	ldr	r2, [r7, #24]
 8006f2a:	0151      	lsls	r1, r2, #5
 8006f2c:	69fa      	ldr	r2, [r7, #28]
 8006f2e:	440a      	add	r2, r1
 8006f30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f38:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	6919      	ldr	r1, [r3, #16]
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	781a      	ldrb	r2, [r3, #0]
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	699b      	ldr	r3, [r3, #24]
 8006f46:	b298      	uxth	r0, r3
 8006f48:	79fb      	ldrb	r3, [r7, #7]
 8006f4a:	9300      	str	r3, [sp, #0]
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	f000 fade 	bl	8007510 <USB_WritePacket>
 8006f54:	e0d2      	b.n	80070fc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	015a      	lsls	r2, r3, #5
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	69ba      	ldr	r2, [r7, #24]
 8006f66:	0151      	lsls	r1, r2, #5
 8006f68:	69fa      	ldr	r2, [r7, #28]
 8006f6a:	440a      	add	r2, r1
 8006f6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f70:	0cdb      	lsrs	r3, r3, #19
 8006f72:	04db      	lsls	r3, r3, #19
 8006f74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	015a      	lsls	r2, r3, #5
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	69ba      	ldr	r2, [r7, #24]
 8006f86:	0151      	lsls	r1, r2, #5
 8006f88:	69fa      	ldr	r2, [r7, #28]
 8006f8a:	440a      	add	r2, r1
 8006f8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f90:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f94:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f98:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d126      	bne.n	8006ff0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	015a      	lsls	r2, r3, #5
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	4413      	add	r3, r2
 8006faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fae:	691a      	ldr	r2, [r3, #16]
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fb8:	69b9      	ldr	r1, [r7, #24]
 8006fba:	0148      	lsls	r0, r1, #5
 8006fbc:	69f9      	ldr	r1, [r7, #28]
 8006fbe:	4401      	add	r1, r0
 8006fc0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	015a      	lsls	r2, r3, #5
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	4413      	add	r3, r2
 8006fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	69ba      	ldr	r2, [r7, #24]
 8006fd8:	0151      	lsls	r1, r2, #5
 8006fda:	69fa      	ldr	r2, [r7, #28]
 8006fdc:	440a      	add	r2, r1
 8006fde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fe2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006fe6:	6113      	str	r3, [r2, #16]
 8006fe8:	e03a      	b.n	8007060 <USB_EPStartXfer+0x3e4>
 8006fea:	bf00      	nop
 8006fec:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	699a      	ldr	r2, [r3, #24]
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	1e5a      	subs	r2, r3, #1
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	fbb2 f3f3 	udiv	r3, r2, r3
 8007004:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	8afa      	ldrh	r2, [r7, #22]
 800700c:	fb03 f202 	mul.w	r2, r3, r2
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	015a      	lsls	r2, r3, #5
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	4413      	add	r3, r2
 800701c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007020:	691a      	ldr	r2, [r3, #16]
 8007022:	8afb      	ldrh	r3, [r7, #22]
 8007024:	04d9      	lsls	r1, r3, #19
 8007026:	4b38      	ldr	r3, [pc, #224]	; (8007108 <USB_EPStartXfer+0x48c>)
 8007028:	400b      	ands	r3, r1
 800702a:	69b9      	ldr	r1, [r7, #24]
 800702c:	0148      	lsls	r0, r1, #5
 800702e:	69f9      	ldr	r1, [r7, #28]
 8007030:	4401      	add	r1, r0
 8007032:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007036:	4313      	orrs	r3, r2
 8007038:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	015a      	lsls	r2, r3, #5
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	4413      	add	r3, r2
 8007042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007046:	691a      	ldr	r2, [r3, #16]
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	69db      	ldr	r3, [r3, #28]
 800704c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007050:	69b9      	ldr	r1, [r7, #24]
 8007052:	0148      	lsls	r0, r1, #5
 8007054:	69f9      	ldr	r1, [r7, #28]
 8007056:	4401      	add	r1, r0
 8007058:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800705c:	4313      	orrs	r3, r2
 800705e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007060:	79fb      	ldrb	r3, [r7, #7]
 8007062:	2b01      	cmp	r3, #1
 8007064:	d10d      	bne.n	8007082 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d009      	beq.n	8007082 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	6919      	ldr	r1, [r3, #16]
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	015a      	lsls	r2, r3, #5
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	4413      	add	r3, r2
 800707a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800707e:	460a      	mov	r2, r1
 8007080:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	791b      	ldrb	r3, [r3, #4]
 8007086:	2b01      	cmp	r3, #1
 8007088:	d128      	bne.n	80070dc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007096:	2b00      	cmp	r3, #0
 8007098:	d110      	bne.n	80070bc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	015a      	lsls	r2, r3, #5
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	4413      	add	r3, r2
 80070a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	69ba      	ldr	r2, [r7, #24]
 80070aa:	0151      	lsls	r1, r2, #5
 80070ac:	69fa      	ldr	r2, [r7, #28]
 80070ae:	440a      	add	r2, r1
 80070b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80070b8:	6013      	str	r3, [r2, #0]
 80070ba:	e00f      	b.n	80070dc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80070bc:	69bb      	ldr	r3, [r7, #24]
 80070be:	015a      	lsls	r2, r3, #5
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	4413      	add	r3, r2
 80070c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	69ba      	ldr	r2, [r7, #24]
 80070cc:	0151      	lsls	r1, r2, #5
 80070ce:	69fa      	ldr	r2, [r7, #28]
 80070d0:	440a      	add	r2, r1
 80070d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070da:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	015a      	lsls	r2, r3, #5
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	4413      	add	r3, r2
 80070e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	69ba      	ldr	r2, [r7, #24]
 80070ec:	0151      	lsls	r1, r2, #5
 80070ee:	69fa      	ldr	r2, [r7, #28]
 80070f0:	440a      	add	r2, r1
 80070f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3720      	adds	r7, #32
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	1ff80000 	.word	0x1ff80000

0800710c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800710c:	b480      	push	{r7}
 800710e:	b087      	sub	sp, #28
 8007110:	af00      	add	r7, sp, #0
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	4613      	mov	r3, r2
 8007118:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	785b      	ldrb	r3, [r3, #1]
 8007128:	2b01      	cmp	r3, #1
 800712a:	f040 80ce 	bne.w	80072ca <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	699b      	ldr	r3, [r3, #24]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d132      	bne.n	800719c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	015a      	lsls	r2, r3, #5
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	4413      	add	r3, r2
 800713e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	693a      	ldr	r2, [r7, #16]
 8007146:	0151      	lsls	r1, r2, #5
 8007148:	697a      	ldr	r2, [r7, #20]
 800714a:	440a      	add	r2, r1
 800714c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007150:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007154:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007158:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	015a      	lsls	r2, r3, #5
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	4413      	add	r3, r2
 8007162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007166:	691b      	ldr	r3, [r3, #16]
 8007168:	693a      	ldr	r2, [r7, #16]
 800716a:	0151      	lsls	r1, r2, #5
 800716c:	697a      	ldr	r2, [r7, #20]
 800716e:	440a      	add	r2, r1
 8007170:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007174:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007178:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	015a      	lsls	r2, r3, #5
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	4413      	add	r3, r2
 8007182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	693a      	ldr	r2, [r7, #16]
 800718a:	0151      	lsls	r1, r2, #5
 800718c:	697a      	ldr	r2, [r7, #20]
 800718e:	440a      	add	r2, r1
 8007190:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007194:	0cdb      	lsrs	r3, r3, #19
 8007196:	04db      	lsls	r3, r3, #19
 8007198:	6113      	str	r3, [r2, #16]
 800719a:	e04e      	b.n	800723a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	015a      	lsls	r2, r3, #5
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	4413      	add	r3, r2
 80071a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	693a      	ldr	r2, [r7, #16]
 80071ac:	0151      	lsls	r1, r2, #5
 80071ae:	697a      	ldr	r2, [r7, #20]
 80071b0:	440a      	add	r2, r1
 80071b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071b6:	0cdb      	lsrs	r3, r3, #19
 80071b8:	04db      	lsls	r3, r3, #19
 80071ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	015a      	lsls	r2, r3, #5
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	4413      	add	r3, r2
 80071c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	693a      	ldr	r2, [r7, #16]
 80071cc:	0151      	lsls	r1, r2, #5
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	440a      	add	r2, r1
 80071d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80071da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80071de:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	699a      	ldr	r2, [r3, #24]
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d903      	bls.n	80071f4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	68da      	ldr	r2, [r3, #12]
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	015a      	lsls	r2, r3, #5
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	4413      	add	r3, r2
 80071fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	693a      	ldr	r2, [r7, #16]
 8007204:	0151      	lsls	r1, r2, #5
 8007206:	697a      	ldr	r2, [r7, #20]
 8007208:	440a      	add	r2, r1
 800720a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800720e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007212:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	015a      	lsls	r2, r3, #5
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	4413      	add	r3, r2
 800721c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007220:	691a      	ldr	r2, [r3, #16]
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	699b      	ldr	r3, [r3, #24]
 8007226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800722a:	6939      	ldr	r1, [r7, #16]
 800722c:	0148      	lsls	r0, r1, #5
 800722e:	6979      	ldr	r1, [r7, #20]
 8007230:	4401      	add	r1, r0
 8007232:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007236:	4313      	orrs	r3, r2
 8007238:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800723a:	79fb      	ldrb	r3, [r7, #7]
 800723c:	2b01      	cmp	r3, #1
 800723e:	d11e      	bne.n	800727e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	695b      	ldr	r3, [r3, #20]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d009      	beq.n	800725c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	015a      	lsls	r2, r3, #5
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	4413      	add	r3, r2
 8007250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007254:	461a      	mov	r2, r3
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	695b      	ldr	r3, [r3, #20]
 800725a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	015a      	lsls	r2, r3, #5
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	4413      	add	r3, r2
 8007264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	693a      	ldr	r2, [r7, #16]
 800726c:	0151      	lsls	r1, r2, #5
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	440a      	add	r2, r1
 8007272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007276:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800727a:	6013      	str	r3, [r2, #0]
 800727c:	e097      	b.n	80073ae <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	015a      	lsls	r2, r3, #5
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	4413      	add	r3, r2
 8007286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	693a      	ldr	r2, [r7, #16]
 800728e:	0151      	lsls	r1, r2, #5
 8007290:	697a      	ldr	r2, [r7, #20]
 8007292:	440a      	add	r2, r1
 8007294:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007298:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800729c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	699b      	ldr	r3, [r3, #24]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	f000 8083 	beq.w	80073ae <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	f003 030f 	and.w	r3, r3, #15
 80072b8:	2101      	movs	r1, #1
 80072ba:	fa01 f303 	lsl.w	r3, r1, r3
 80072be:	6979      	ldr	r1, [r7, #20]
 80072c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072c4:	4313      	orrs	r3, r2
 80072c6:	634b      	str	r3, [r1, #52]	; 0x34
 80072c8:	e071      	b.n	80073ae <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	015a      	lsls	r2, r3, #5
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	4413      	add	r3, r2
 80072d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	693a      	ldr	r2, [r7, #16]
 80072da:	0151      	lsls	r1, r2, #5
 80072dc:	697a      	ldr	r2, [r7, #20]
 80072de:	440a      	add	r2, r1
 80072e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072e4:	0cdb      	lsrs	r3, r3, #19
 80072e6:	04db      	lsls	r3, r3, #19
 80072e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	015a      	lsls	r2, r3, #5
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	4413      	add	r3, r2
 80072f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f6:	691b      	ldr	r3, [r3, #16]
 80072f8:	693a      	ldr	r2, [r7, #16]
 80072fa:	0151      	lsls	r1, r2, #5
 80072fc:	697a      	ldr	r2, [r7, #20]
 80072fe:	440a      	add	r2, r1
 8007300:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007304:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007308:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800730c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	699b      	ldr	r3, [r3, #24]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d003      	beq.n	800731e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	68da      	ldr	r2, [r3, #12]
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	68da      	ldr	r2, [r3, #12]
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	015a      	lsls	r2, r3, #5
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	4413      	add	r3, r2
 800732e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007332:	691b      	ldr	r3, [r3, #16]
 8007334:	693a      	ldr	r2, [r7, #16]
 8007336:	0151      	lsls	r1, r2, #5
 8007338:	697a      	ldr	r2, [r7, #20]
 800733a:	440a      	add	r2, r1
 800733c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007340:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007344:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	015a      	lsls	r2, r3, #5
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	4413      	add	r3, r2
 800734e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007352:	691a      	ldr	r2, [r3, #16]
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	69db      	ldr	r3, [r3, #28]
 8007358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800735c:	6939      	ldr	r1, [r7, #16]
 800735e:	0148      	lsls	r0, r1, #5
 8007360:	6979      	ldr	r1, [r7, #20]
 8007362:	4401      	add	r1, r0
 8007364:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007368:	4313      	orrs	r3, r2
 800736a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800736c:	79fb      	ldrb	r3, [r7, #7]
 800736e:	2b01      	cmp	r3, #1
 8007370:	d10d      	bne.n	800738e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	691b      	ldr	r3, [r3, #16]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d009      	beq.n	800738e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	6919      	ldr	r1, [r3, #16]
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	015a      	lsls	r2, r3, #5
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	4413      	add	r3, r2
 8007386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800738a:	460a      	mov	r2, r1
 800738c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	015a      	lsls	r2, r3, #5
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	4413      	add	r3, r2
 8007396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	693a      	ldr	r2, [r7, #16]
 800739e:	0151      	lsls	r1, r2, #5
 80073a0:	697a      	ldr	r2, [r7, #20]
 80073a2:	440a      	add	r2, r1
 80073a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80073ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	371c      	adds	r7, #28
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80073bc:	b480      	push	{r7}
 80073be:	b087      	sub	sp, #28
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80073c6:	2300      	movs	r3, #0
 80073c8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80073ca:	2300      	movs	r3, #0
 80073cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	785b      	ldrb	r3, [r3, #1]
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d14a      	bne.n	8007470 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	015a      	lsls	r2, r3, #5
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	4413      	add	r3, r2
 80073e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073f2:	f040 8086 	bne.w	8007502 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	015a      	lsls	r2, r3, #5
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	4413      	add	r3, r2
 8007400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	683a      	ldr	r2, [r7, #0]
 8007408:	7812      	ldrb	r2, [r2, #0]
 800740a:	0151      	lsls	r1, r2, #5
 800740c:	693a      	ldr	r2, [r7, #16]
 800740e:	440a      	add	r2, r1
 8007410:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007414:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007418:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	015a      	lsls	r2, r3, #5
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	4413      	add	r3, r2
 8007424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	683a      	ldr	r2, [r7, #0]
 800742c:	7812      	ldrb	r2, [r2, #0]
 800742e:	0151      	lsls	r1, r2, #5
 8007430:	693a      	ldr	r2, [r7, #16]
 8007432:	440a      	add	r2, r1
 8007434:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007438:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800743c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	3301      	adds	r3, #1
 8007442:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f242 7210 	movw	r2, #10000	; 0x2710
 800744a:	4293      	cmp	r3, r2
 800744c:	d902      	bls.n	8007454 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	75fb      	strb	r3, [r7, #23]
          break;
 8007452:	e056      	b.n	8007502 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	015a      	lsls	r2, r3, #5
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	4413      	add	r3, r2
 800745e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007468:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800746c:	d0e7      	beq.n	800743e <USB_EPStopXfer+0x82>
 800746e:	e048      	b.n	8007502 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	015a      	lsls	r2, r3, #5
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	4413      	add	r3, r2
 800747a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007484:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007488:	d13b      	bne.n	8007502 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	015a      	lsls	r2, r3, #5
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	4413      	add	r3, r2
 8007494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	683a      	ldr	r2, [r7, #0]
 800749c:	7812      	ldrb	r2, [r2, #0]
 800749e:	0151      	lsls	r1, r2, #5
 80074a0:	693a      	ldr	r2, [r7, #16]
 80074a2:	440a      	add	r2, r1
 80074a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80074ac:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	015a      	lsls	r2, r3, #5
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	4413      	add	r3, r2
 80074b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	683a      	ldr	r2, [r7, #0]
 80074c0:	7812      	ldrb	r2, [r2, #0]
 80074c2:	0151      	lsls	r1, r2, #5
 80074c4:	693a      	ldr	r2, [r7, #16]
 80074c6:	440a      	add	r2, r1
 80074c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80074d0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	3301      	adds	r3, #1
 80074d6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f242 7210 	movw	r2, #10000	; 0x2710
 80074de:	4293      	cmp	r3, r2
 80074e0:	d902      	bls.n	80074e8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	75fb      	strb	r3, [r7, #23]
          break;
 80074e6:	e00c      	b.n	8007502 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	015a      	lsls	r2, r3, #5
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	4413      	add	r3, r2
 80074f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007500:	d0e7      	beq.n	80074d2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007502:	7dfb      	ldrb	r3, [r7, #23]
}
 8007504:	4618      	mov	r0, r3
 8007506:	371c      	adds	r7, #28
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007510:	b480      	push	{r7}
 8007512:	b089      	sub	sp, #36	; 0x24
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	4611      	mov	r1, r2
 800751c:	461a      	mov	r2, r3
 800751e:	460b      	mov	r3, r1
 8007520:	71fb      	strb	r3, [r7, #7]
 8007522:	4613      	mov	r3, r2
 8007524:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800752e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007532:	2b00      	cmp	r3, #0
 8007534:	d123      	bne.n	800757e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007536:	88bb      	ldrh	r3, [r7, #4]
 8007538:	3303      	adds	r3, #3
 800753a:	089b      	lsrs	r3, r3, #2
 800753c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800753e:	2300      	movs	r3, #0
 8007540:	61bb      	str	r3, [r7, #24]
 8007542:	e018      	b.n	8007576 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007544:	79fb      	ldrb	r3, [r7, #7]
 8007546:	031a      	lsls	r2, r3, #12
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	4413      	add	r3, r2
 800754c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007550:	461a      	mov	r2, r3
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	3301      	adds	r3, #1
 800755c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	3301      	adds	r3, #1
 8007562:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	3301      	adds	r3, #1
 8007568:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	3301      	adds	r3, #1
 800756e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007570:	69bb      	ldr	r3, [r7, #24]
 8007572:	3301      	adds	r3, #1
 8007574:	61bb      	str	r3, [r7, #24]
 8007576:	69ba      	ldr	r2, [r7, #24]
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	429a      	cmp	r2, r3
 800757c:	d3e2      	bcc.n	8007544 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3724      	adds	r7, #36	; 0x24
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800758c:	b480      	push	{r7}
 800758e:	b08b      	sub	sp, #44	; 0x2c
 8007590:	af00      	add	r7, sp, #0
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	4613      	mov	r3, r2
 8007598:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80075a2:	88fb      	ldrh	r3, [r7, #6]
 80075a4:	089b      	lsrs	r3, r3, #2
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80075aa:	88fb      	ldrh	r3, [r7, #6]
 80075ac:	f003 0303 	and.w	r3, r3, #3
 80075b0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80075b2:	2300      	movs	r3, #0
 80075b4:	623b      	str	r3, [r7, #32]
 80075b6:	e014      	b.n	80075e2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c2:	601a      	str	r2, [r3, #0]
    pDest++;
 80075c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c6:	3301      	adds	r3, #1
 80075c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80075ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075cc:	3301      	adds	r3, #1
 80075ce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80075d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d2:	3301      	adds	r3, #1
 80075d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80075d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d8:	3301      	adds	r3, #1
 80075da:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80075dc:	6a3b      	ldr	r3, [r7, #32]
 80075de:	3301      	adds	r3, #1
 80075e0:	623b      	str	r3, [r7, #32]
 80075e2:	6a3a      	ldr	r2, [r7, #32]
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d3e6      	bcc.n	80075b8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80075ea:	8bfb      	ldrh	r3, [r7, #30]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d01e      	beq.n	800762e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80075f0:	2300      	movs	r3, #0
 80075f2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075fa:	461a      	mov	r2, r3
 80075fc:	f107 0310 	add.w	r3, r7, #16
 8007600:	6812      	ldr	r2, [r2, #0]
 8007602:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	6a3b      	ldr	r3, [r7, #32]
 8007608:	b2db      	uxtb	r3, r3
 800760a:	00db      	lsls	r3, r3, #3
 800760c:	fa22 f303 	lsr.w	r3, r2, r3
 8007610:	b2da      	uxtb	r2, r3
 8007612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007614:	701a      	strb	r2, [r3, #0]
      i++;
 8007616:	6a3b      	ldr	r3, [r7, #32]
 8007618:	3301      	adds	r3, #1
 800761a:	623b      	str	r3, [r7, #32]
      pDest++;
 800761c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761e:	3301      	adds	r3, #1
 8007620:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007622:	8bfb      	ldrh	r3, [r7, #30]
 8007624:	3b01      	subs	r3, #1
 8007626:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007628:	8bfb      	ldrh	r3, [r7, #30]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1ea      	bne.n	8007604 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800762e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007630:	4618      	mov	r0, r3
 8007632:	372c      	adds	r7, #44	; 0x2c
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800763c:	b480      	push	{r7}
 800763e:	b085      	sub	sp, #20
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	785b      	ldrb	r3, [r3, #1]
 8007654:	2b01      	cmp	r3, #1
 8007656:	d12c      	bne.n	80076b2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	015a      	lsls	r2, r3, #5
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	4413      	add	r3, r2
 8007660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	db12      	blt.n	8007690 <USB_EPSetStall+0x54>
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d00f      	beq.n	8007690 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	015a      	lsls	r2, r3, #5
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	4413      	add	r3, r2
 8007678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	68ba      	ldr	r2, [r7, #8]
 8007680:	0151      	lsls	r1, r2, #5
 8007682:	68fa      	ldr	r2, [r7, #12]
 8007684:	440a      	add	r2, r1
 8007686:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800768a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800768e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	015a      	lsls	r2, r3, #5
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	4413      	add	r3, r2
 8007698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68ba      	ldr	r2, [r7, #8]
 80076a0:	0151      	lsls	r1, r2, #5
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	440a      	add	r2, r1
 80076a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80076ae:	6013      	str	r3, [r2, #0]
 80076b0:	e02b      	b.n	800770a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	015a      	lsls	r2, r3, #5
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	4413      	add	r3, r2
 80076ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	db12      	blt.n	80076ea <USB_EPSetStall+0xae>
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d00f      	beq.n	80076ea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	015a      	lsls	r2, r3, #5
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	4413      	add	r3, r2
 80076d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	68ba      	ldr	r2, [r7, #8]
 80076da:	0151      	lsls	r1, r2, #5
 80076dc:	68fa      	ldr	r2, [r7, #12]
 80076de:	440a      	add	r2, r1
 80076e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80076e8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	015a      	lsls	r2, r3, #5
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	4413      	add	r3, r2
 80076f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	0151      	lsls	r1, r2, #5
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	440a      	add	r2, r1
 8007700:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007704:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007708:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800770a:	2300      	movs	r3, #0
}
 800770c:	4618      	mov	r0, r3
 800770e:	3714      	adds	r7, #20
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007718:	b480      	push	{r7}
 800771a:	b085      	sub	sp, #20
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	785b      	ldrb	r3, [r3, #1]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d128      	bne.n	8007786 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	015a      	lsls	r2, r3, #5
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	4413      	add	r3, r2
 800773c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	68ba      	ldr	r2, [r7, #8]
 8007744:	0151      	lsls	r1, r2, #5
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	440a      	add	r2, r1
 800774a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800774e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007752:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	791b      	ldrb	r3, [r3, #4]
 8007758:	2b03      	cmp	r3, #3
 800775a:	d003      	beq.n	8007764 <USB_EPClearStall+0x4c>
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	791b      	ldrb	r3, [r3, #4]
 8007760:	2b02      	cmp	r3, #2
 8007762:	d138      	bne.n	80077d6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	015a      	lsls	r2, r3, #5
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	4413      	add	r3, r2
 800776c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	68ba      	ldr	r2, [r7, #8]
 8007774:	0151      	lsls	r1, r2, #5
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	440a      	add	r2, r1
 800777a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800777e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007782:	6013      	str	r3, [r2, #0]
 8007784:	e027      	b.n	80077d6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	015a      	lsls	r2, r3, #5
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	4413      	add	r3, r2
 800778e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68ba      	ldr	r2, [r7, #8]
 8007796:	0151      	lsls	r1, r2, #5
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	440a      	add	r2, r1
 800779c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80077a4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	791b      	ldrb	r3, [r3, #4]
 80077aa:	2b03      	cmp	r3, #3
 80077ac:	d003      	beq.n	80077b6 <USB_EPClearStall+0x9e>
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	791b      	ldrb	r3, [r3, #4]
 80077b2:	2b02      	cmp	r3, #2
 80077b4:	d10f      	bne.n	80077d6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	015a      	lsls	r2, r3, #5
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	4413      	add	r3, r2
 80077be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	0151      	lsls	r1, r2, #5
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	440a      	add	r2, r1
 80077cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077d4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80077d6:	2300      	movs	r3, #0
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3714      	adds	r7, #20
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	460b      	mov	r3, r1
 80077ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007802:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007806:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	78fb      	ldrb	r3, [r7, #3]
 8007812:	011b      	lsls	r3, r3, #4
 8007814:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007818:	68f9      	ldr	r1, [r7, #12]
 800781a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800781e:	4313      	orrs	r3, r2
 8007820:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007822:	2300      	movs	r3, #0
}
 8007824:	4618      	mov	r0, r3
 8007826:	3714      	adds	r7, #20
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007830:	b480      	push	{r7}
 8007832:	b085      	sub	sp, #20
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68fa      	ldr	r2, [r7, #12]
 8007846:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800784a:	f023 0303 	bic.w	r3, r3, #3
 800784e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800785e:	f023 0302 	bic.w	r3, r3, #2
 8007862:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3714      	adds	r7, #20
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr

08007872 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007872:	b480      	push	{r7}
 8007874:	b085      	sub	sp, #20
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	68fa      	ldr	r2, [r7, #12]
 8007888:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800788c:	f023 0303 	bic.w	r3, r3, #3
 8007890:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	68fa      	ldr	r2, [r7, #12]
 800789c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078a0:	f043 0302 	orr.w	r3, r3, #2
 80078a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3714      	adds	r7, #20
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	695b      	ldr	r3, [r3, #20]
 80078c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	699b      	ldr	r3, [r3, #24]
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	4013      	ands	r3, r2
 80078ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80078cc:	68fb      	ldr	r3, [r7, #12]
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3714      	adds	r7, #20
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr

080078da <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80078da:	b480      	push	{r7}
 80078dc:	b085      	sub	sp, #20
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078f6:	69db      	ldr	r3, [r3, #28]
 80078f8:	68ba      	ldr	r2, [r7, #8]
 80078fa:	4013      	ands	r3, r2
 80078fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	0c1b      	lsrs	r3, r3, #16
}
 8007902:	4618      	mov	r0, r3
 8007904:	3714      	adds	r7, #20
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr

0800790e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800790e:	b480      	push	{r7}
 8007910:	b085      	sub	sp, #20
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007920:	699b      	ldr	r3, [r3, #24]
 8007922:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800792a:	69db      	ldr	r3, [r3, #28]
 800792c:	68ba      	ldr	r2, [r7, #8]
 800792e:	4013      	ands	r3, r2
 8007930:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	b29b      	uxth	r3, r3
}
 8007936:	4618      	mov	r0, r3
 8007938:	3714      	adds	r7, #20
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr

08007942 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007942:	b480      	push	{r7}
 8007944:	b085      	sub	sp, #20
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
 800794a:	460b      	mov	r3, r1
 800794c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007952:	78fb      	ldrb	r3, [r7, #3]
 8007954:	015a      	lsls	r2, r3, #5
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	4413      	add	r3, r2
 800795a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007968:	695b      	ldr	r3, [r3, #20]
 800796a:	68ba      	ldr	r2, [r7, #8]
 800796c:	4013      	ands	r3, r2
 800796e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007970:	68bb      	ldr	r3, [r7, #8]
}
 8007972:	4618      	mov	r0, r3
 8007974:	3714      	adds	r7, #20
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr

0800797e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800797e:	b480      	push	{r7}
 8007980:	b087      	sub	sp, #28
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
 8007986:	460b      	mov	r3, r1
 8007988:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007994:	691b      	ldr	r3, [r3, #16]
 8007996:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800799e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079a0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80079a2:	78fb      	ldrb	r3, [r7, #3]
 80079a4:	f003 030f 	and.w	r3, r3, #15
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	fa22 f303 	lsr.w	r3, r2, r3
 80079ae:	01db      	lsls	r3, r3, #7
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	693a      	ldr	r2, [r7, #16]
 80079b4:	4313      	orrs	r3, r2
 80079b6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80079b8:	78fb      	ldrb	r3, [r7, #3]
 80079ba:	015a      	lsls	r2, r3, #5
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	4413      	add	r3, r2
 80079c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	693a      	ldr	r2, [r7, #16]
 80079c8:	4013      	ands	r3, r2
 80079ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80079cc:	68bb      	ldr	r3, [r7, #8]
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	371c      	adds	r7, #28
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr

080079da <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80079da:	b480      	push	{r7}
 80079dc:	b083      	sub	sp, #12
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	695b      	ldr	r3, [r3, #20]
 80079e6:	f003 0301 	and.w	r3, r3, #1
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	370c      	adds	r7, #12
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr

080079f6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80079f6:	b480      	push	{r7}
 80079f8:	b085      	sub	sp, #20
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	68fa      	ldr	r2, [r7, #12]
 8007a0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a10:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007a14:	f023 0307 	bic.w	r3, r3, #7
 8007a18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	68fa      	ldr	r2, [r7, #12]
 8007a24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3714      	adds	r7, #20
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b087      	sub	sp, #28
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	460b      	mov	r3, r1
 8007a46:	607a      	str	r2, [r7, #4]
 8007a48:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	333c      	adds	r3, #60	; 0x3c
 8007a52:	3304      	adds	r3, #4
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	4a26      	ldr	r2, [pc, #152]	; (8007af4 <USB_EP0_OutStart+0xb8>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d90a      	bls.n	8007a76 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a70:	d101      	bne.n	8007a76 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007a72:	2300      	movs	r3, #0
 8007a74:	e037      	b.n	8007ae6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	2300      	movs	r3, #0
 8007a80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a88:	691b      	ldr	r3, [r3, #16]
 8007a8a:	697a      	ldr	r2, [r7, #20]
 8007a8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	697a      	ldr	r2, [r7, #20]
 8007aa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007aa4:	f043 0318 	orr.w	r3, r3, #24
 8007aa8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ab0:	691b      	ldr	r3, [r3, #16]
 8007ab2:	697a      	ldr	r2, [r7, #20]
 8007ab4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ab8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007abc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007abe:	7afb      	ldrb	r3, [r7, #11]
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d10f      	bne.n	8007ae4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aca:	461a      	mov	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	697a      	ldr	r2, [r7, #20]
 8007ada:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ade:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007ae2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	371c      	adds	r7, #28
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	4f54300a 	.word	0x4f54300a

08007af8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b085      	sub	sp, #20
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b00:	2300      	movs	r3, #0
 8007b02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	3301      	adds	r3, #1
 8007b08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	4a13      	ldr	r2, [pc, #76]	; (8007b5c <USB_CoreReset+0x64>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d901      	bls.n	8007b16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007b12:	2303      	movs	r3, #3
 8007b14:	e01b      	b.n	8007b4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	daf2      	bge.n	8007b04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	f043 0201 	orr.w	r2, r3, #1
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	3301      	adds	r3, #1
 8007b32:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	4a09      	ldr	r2, [pc, #36]	; (8007b5c <USB_CoreReset+0x64>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d901      	bls.n	8007b40 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007b3c:	2303      	movs	r3, #3
 8007b3e:	e006      	b.n	8007b4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	691b      	ldr	r3, [r3, #16]
 8007b44:	f003 0301 	and.w	r3, r3, #1
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d0f0      	beq.n	8007b2e <USB_CoreReset+0x36>

  return HAL_OK;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3714      	adds	r7, #20
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	00030d40 	.word	0x00030d40

08007b60 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	460b      	mov	r3, r1
 8007b6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007b6c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007b70:	f002 fc36 	bl	800a3e0 <USBD_static_malloc>
 8007b74:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d109      	bne.n	8007b90 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	32b0      	adds	r2, #176	; 0xb0
 8007b86:	2100      	movs	r1, #0
 8007b88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007b8c:	2302      	movs	r3, #2
 8007b8e:	e0d4      	b.n	8007d3a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007b90:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007b94:	2100      	movs	r1, #0
 8007b96:	68f8      	ldr	r0, [r7, #12]
 8007b98:	f002 fc8a 	bl	800a4b0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	32b0      	adds	r2, #176	; 0xb0
 8007ba6:	68f9      	ldr	r1, [r7, #12]
 8007ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	32b0      	adds	r2, #176	; 0xb0
 8007bb6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	7c1b      	ldrb	r3, [r3, #16]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d138      	bne.n	8007c3a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007bc8:	4b5e      	ldr	r3, [pc, #376]	; (8007d44 <USBD_CDC_Init+0x1e4>)
 8007bca:	7819      	ldrb	r1, [r3, #0]
 8007bcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bd0:	2202      	movs	r2, #2
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f002 fae1 	bl	800a19a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007bd8:	4b5a      	ldr	r3, [pc, #360]	; (8007d44 <USBD_CDC_Init+0x1e4>)
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	f003 020f 	and.w	r2, r3, #15
 8007be0:	6879      	ldr	r1, [r7, #4]
 8007be2:	4613      	mov	r3, r2
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	4413      	add	r3, r2
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	440b      	add	r3, r1
 8007bec:	3324      	adds	r3, #36	; 0x24
 8007bee:	2201      	movs	r2, #1
 8007bf0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007bf2:	4b55      	ldr	r3, [pc, #340]	; (8007d48 <USBD_CDC_Init+0x1e8>)
 8007bf4:	7819      	ldrb	r1, [r3, #0]
 8007bf6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bfa:	2202      	movs	r2, #2
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f002 facc 	bl	800a19a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007c02:	4b51      	ldr	r3, [pc, #324]	; (8007d48 <USBD_CDC_Init+0x1e8>)
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	f003 020f 	and.w	r2, r3, #15
 8007c0a:	6879      	ldr	r1, [r7, #4]
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	4413      	add	r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	440b      	add	r3, r1
 8007c16:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007c1e:	4b4b      	ldr	r3, [pc, #300]	; (8007d4c <USBD_CDC_Init+0x1ec>)
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	f003 020f 	and.w	r2, r3, #15
 8007c26:	6879      	ldr	r1, [r7, #4]
 8007c28:	4613      	mov	r3, r2
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	4413      	add	r3, r2
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	440b      	add	r3, r1
 8007c32:	3326      	adds	r3, #38	; 0x26
 8007c34:	2210      	movs	r2, #16
 8007c36:	801a      	strh	r2, [r3, #0]
 8007c38:	e035      	b.n	8007ca6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007c3a:	4b42      	ldr	r3, [pc, #264]	; (8007d44 <USBD_CDC_Init+0x1e4>)
 8007c3c:	7819      	ldrb	r1, [r3, #0]
 8007c3e:	2340      	movs	r3, #64	; 0x40
 8007c40:	2202      	movs	r2, #2
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f002 faa9 	bl	800a19a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007c48:	4b3e      	ldr	r3, [pc, #248]	; (8007d44 <USBD_CDC_Init+0x1e4>)
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	f003 020f 	and.w	r2, r3, #15
 8007c50:	6879      	ldr	r1, [r7, #4]
 8007c52:	4613      	mov	r3, r2
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	4413      	add	r3, r2
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	440b      	add	r3, r1
 8007c5c:	3324      	adds	r3, #36	; 0x24
 8007c5e:	2201      	movs	r2, #1
 8007c60:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007c62:	4b39      	ldr	r3, [pc, #228]	; (8007d48 <USBD_CDC_Init+0x1e8>)
 8007c64:	7819      	ldrb	r1, [r3, #0]
 8007c66:	2340      	movs	r3, #64	; 0x40
 8007c68:	2202      	movs	r2, #2
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f002 fa95 	bl	800a19a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007c70:	4b35      	ldr	r3, [pc, #212]	; (8007d48 <USBD_CDC_Init+0x1e8>)
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	f003 020f 	and.w	r2, r3, #15
 8007c78:	6879      	ldr	r1, [r7, #4]
 8007c7a:	4613      	mov	r3, r2
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	4413      	add	r3, r2
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	440b      	add	r3, r1
 8007c84:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007c88:	2201      	movs	r2, #1
 8007c8a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007c8c:	4b2f      	ldr	r3, [pc, #188]	; (8007d4c <USBD_CDC_Init+0x1ec>)
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	f003 020f 	and.w	r2, r3, #15
 8007c94:	6879      	ldr	r1, [r7, #4]
 8007c96:	4613      	mov	r3, r2
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	4413      	add	r3, r2
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	440b      	add	r3, r1
 8007ca0:	3326      	adds	r3, #38	; 0x26
 8007ca2:	2210      	movs	r2, #16
 8007ca4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007ca6:	4b29      	ldr	r3, [pc, #164]	; (8007d4c <USBD_CDC_Init+0x1ec>)
 8007ca8:	7819      	ldrb	r1, [r3, #0]
 8007caa:	2308      	movs	r3, #8
 8007cac:	2203      	movs	r2, #3
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f002 fa73 	bl	800a19a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007cb4:	4b25      	ldr	r3, [pc, #148]	; (8007d4c <USBD_CDC_Init+0x1ec>)
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	f003 020f 	and.w	r2, r3, #15
 8007cbc:	6879      	ldr	r1, [r7, #4]
 8007cbe:	4613      	mov	r3, r2
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	4413      	add	r3, r2
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	440b      	add	r3, r1
 8007cc8:	3324      	adds	r3, #36	; 0x24
 8007cca:	2201      	movs	r2, #1
 8007ccc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	33b0      	adds	r3, #176	; 0xb0
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	4413      	add	r3, r2
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2200      	movs	r2, #0
 8007cee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d101      	bne.n	8007d08 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007d04:	2302      	movs	r3, #2
 8007d06:	e018      	b.n	8007d3a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	7c1b      	ldrb	r3, [r3, #16]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d10a      	bne.n	8007d26 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007d10:	4b0d      	ldr	r3, [pc, #52]	; (8007d48 <USBD_CDC_Init+0x1e8>)
 8007d12:	7819      	ldrb	r1, [r3, #0]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f002 fb2a 	bl	800a378 <USBD_LL_PrepareReceive>
 8007d24:	e008      	b.n	8007d38 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007d26:	4b08      	ldr	r3, [pc, #32]	; (8007d48 <USBD_CDC_Init+0x1e8>)
 8007d28:	7819      	ldrb	r1, [r3, #0]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d30:	2340      	movs	r3, #64	; 0x40
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f002 fb20 	bl	800a378 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	20000093 	.word	0x20000093
 8007d48:	20000094 	.word	0x20000094
 8007d4c:	20000095 	.word	0x20000095

08007d50 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	460b      	mov	r3, r1
 8007d5a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007d5c:	4b3a      	ldr	r3, [pc, #232]	; (8007e48 <USBD_CDC_DeInit+0xf8>)
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	4619      	mov	r1, r3
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f002 fa3f 	bl	800a1e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007d68:	4b37      	ldr	r3, [pc, #220]	; (8007e48 <USBD_CDC_DeInit+0xf8>)
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	f003 020f 	and.w	r2, r3, #15
 8007d70:	6879      	ldr	r1, [r7, #4]
 8007d72:	4613      	mov	r3, r2
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	4413      	add	r3, r2
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	440b      	add	r3, r1
 8007d7c:	3324      	adds	r3, #36	; 0x24
 8007d7e:	2200      	movs	r2, #0
 8007d80:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007d82:	4b32      	ldr	r3, [pc, #200]	; (8007e4c <USBD_CDC_DeInit+0xfc>)
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	4619      	mov	r1, r3
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f002 fa2c 	bl	800a1e6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007d8e:	4b2f      	ldr	r3, [pc, #188]	; (8007e4c <USBD_CDC_DeInit+0xfc>)
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	f003 020f 	and.w	r2, r3, #15
 8007d96:	6879      	ldr	r1, [r7, #4]
 8007d98:	4613      	mov	r3, r2
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	4413      	add	r3, r2
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	440b      	add	r3, r1
 8007da2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007da6:	2200      	movs	r2, #0
 8007da8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007daa:	4b29      	ldr	r3, [pc, #164]	; (8007e50 <USBD_CDC_DeInit+0x100>)
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	4619      	mov	r1, r3
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f002 fa18 	bl	800a1e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007db6:	4b26      	ldr	r3, [pc, #152]	; (8007e50 <USBD_CDC_DeInit+0x100>)
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	f003 020f 	and.w	r2, r3, #15
 8007dbe:	6879      	ldr	r1, [r7, #4]
 8007dc0:	4613      	mov	r3, r2
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	4413      	add	r3, r2
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	440b      	add	r3, r1
 8007dca:	3324      	adds	r3, #36	; 0x24
 8007dcc:	2200      	movs	r2, #0
 8007dce:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007dd0:	4b1f      	ldr	r3, [pc, #124]	; (8007e50 <USBD_CDC_DeInit+0x100>)
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	f003 020f 	and.w	r2, r3, #15
 8007dd8:	6879      	ldr	r1, [r7, #4]
 8007dda:	4613      	mov	r3, r2
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	4413      	add	r3, r2
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	440b      	add	r3, r1
 8007de4:	3326      	adds	r3, #38	; 0x26
 8007de6:	2200      	movs	r2, #0
 8007de8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	32b0      	adds	r2, #176	; 0xb0
 8007df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d01f      	beq.n	8007e3c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	33b0      	adds	r3, #176	; 0xb0
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	4413      	add	r3, r2
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	32b0      	adds	r2, #176	; 0xb0
 8007e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f002 faec 	bl	800a3fc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	32b0      	adds	r2, #176	; 0xb0
 8007e2e:	2100      	movs	r1, #0
 8007e30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	20000093 	.word	0x20000093
 8007e4c:	20000094 	.word	0x20000094
 8007e50:	20000095 	.word	0x20000095

08007e54 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b086      	sub	sp, #24
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	32b0      	adds	r2, #176	; 0xb0
 8007e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e6c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007e72:	2300      	movs	r3, #0
 8007e74:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e76:	2300      	movs	r3, #0
 8007e78:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d101      	bne.n	8007e84 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007e80:	2303      	movs	r3, #3
 8007e82:	e0bf      	b.n	8008004 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d050      	beq.n	8007f32 <USBD_CDC_Setup+0xde>
 8007e90:	2b20      	cmp	r3, #32
 8007e92:	f040 80af 	bne.w	8007ff4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	88db      	ldrh	r3, [r3, #6]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d03a      	beq.n	8007f14 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	b25b      	sxtb	r3, r3
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	da1b      	bge.n	8007ee0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	33b0      	adds	r3, #176	; 0xb0
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	4413      	add	r3, r2
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	683a      	ldr	r2, [r7, #0]
 8007ebc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007ebe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007ec0:	683a      	ldr	r2, [r7, #0]
 8007ec2:	88d2      	ldrh	r2, [r2, #6]
 8007ec4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	88db      	ldrh	r3, [r3, #6]
 8007eca:	2b07      	cmp	r3, #7
 8007ecc:	bf28      	it	cs
 8007ece:	2307      	movcs	r3, #7
 8007ed0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	89fa      	ldrh	r2, [r7, #14]
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f001 fd43 	bl	8009964 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007ede:	e090      	b.n	8008002 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	785a      	ldrb	r2, [r3, #1]
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	88db      	ldrh	r3, [r3, #6]
 8007eee:	2b3f      	cmp	r3, #63	; 0x3f
 8007ef0:	d803      	bhi.n	8007efa <USBD_CDC_Setup+0xa6>
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	88db      	ldrh	r3, [r3, #6]
 8007ef6:	b2da      	uxtb	r2, r3
 8007ef8:	e000      	b.n	8007efc <USBD_CDC_Setup+0xa8>
 8007efa:	2240      	movs	r2, #64	; 0x40
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007f02:	6939      	ldr	r1, [r7, #16]
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f001 fd55 	bl	80099bc <USBD_CtlPrepareRx>
      break;
 8007f12:	e076      	b.n	8008002 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	33b0      	adds	r3, #176	; 0xb0
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	4413      	add	r3, r2
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	683a      	ldr	r2, [r7, #0]
 8007f28:	7850      	ldrb	r0, [r2, #1]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	6839      	ldr	r1, [r7, #0]
 8007f2e:	4798      	blx	r3
      break;
 8007f30:	e067      	b.n	8008002 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	785b      	ldrb	r3, [r3, #1]
 8007f36:	2b0b      	cmp	r3, #11
 8007f38:	d851      	bhi.n	8007fde <USBD_CDC_Setup+0x18a>
 8007f3a:	a201      	add	r2, pc, #4	; (adr r2, 8007f40 <USBD_CDC_Setup+0xec>)
 8007f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f40:	08007f71 	.word	0x08007f71
 8007f44:	08007fed 	.word	0x08007fed
 8007f48:	08007fdf 	.word	0x08007fdf
 8007f4c:	08007fdf 	.word	0x08007fdf
 8007f50:	08007fdf 	.word	0x08007fdf
 8007f54:	08007fdf 	.word	0x08007fdf
 8007f58:	08007fdf 	.word	0x08007fdf
 8007f5c:	08007fdf 	.word	0x08007fdf
 8007f60:	08007fdf 	.word	0x08007fdf
 8007f64:	08007fdf 	.word	0x08007fdf
 8007f68:	08007f9b 	.word	0x08007f9b
 8007f6c:	08007fc5 	.word	0x08007fc5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	2b03      	cmp	r3, #3
 8007f7a:	d107      	bne.n	8007f8c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007f7c:	f107 030a 	add.w	r3, r7, #10
 8007f80:	2202      	movs	r2, #2
 8007f82:	4619      	mov	r1, r3
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f001 fced 	bl	8009964 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f8a:	e032      	b.n	8007ff2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007f8c:	6839      	ldr	r1, [r7, #0]
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f001 fc77 	bl	8009882 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f94:	2303      	movs	r3, #3
 8007f96:	75fb      	strb	r3, [r7, #23]
          break;
 8007f98:	e02b      	b.n	8007ff2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	2b03      	cmp	r3, #3
 8007fa4:	d107      	bne.n	8007fb6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007fa6:	f107 030d 	add.w	r3, r7, #13
 8007faa:	2201      	movs	r2, #1
 8007fac:	4619      	mov	r1, r3
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f001 fcd8 	bl	8009964 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007fb4:	e01d      	b.n	8007ff2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007fb6:	6839      	ldr	r1, [r7, #0]
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f001 fc62 	bl	8009882 <USBD_CtlError>
            ret = USBD_FAIL;
 8007fbe:	2303      	movs	r3, #3
 8007fc0:	75fb      	strb	r3, [r7, #23]
          break;
 8007fc2:	e016      	b.n	8007ff2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	2b03      	cmp	r3, #3
 8007fce:	d00f      	beq.n	8007ff0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007fd0:	6839      	ldr	r1, [r7, #0]
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f001 fc55 	bl	8009882 <USBD_CtlError>
            ret = USBD_FAIL;
 8007fd8:	2303      	movs	r3, #3
 8007fda:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007fdc:	e008      	b.n	8007ff0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007fde:	6839      	ldr	r1, [r7, #0]
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f001 fc4e 	bl	8009882 <USBD_CtlError>
          ret = USBD_FAIL;
 8007fe6:	2303      	movs	r3, #3
 8007fe8:	75fb      	strb	r3, [r7, #23]
          break;
 8007fea:	e002      	b.n	8007ff2 <USBD_CDC_Setup+0x19e>
          break;
 8007fec:	bf00      	nop
 8007fee:	e008      	b.n	8008002 <USBD_CDC_Setup+0x1ae>
          break;
 8007ff0:	bf00      	nop
      }
      break;
 8007ff2:	e006      	b.n	8008002 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007ff4:	6839      	ldr	r1, [r7, #0]
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f001 fc43 	bl	8009882 <USBD_CtlError>
      ret = USBD_FAIL;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	75fb      	strb	r3, [r7, #23]
      break;
 8008000:	bf00      	nop
  }

  return (uint8_t)ret;
 8008002:	7dfb      	ldrb	r3, [r7, #23]
}
 8008004:	4618      	mov	r0, r3
 8008006:	3718      	adds	r7, #24
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	460b      	mov	r3, r1
 8008016:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800801e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	32b0      	adds	r2, #176	; 0xb0
 800802a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d101      	bne.n	8008036 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008032:	2303      	movs	r3, #3
 8008034:	e065      	b.n	8008102 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	32b0      	adds	r2, #176	; 0xb0
 8008040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008044:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008046:	78fb      	ldrb	r3, [r7, #3]
 8008048:	f003 020f 	and.w	r2, r3, #15
 800804c:	6879      	ldr	r1, [r7, #4]
 800804e:	4613      	mov	r3, r2
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	4413      	add	r3, r2
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	440b      	add	r3, r1
 8008058:	3318      	adds	r3, #24
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d02f      	beq.n	80080c0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008060:	78fb      	ldrb	r3, [r7, #3]
 8008062:	f003 020f 	and.w	r2, r3, #15
 8008066:	6879      	ldr	r1, [r7, #4]
 8008068:	4613      	mov	r3, r2
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	4413      	add	r3, r2
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	440b      	add	r3, r1
 8008072:	3318      	adds	r3, #24
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	78fb      	ldrb	r3, [r7, #3]
 8008078:	f003 010f 	and.w	r1, r3, #15
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	460b      	mov	r3, r1
 8008080:	00db      	lsls	r3, r3, #3
 8008082:	440b      	add	r3, r1
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	4403      	add	r3, r0
 8008088:	3348      	adds	r3, #72	; 0x48
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008090:	fb01 f303 	mul.w	r3, r1, r3
 8008094:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008096:	2b00      	cmp	r3, #0
 8008098:	d112      	bne.n	80080c0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800809a:	78fb      	ldrb	r3, [r7, #3]
 800809c:	f003 020f 	and.w	r2, r3, #15
 80080a0:	6879      	ldr	r1, [r7, #4]
 80080a2:	4613      	mov	r3, r2
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	4413      	add	r3, r2
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	440b      	add	r3, r1
 80080ac:	3318      	adds	r3, #24
 80080ae:	2200      	movs	r2, #0
 80080b0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80080b2:	78f9      	ldrb	r1, [r7, #3]
 80080b4:	2300      	movs	r3, #0
 80080b6:	2200      	movs	r2, #0
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f002 f93c 	bl	800a336 <USBD_LL_Transmit>
 80080be:	e01f      	b.n	8008100 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	2200      	movs	r2, #0
 80080c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	33b0      	adds	r3, #176	; 0xb0
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	4413      	add	r3, r2
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	691b      	ldr	r3, [r3, #16]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d010      	beq.n	8008100 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	33b0      	adds	r3, #176	; 0xb0
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	4413      	add	r3, r2
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	691b      	ldr	r3, [r3, #16]
 80080f0:	68ba      	ldr	r2, [r7, #8]
 80080f2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80080f6:	68ba      	ldr	r2, [r7, #8]
 80080f8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80080fc:	78fa      	ldrb	r2, [r7, #3]
 80080fe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008100:	2300      	movs	r3, #0
}
 8008102:	4618      	mov	r0, r3
 8008104:	3710      	adds	r7, #16
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}

0800810a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800810a:	b580      	push	{r7, lr}
 800810c:	b084      	sub	sp, #16
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
 8008112:	460b      	mov	r3, r1
 8008114:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	32b0      	adds	r2, #176	; 0xb0
 8008120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008124:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	32b0      	adds	r2, #176	; 0xb0
 8008130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d101      	bne.n	800813c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008138:	2303      	movs	r3, #3
 800813a:	e01a      	b.n	8008172 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800813c:	78fb      	ldrb	r3, [r7, #3]
 800813e:	4619      	mov	r1, r3
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f002 f93a 	bl	800a3ba <USBD_LL_GetRxDataSize>
 8008146:	4602      	mov	r2, r0
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	33b0      	adds	r3, #176	; 0xb0
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	4413      	add	r3, r2
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	68db      	ldr	r3, [r3, #12]
 8008160:	68fa      	ldr	r2, [r7, #12]
 8008162:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008166:	68fa      	ldr	r2, [r7, #12]
 8008168:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800816c:	4611      	mov	r1, r2
 800816e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	3710      	adds	r7, #16
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}

0800817a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800817a:	b580      	push	{r7, lr}
 800817c:	b084      	sub	sp, #16
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	32b0      	adds	r2, #176	; 0xb0
 800818c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008190:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d101      	bne.n	800819c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008198:	2303      	movs	r3, #3
 800819a:	e025      	b.n	80081e8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	33b0      	adds	r3, #176	; 0xb0
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	4413      	add	r3, r2
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d01a      	beq.n	80081e6 <USBD_CDC_EP0_RxReady+0x6c>
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80081b6:	2bff      	cmp	r3, #255	; 0xff
 80081b8:	d015      	beq.n	80081e6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	33b0      	adds	r3, #176	; 0xb0
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	4413      	add	r3, r2
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	68fa      	ldr	r2, [r7, #12]
 80081ce:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80081d2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80081d4:	68fa      	ldr	r2, [r7, #12]
 80081d6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80081da:	b292      	uxth	r2, r2
 80081dc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	22ff      	movs	r2, #255	; 0xff
 80081e2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80081e6:	2300      	movs	r3, #0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3710      	adds	r7, #16
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b086      	sub	sp, #24
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80081f8:	2182      	movs	r1, #130	; 0x82
 80081fa:	4818      	ldr	r0, [pc, #96]	; (800825c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80081fc:	f000 fd09 	bl	8008c12 <USBD_GetEpDesc>
 8008200:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008202:	2101      	movs	r1, #1
 8008204:	4815      	ldr	r0, [pc, #84]	; (800825c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008206:	f000 fd04 	bl	8008c12 <USBD_GetEpDesc>
 800820a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800820c:	2181      	movs	r1, #129	; 0x81
 800820e:	4813      	ldr	r0, [pc, #76]	; (800825c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008210:	f000 fcff 	bl	8008c12 <USBD_GetEpDesc>
 8008214:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d002      	beq.n	8008222 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	2210      	movs	r2, #16
 8008220:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d006      	beq.n	8008236 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	2200      	movs	r2, #0
 800822c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008230:	711a      	strb	r2, [r3, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d006      	beq.n	800824a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2200      	movs	r2, #0
 8008240:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008244:	711a      	strb	r2, [r3, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2243      	movs	r2, #67	; 0x43
 800824e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008250:	4b02      	ldr	r3, [pc, #8]	; (800825c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008252:	4618      	mov	r0, r3
 8008254:	3718      	adds	r7, #24
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	20000050 	.word	0x20000050

08008260 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b086      	sub	sp, #24
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008268:	2182      	movs	r1, #130	; 0x82
 800826a:	4818      	ldr	r0, [pc, #96]	; (80082cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800826c:	f000 fcd1 	bl	8008c12 <USBD_GetEpDesc>
 8008270:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008272:	2101      	movs	r1, #1
 8008274:	4815      	ldr	r0, [pc, #84]	; (80082cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008276:	f000 fccc 	bl	8008c12 <USBD_GetEpDesc>
 800827a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800827c:	2181      	movs	r1, #129	; 0x81
 800827e:	4813      	ldr	r0, [pc, #76]	; (80082cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008280:	f000 fcc7 	bl	8008c12 <USBD_GetEpDesc>
 8008284:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d002      	beq.n	8008292 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	2210      	movs	r2, #16
 8008290:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d006      	beq.n	80082a6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	2200      	movs	r2, #0
 800829c:	711a      	strb	r2, [r3, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	f042 0202 	orr.w	r2, r2, #2
 80082a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d006      	beq.n	80082ba <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2200      	movs	r2, #0
 80082b0:	711a      	strb	r2, [r3, #4]
 80082b2:	2200      	movs	r2, #0
 80082b4:	f042 0202 	orr.w	r2, r2, #2
 80082b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2243      	movs	r2, #67	; 0x43
 80082be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80082c0:	4b02      	ldr	r3, [pc, #8]	; (80082cc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3718      	adds	r7, #24
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	20000050 	.word	0x20000050

080082d0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b086      	sub	sp, #24
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80082d8:	2182      	movs	r1, #130	; 0x82
 80082da:	4818      	ldr	r0, [pc, #96]	; (800833c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80082dc:	f000 fc99 	bl	8008c12 <USBD_GetEpDesc>
 80082e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80082e2:	2101      	movs	r1, #1
 80082e4:	4815      	ldr	r0, [pc, #84]	; (800833c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80082e6:	f000 fc94 	bl	8008c12 <USBD_GetEpDesc>
 80082ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80082ec:	2181      	movs	r1, #129	; 0x81
 80082ee:	4813      	ldr	r0, [pc, #76]	; (800833c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80082f0:	f000 fc8f 	bl	8008c12 <USBD_GetEpDesc>
 80082f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d002      	beq.n	8008302 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	2210      	movs	r2, #16
 8008300:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d006      	beq.n	8008316 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	2200      	movs	r2, #0
 800830c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008310:	711a      	strb	r2, [r3, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d006      	beq.n	800832a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2200      	movs	r2, #0
 8008320:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008324:	711a      	strb	r2, [r3, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2243      	movs	r2, #67	; 0x43
 800832e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008330:	4b02      	ldr	r3, [pc, #8]	; (800833c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008332:	4618      	mov	r0, r3
 8008334:	3718      	adds	r7, #24
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
 800833a:	bf00      	nop
 800833c:	20000050 	.word	0x20000050

08008340 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	220a      	movs	r2, #10
 800834c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800834e:	4b03      	ldr	r3, [pc, #12]	; (800835c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008350:	4618      	mov	r0, r3
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr
 800835c:	2000000c 	.word	0x2000000c

08008360 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d101      	bne.n	8008374 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008370:	2303      	movs	r3, #3
 8008372:	e009      	b.n	8008388 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	33b0      	adds	r3, #176	; 0xb0
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	4413      	add	r3, r2
 8008382:	683a      	ldr	r2, [r7, #0]
 8008384:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008386:	2300      	movs	r3, #0
}
 8008388:	4618      	mov	r0, r3
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008394:	b480      	push	{r7}
 8008396:	b087      	sub	sp, #28
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	32b0      	adds	r2, #176	; 0xb0
 80083aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083ae:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d101      	bne.n	80083ba <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80083b6:	2303      	movs	r3, #3
 80083b8:	e008      	b.n	80083cc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	68ba      	ldr	r2, [r7, #8]
 80083be:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	371c      	adds	r7, #28
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80083d8:	b480      	push	{r7}
 80083da:	b085      	sub	sp, #20
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	32b0      	adds	r2, #176	; 0xb0
 80083ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083f0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d101      	bne.n	80083fc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80083f8:	2303      	movs	r3, #3
 80083fa:	e004      	b.n	8008406 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	683a      	ldr	r2, [r7, #0]
 8008400:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	3714      	adds	r7, #20
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr
	...

08008414 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	32b0      	adds	r2, #176	; 0xb0
 8008426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800842a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	32b0      	adds	r2, #176	; 0xb0
 8008436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d101      	bne.n	8008442 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800843e:	2303      	movs	r3, #3
 8008440:	e018      	b.n	8008474 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	7c1b      	ldrb	r3, [r3, #16]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d10a      	bne.n	8008460 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800844a:	4b0c      	ldr	r3, [pc, #48]	; (800847c <USBD_CDC_ReceivePacket+0x68>)
 800844c:	7819      	ldrb	r1, [r3, #0]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008454:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f001 ff8d 	bl	800a378 <USBD_LL_PrepareReceive>
 800845e:	e008      	b.n	8008472 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008460:	4b06      	ldr	r3, [pc, #24]	; (800847c <USBD_CDC_ReceivePacket+0x68>)
 8008462:	7819      	ldrb	r1, [r3, #0]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800846a:	2340      	movs	r3, #64	; 0x40
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f001 ff83 	bl	800a378 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	3710      	adds	r7, #16
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}
 800847c:	20000094 	.word	0x20000094

08008480 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b086      	sub	sp, #24
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	4613      	mov	r3, r2
 800848c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d101      	bne.n	8008498 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008494:	2303      	movs	r3, #3
 8008496:	e01f      	b.n	80084d8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2200      	movs	r2, #0
 800849c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d003      	beq.n	80084be <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	68ba      	ldr	r2, [r7, #8]
 80084ba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2201      	movs	r2, #1
 80084c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	79fa      	ldrb	r2, [r7, #7]
 80084ca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f001 fdfd 	bl	800a0cc <USBD_LL_Init>
 80084d2:	4603      	mov	r3, r0
 80084d4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80084d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3718      	adds	r7, #24
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80084ea:	2300      	movs	r3, #0
 80084ec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d101      	bne.n	80084f8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80084f4:	2303      	movs	r3, #3
 80084f6:	e025      	b.n	8008544 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	683a      	ldr	r2, [r7, #0]
 80084fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	32ae      	adds	r2, #174	; 0xae
 800850a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800850e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008510:	2b00      	cmp	r3, #0
 8008512:	d00f      	beq.n	8008534 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	32ae      	adds	r2, #174	; 0xae
 800851e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008524:	f107 020e 	add.w	r2, r7, #14
 8008528:	4610      	mov	r0, r2
 800852a:	4798      	blx	r3
 800852c:	4602      	mov	r2, r0
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800853a:	1c5a      	adds	r2, r3, #1
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008542:	2300      	movs	r3, #0
}
 8008544:	4618      	mov	r0, r3
 8008546:	3710      	adds	r7, #16
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f001 fe05 	bl	800a164 <USBD_LL_Start>
 800855a:	4603      	mov	r3, r0
}
 800855c:	4618      	mov	r0, r3
 800855e:	3708      	adds	r7, #8
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800856c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800856e:	4618      	mov	r0, r3
 8008570:	370c      	adds	r7, #12
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr

0800857a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b084      	sub	sp, #16
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
 8008582:	460b      	mov	r3, r1
 8008584:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008586:	2300      	movs	r3, #0
 8008588:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008590:	2b00      	cmp	r3, #0
 8008592:	d009      	beq.n	80085a8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	78fa      	ldrb	r2, [r7, #3]
 800859e:	4611      	mov	r1, r2
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	4798      	blx	r3
 80085a4:	4603      	mov	r3, r0
 80085a6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80085a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3710      	adds	r7, #16
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}

080085b2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085b2:	b580      	push	{r7, lr}
 80085b4:	b084      	sub	sp, #16
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	6078      	str	r0, [r7, #4]
 80085ba:	460b      	mov	r3, r1
 80085bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80085be:	2300      	movs	r3, #0
 80085c0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	78fa      	ldrb	r2, [r7, #3]
 80085cc:	4611      	mov	r1, r2
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	4798      	blx	r3
 80085d2:	4603      	mov	r3, r0
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d001      	beq.n	80085dc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80085d8:	2303      	movs	r3, #3
 80085da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80085dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3710      	adds	r7, #16
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}

080085e6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80085e6:	b580      	push	{r7, lr}
 80085e8:	b084      	sub	sp, #16
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
 80085ee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80085f6:	6839      	ldr	r1, [r7, #0]
 80085f8:	4618      	mov	r0, r3
 80085fa:	f001 f908 	bl	800980e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2201      	movs	r2, #1
 8008602:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800860c:	461a      	mov	r2, r3
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800861a:	f003 031f 	and.w	r3, r3, #31
 800861e:	2b02      	cmp	r3, #2
 8008620:	d01a      	beq.n	8008658 <USBD_LL_SetupStage+0x72>
 8008622:	2b02      	cmp	r3, #2
 8008624:	d822      	bhi.n	800866c <USBD_LL_SetupStage+0x86>
 8008626:	2b00      	cmp	r3, #0
 8008628:	d002      	beq.n	8008630 <USBD_LL_SetupStage+0x4a>
 800862a:	2b01      	cmp	r3, #1
 800862c:	d00a      	beq.n	8008644 <USBD_LL_SetupStage+0x5e>
 800862e:	e01d      	b.n	800866c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008636:	4619      	mov	r1, r3
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 fb5f 	bl	8008cfc <USBD_StdDevReq>
 800863e:	4603      	mov	r3, r0
 8008640:	73fb      	strb	r3, [r7, #15]
      break;
 8008642:	e020      	b.n	8008686 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800864a:	4619      	mov	r1, r3
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 fbc7 	bl	8008de0 <USBD_StdItfReq>
 8008652:	4603      	mov	r3, r0
 8008654:	73fb      	strb	r3, [r7, #15]
      break;
 8008656:	e016      	b.n	8008686 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800865e:	4619      	mov	r1, r3
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 fc29 	bl	8008eb8 <USBD_StdEPReq>
 8008666:	4603      	mov	r3, r0
 8008668:	73fb      	strb	r3, [r7, #15]
      break;
 800866a:	e00c      	b.n	8008686 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008672:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008676:	b2db      	uxtb	r3, r3
 8008678:	4619      	mov	r1, r3
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f001 fdd2 	bl	800a224 <USBD_LL_StallEP>
 8008680:	4603      	mov	r3, r0
 8008682:	73fb      	strb	r3, [r7, #15]
      break;
 8008684:	bf00      	nop
  }

  return ret;
 8008686:	7bfb      	ldrb	r3, [r7, #15]
}
 8008688:	4618      	mov	r0, r3
 800868a:	3710      	adds	r7, #16
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b086      	sub	sp, #24
 8008694:	af00      	add	r7, sp, #0
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	460b      	mov	r3, r1
 800869a:	607a      	str	r2, [r7, #4]
 800869c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800869e:	2300      	movs	r3, #0
 80086a0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80086a2:	7afb      	ldrb	r3, [r7, #11]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d16e      	bne.n	8008786 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80086ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80086b6:	2b03      	cmp	r3, #3
 80086b8:	f040 8098 	bne.w	80087ec <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	689a      	ldr	r2, [r3, #8]
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d913      	bls.n	80086f0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	689a      	ldr	r2, [r3, #8]
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	1ad2      	subs	r2, r2, r3
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	68da      	ldr	r2, [r3, #12]
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	4293      	cmp	r3, r2
 80086e0:	bf28      	it	cs
 80086e2:	4613      	movcs	r3, r2
 80086e4:	461a      	mov	r2, r3
 80086e6:	6879      	ldr	r1, [r7, #4]
 80086e8:	68f8      	ldr	r0, [r7, #12]
 80086ea:	f001 f984 	bl	80099f6 <USBD_CtlContinueRx>
 80086ee:	e07d      	b.n	80087ec <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80086f6:	f003 031f 	and.w	r3, r3, #31
 80086fa:	2b02      	cmp	r3, #2
 80086fc:	d014      	beq.n	8008728 <USBD_LL_DataOutStage+0x98>
 80086fe:	2b02      	cmp	r3, #2
 8008700:	d81d      	bhi.n	800873e <USBD_LL_DataOutStage+0xae>
 8008702:	2b00      	cmp	r3, #0
 8008704:	d002      	beq.n	800870c <USBD_LL_DataOutStage+0x7c>
 8008706:	2b01      	cmp	r3, #1
 8008708:	d003      	beq.n	8008712 <USBD_LL_DataOutStage+0x82>
 800870a:	e018      	b.n	800873e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800870c:	2300      	movs	r3, #0
 800870e:	75bb      	strb	r3, [r7, #22]
            break;
 8008710:	e018      	b.n	8008744 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008718:	b2db      	uxtb	r3, r3
 800871a:	4619      	mov	r1, r3
 800871c:	68f8      	ldr	r0, [r7, #12]
 800871e:	f000 fa5e 	bl	8008bde <USBD_CoreFindIF>
 8008722:	4603      	mov	r3, r0
 8008724:	75bb      	strb	r3, [r7, #22]
            break;
 8008726:	e00d      	b.n	8008744 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800872e:	b2db      	uxtb	r3, r3
 8008730:	4619      	mov	r1, r3
 8008732:	68f8      	ldr	r0, [r7, #12]
 8008734:	f000 fa60 	bl	8008bf8 <USBD_CoreFindEP>
 8008738:	4603      	mov	r3, r0
 800873a:	75bb      	strb	r3, [r7, #22]
            break;
 800873c:	e002      	b.n	8008744 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800873e:	2300      	movs	r3, #0
 8008740:	75bb      	strb	r3, [r7, #22]
            break;
 8008742:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008744:	7dbb      	ldrb	r3, [r7, #22]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d119      	bne.n	800877e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008750:	b2db      	uxtb	r3, r3
 8008752:	2b03      	cmp	r3, #3
 8008754:	d113      	bne.n	800877e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008756:	7dba      	ldrb	r2, [r7, #22]
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	32ae      	adds	r2, #174	; 0xae
 800875c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008760:	691b      	ldr	r3, [r3, #16]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d00b      	beq.n	800877e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008766:	7dba      	ldrb	r2, [r7, #22]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800876e:	7dba      	ldrb	r2, [r7, #22]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	32ae      	adds	r2, #174	; 0xae
 8008774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008778:	691b      	ldr	r3, [r3, #16]
 800877a:	68f8      	ldr	r0, [r7, #12]
 800877c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800877e:	68f8      	ldr	r0, [r7, #12]
 8008780:	f001 f94a 	bl	8009a18 <USBD_CtlSendStatus>
 8008784:	e032      	b.n	80087ec <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008786:	7afb      	ldrb	r3, [r7, #11]
 8008788:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800878c:	b2db      	uxtb	r3, r3
 800878e:	4619      	mov	r1, r3
 8008790:	68f8      	ldr	r0, [r7, #12]
 8008792:	f000 fa31 	bl	8008bf8 <USBD_CoreFindEP>
 8008796:	4603      	mov	r3, r0
 8008798:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800879a:	7dbb      	ldrb	r3, [r7, #22]
 800879c:	2bff      	cmp	r3, #255	; 0xff
 800879e:	d025      	beq.n	80087ec <USBD_LL_DataOutStage+0x15c>
 80087a0:	7dbb      	ldrb	r3, [r7, #22]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d122      	bne.n	80087ec <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	2b03      	cmp	r3, #3
 80087b0:	d117      	bne.n	80087e2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80087b2:	7dba      	ldrb	r2, [r7, #22]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	32ae      	adds	r2, #174	; 0xae
 80087b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087bc:	699b      	ldr	r3, [r3, #24]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d00f      	beq.n	80087e2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80087c2:	7dba      	ldrb	r2, [r7, #22]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80087ca:	7dba      	ldrb	r2, [r7, #22]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	32ae      	adds	r2, #174	; 0xae
 80087d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087d4:	699b      	ldr	r3, [r3, #24]
 80087d6:	7afa      	ldrb	r2, [r7, #11]
 80087d8:	4611      	mov	r1, r2
 80087da:	68f8      	ldr	r0, [r7, #12]
 80087dc:	4798      	blx	r3
 80087de:	4603      	mov	r3, r0
 80087e0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80087e2:	7dfb      	ldrb	r3, [r7, #23]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d001      	beq.n	80087ec <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80087e8:	7dfb      	ldrb	r3, [r7, #23]
 80087ea:	e000      	b.n	80087ee <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80087ec:	2300      	movs	r3, #0
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3718      	adds	r7, #24
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b086      	sub	sp, #24
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	60f8      	str	r0, [r7, #12]
 80087fe:	460b      	mov	r3, r1
 8008800:	607a      	str	r2, [r7, #4]
 8008802:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008804:	7afb      	ldrb	r3, [r7, #11]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d16f      	bne.n	80088ea <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	3314      	adds	r3, #20
 800880e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008816:	2b02      	cmp	r3, #2
 8008818:	d15a      	bne.n	80088d0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	689a      	ldr	r2, [r3, #8]
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	429a      	cmp	r2, r3
 8008824:	d914      	bls.n	8008850 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	689a      	ldr	r2, [r3, #8]
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	1ad2      	subs	r2, r2, r3
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	461a      	mov	r2, r3
 800883a:	6879      	ldr	r1, [r7, #4]
 800883c:	68f8      	ldr	r0, [r7, #12]
 800883e:	f001 f8ac 	bl	800999a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008842:	2300      	movs	r3, #0
 8008844:	2200      	movs	r2, #0
 8008846:	2100      	movs	r1, #0
 8008848:	68f8      	ldr	r0, [r7, #12]
 800884a:	f001 fd95 	bl	800a378 <USBD_LL_PrepareReceive>
 800884e:	e03f      	b.n	80088d0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	68da      	ldr	r2, [r3, #12]
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	429a      	cmp	r2, r3
 800885a:	d11c      	bne.n	8008896 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	685a      	ldr	r2, [r3, #4]
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008864:	429a      	cmp	r2, r3
 8008866:	d316      	bcc.n	8008896 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	685a      	ldr	r2, [r3, #4]
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008872:	429a      	cmp	r2, r3
 8008874:	d20f      	bcs.n	8008896 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008876:	2200      	movs	r2, #0
 8008878:	2100      	movs	r1, #0
 800887a:	68f8      	ldr	r0, [r7, #12]
 800887c:	f001 f88d 	bl	800999a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2200      	movs	r2, #0
 8008884:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008888:	2300      	movs	r3, #0
 800888a:	2200      	movs	r2, #0
 800888c:	2100      	movs	r1, #0
 800888e:	68f8      	ldr	r0, [r7, #12]
 8008890:	f001 fd72 	bl	800a378 <USBD_LL_PrepareReceive>
 8008894:	e01c      	b.n	80088d0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800889c:	b2db      	uxtb	r3, r3
 800889e:	2b03      	cmp	r3, #3
 80088a0:	d10f      	bne.n	80088c2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088a8:	68db      	ldr	r3, [r3, #12]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d009      	beq.n	80088c2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2200      	movs	r2, #0
 80088b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088bc:	68db      	ldr	r3, [r3, #12]
 80088be:	68f8      	ldr	r0, [r7, #12]
 80088c0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80088c2:	2180      	movs	r1, #128	; 0x80
 80088c4:	68f8      	ldr	r0, [r7, #12]
 80088c6:	f001 fcad 	bl	800a224 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80088ca:	68f8      	ldr	r0, [r7, #12]
 80088cc:	f001 f8b7 	bl	8009a3e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d03a      	beq.n	8008950 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80088da:	68f8      	ldr	r0, [r7, #12]
 80088dc:	f7ff fe42 	bl	8008564 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2200      	movs	r2, #0
 80088e4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80088e8:	e032      	b.n	8008950 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80088ea:	7afb      	ldrb	r3, [r7, #11]
 80088ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	4619      	mov	r1, r3
 80088f4:	68f8      	ldr	r0, [r7, #12]
 80088f6:	f000 f97f 	bl	8008bf8 <USBD_CoreFindEP>
 80088fa:	4603      	mov	r3, r0
 80088fc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80088fe:	7dfb      	ldrb	r3, [r7, #23]
 8008900:	2bff      	cmp	r3, #255	; 0xff
 8008902:	d025      	beq.n	8008950 <USBD_LL_DataInStage+0x15a>
 8008904:	7dfb      	ldrb	r3, [r7, #23]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d122      	bne.n	8008950 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008910:	b2db      	uxtb	r3, r3
 8008912:	2b03      	cmp	r3, #3
 8008914:	d11c      	bne.n	8008950 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008916:	7dfa      	ldrb	r2, [r7, #23]
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	32ae      	adds	r2, #174	; 0xae
 800891c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008920:	695b      	ldr	r3, [r3, #20]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d014      	beq.n	8008950 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008926:	7dfa      	ldrb	r2, [r7, #23]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800892e:	7dfa      	ldrb	r2, [r7, #23]
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	32ae      	adds	r2, #174	; 0xae
 8008934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008938:	695b      	ldr	r3, [r3, #20]
 800893a:	7afa      	ldrb	r2, [r7, #11]
 800893c:	4611      	mov	r1, r2
 800893e:	68f8      	ldr	r0, [r7, #12]
 8008940:	4798      	blx	r3
 8008942:	4603      	mov	r3, r0
 8008944:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008946:	7dbb      	ldrb	r3, [r7, #22]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d001      	beq.n	8008950 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800894c:	7dbb      	ldrb	r3, [r7, #22]
 800894e:	e000      	b.n	8008952 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	3718      	adds	r7, #24
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800895a:	b580      	push	{r7, lr}
 800895c:	b084      	sub	sp, #16
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008962:	2300      	movs	r3, #0
 8008964:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2201      	movs	r2, #1
 800896a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2200      	movs	r2, #0
 8008972:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008992:	2b00      	cmp	r3, #0
 8008994:	d014      	beq.n	80089c0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d00e      	beq.n	80089c0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	6852      	ldr	r2, [r2, #4]
 80089ae:	b2d2      	uxtb	r2, r2
 80089b0:	4611      	mov	r1, r2
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	4798      	blx	r3
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d001      	beq.n	80089c0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80089bc:	2303      	movs	r3, #3
 80089be:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089c0:	2340      	movs	r3, #64	; 0x40
 80089c2:	2200      	movs	r2, #0
 80089c4:	2100      	movs	r1, #0
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f001 fbe7 	bl	800a19a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2201      	movs	r2, #1
 80089d0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2240      	movs	r2, #64	; 0x40
 80089d8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089dc:	2340      	movs	r3, #64	; 0x40
 80089de:	2200      	movs	r2, #0
 80089e0:	2180      	movs	r1, #128	; 0x80
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f001 fbd9 	bl	800a19a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2201      	movs	r2, #1
 80089ec:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2240      	movs	r2, #64	; 0x40
 80089f2:	621a      	str	r2, [r3, #32]

  return ret;
 80089f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3710      	adds	r7, #16
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}

080089fe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80089fe:	b480      	push	{r7}
 8008a00:	b083      	sub	sp, #12
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
 8008a06:	460b      	mov	r3, r1
 8008a08:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	78fa      	ldrb	r2, [r7, #3]
 8008a0e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	370c      	adds	r7, #12
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr

08008a1e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008a1e:	b480      	push	{r7}
 8008a20:	b083      	sub	sp, #12
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a2c:	b2da      	uxtb	r2, r3
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2204      	movs	r2, #4
 8008a38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008a3c:	2300      	movs	r3, #0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	370c      	adds	r7, #12
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr

08008a4a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008a4a:	b480      	push	{r7}
 8008a4c:	b083      	sub	sp, #12
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a58:	b2db      	uxtb	r3, r3
 8008a5a:	2b04      	cmp	r3, #4
 8008a5c:	d106      	bne.n	8008a6c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008a64:	b2da      	uxtb	r2, r3
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	370c      	adds	r7, #12
 8008a72:	46bd      	mov	sp, r7
 8008a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a78:	4770      	bx	lr

08008a7a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	b082      	sub	sp, #8
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	2b03      	cmp	r3, #3
 8008a8c:	d110      	bne.n	8008ab0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d00b      	beq.n	8008ab0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a9e:	69db      	ldr	r3, [r3, #28]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d005      	beq.n	8008ab0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aaa:	69db      	ldr	r3, [r3, #28]
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008ab0:	2300      	movs	r3, #0
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3708      	adds	r7, #8
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}

08008aba <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008aba:	b580      	push	{r7, lr}
 8008abc:	b082      	sub	sp, #8
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
 8008ac2:	460b      	mov	r3, r1
 8008ac4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	32ae      	adds	r2, #174	; 0xae
 8008ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d101      	bne.n	8008adc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008ad8:	2303      	movs	r3, #3
 8008ada:	e01c      	b.n	8008b16 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	2b03      	cmp	r3, #3
 8008ae6:	d115      	bne.n	8008b14 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	32ae      	adds	r2, #174	; 0xae
 8008af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008af6:	6a1b      	ldr	r3, [r3, #32]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d00b      	beq.n	8008b14 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	32ae      	adds	r2, #174	; 0xae
 8008b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b0a:	6a1b      	ldr	r3, [r3, #32]
 8008b0c:	78fa      	ldrb	r2, [r7, #3]
 8008b0e:	4611      	mov	r1, r2
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b14:	2300      	movs	r3, #0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3708      	adds	r7, #8
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008b1e:	b580      	push	{r7, lr}
 8008b20:	b082      	sub	sp, #8
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
 8008b26:	460b      	mov	r3, r1
 8008b28:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	32ae      	adds	r2, #174	; 0xae
 8008b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d101      	bne.n	8008b40 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008b3c:	2303      	movs	r3, #3
 8008b3e:	e01c      	b.n	8008b7a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	2b03      	cmp	r3, #3
 8008b4a:	d115      	bne.n	8008b78 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	32ae      	adds	r2, #174	; 0xae
 8008b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d00b      	beq.n	8008b78 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	32ae      	adds	r2, #174	; 0xae
 8008b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b70:	78fa      	ldrb	r2, [r7, #3]
 8008b72:	4611      	mov	r1, r2
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b78:	2300      	movs	r3, #0
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3708      	adds	r7, #8
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}

08008b82 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008b82:	b480      	push	{r7}
 8008b84:	b083      	sub	sp, #12
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008b8a:	2300      	movs	r3, #0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	370c      	adds	r7, #12
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d00e      	beq.n	8008bd4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	6852      	ldr	r2, [r2, #4]
 8008bc2:	b2d2      	uxtb	r2, r2
 8008bc4:	4611      	mov	r1, r2
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	4798      	blx	r3
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d001      	beq.n	8008bd4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008bd0:	2303      	movs	r3, #3
 8008bd2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3710      	adds	r7, #16
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}

08008bde <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008bde:	b480      	push	{r7}
 8008be0:	b083      	sub	sp, #12
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
 8008be6:	460b      	mov	r3, r1
 8008be8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008bea:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	460b      	mov	r3, r1
 8008c02:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008c04:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	370c      	adds	r7, #12
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr

08008c12 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b086      	sub	sp, #24
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
 8008c1a:	460b      	mov	r3, r1
 8008c1c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008c26:	2300      	movs	r3, #0
 8008c28:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	885b      	ldrh	r3, [r3, #2]
 8008c2e:	b29a      	uxth	r2, r3
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d920      	bls.n	8008c7c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008c42:	e013      	b.n	8008c6c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008c44:	f107 030a 	add.w	r3, r7, #10
 8008c48:	4619      	mov	r1, r3
 8008c4a:	6978      	ldr	r0, [r7, #20]
 8008c4c:	f000 f81b 	bl	8008c86 <USBD_GetNextDesc>
 8008c50:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	785b      	ldrb	r3, [r3, #1]
 8008c56:	2b05      	cmp	r3, #5
 8008c58:	d108      	bne.n	8008c6c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	789b      	ldrb	r3, [r3, #2]
 8008c62:	78fa      	ldrb	r2, [r7, #3]
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d008      	beq.n	8008c7a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	885b      	ldrh	r3, [r3, #2]
 8008c70:	b29a      	uxth	r2, r3
 8008c72:	897b      	ldrh	r3, [r7, #10]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d8e5      	bhi.n	8008c44 <USBD_GetEpDesc+0x32>
 8008c78:	e000      	b.n	8008c7c <USBD_GetEpDesc+0x6a>
          break;
 8008c7a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008c7c:	693b      	ldr	r3, [r7, #16]
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3718      	adds	r7, #24
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}

08008c86 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008c86:	b480      	push	{r7}
 8008c88:	b085      	sub	sp, #20
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	6078      	str	r0, [r7, #4]
 8008c8e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	881a      	ldrh	r2, [r3, #0]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	4413      	add	r3, r2
 8008ca0:	b29a      	uxth	r2, r3
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	461a      	mov	r2, r3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	4413      	add	r3, r2
 8008cb0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3714      	adds	r7, #20
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b087      	sub	sp, #28
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008cde:	8a3b      	ldrh	r3, [r7, #16]
 8008ce0:	021b      	lsls	r3, r3, #8
 8008ce2:	b21a      	sxth	r2, r3
 8008ce4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	b21b      	sxth	r3, r3
 8008cec:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008cee:	89fb      	ldrh	r3, [r7, #14]
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	371c      	adds	r7, #28
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d06:	2300      	movs	r3, #0
 8008d08:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d12:	2b40      	cmp	r3, #64	; 0x40
 8008d14:	d005      	beq.n	8008d22 <USBD_StdDevReq+0x26>
 8008d16:	2b40      	cmp	r3, #64	; 0x40
 8008d18:	d857      	bhi.n	8008dca <USBD_StdDevReq+0xce>
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00f      	beq.n	8008d3e <USBD_StdDevReq+0x42>
 8008d1e:	2b20      	cmp	r3, #32
 8008d20:	d153      	bne.n	8008dca <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	32ae      	adds	r2, #174	; 0xae
 8008d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	6839      	ldr	r1, [r7, #0]
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	4798      	blx	r3
 8008d38:	4603      	mov	r3, r0
 8008d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8008d3c:	e04a      	b.n	8008dd4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	785b      	ldrb	r3, [r3, #1]
 8008d42:	2b09      	cmp	r3, #9
 8008d44:	d83b      	bhi.n	8008dbe <USBD_StdDevReq+0xc2>
 8008d46:	a201      	add	r2, pc, #4	; (adr r2, 8008d4c <USBD_StdDevReq+0x50>)
 8008d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d4c:	08008da1 	.word	0x08008da1
 8008d50:	08008db5 	.word	0x08008db5
 8008d54:	08008dbf 	.word	0x08008dbf
 8008d58:	08008dab 	.word	0x08008dab
 8008d5c:	08008dbf 	.word	0x08008dbf
 8008d60:	08008d7f 	.word	0x08008d7f
 8008d64:	08008d75 	.word	0x08008d75
 8008d68:	08008dbf 	.word	0x08008dbf
 8008d6c:	08008d97 	.word	0x08008d97
 8008d70:	08008d89 	.word	0x08008d89
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008d74:	6839      	ldr	r1, [r7, #0]
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 fa3c 	bl	80091f4 <USBD_GetDescriptor>
          break;
 8008d7c:	e024      	b.n	8008dc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008d7e:	6839      	ldr	r1, [r7, #0]
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 fba1 	bl	80094c8 <USBD_SetAddress>
          break;
 8008d86:	e01f      	b.n	8008dc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008d88:	6839      	ldr	r1, [r7, #0]
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 fbe0 	bl	8009550 <USBD_SetConfig>
 8008d90:	4603      	mov	r3, r0
 8008d92:	73fb      	strb	r3, [r7, #15]
          break;
 8008d94:	e018      	b.n	8008dc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008d96:	6839      	ldr	r1, [r7, #0]
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 fc83 	bl	80096a4 <USBD_GetConfig>
          break;
 8008d9e:	e013      	b.n	8008dc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008da0:	6839      	ldr	r1, [r7, #0]
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 fcb4 	bl	8009710 <USBD_GetStatus>
          break;
 8008da8:	e00e      	b.n	8008dc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008daa:	6839      	ldr	r1, [r7, #0]
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 fce3 	bl	8009778 <USBD_SetFeature>
          break;
 8008db2:	e009      	b.n	8008dc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008db4:	6839      	ldr	r1, [r7, #0]
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 fd07 	bl	80097ca <USBD_ClrFeature>
          break;
 8008dbc:	e004      	b.n	8008dc8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008dbe:	6839      	ldr	r1, [r7, #0]
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 fd5e 	bl	8009882 <USBD_CtlError>
          break;
 8008dc6:	bf00      	nop
      }
      break;
 8008dc8:	e004      	b.n	8008dd4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008dca:	6839      	ldr	r1, [r7, #0]
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 fd58 	bl	8009882 <USBD_CtlError>
      break;
 8008dd2:	bf00      	nop
  }

  return ret;
 8008dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3710      	adds	r7, #16
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop

08008de0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008dea:	2300      	movs	r3, #0
 8008dec:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008df6:	2b40      	cmp	r3, #64	; 0x40
 8008df8:	d005      	beq.n	8008e06 <USBD_StdItfReq+0x26>
 8008dfa:	2b40      	cmp	r3, #64	; 0x40
 8008dfc:	d852      	bhi.n	8008ea4 <USBD_StdItfReq+0xc4>
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d001      	beq.n	8008e06 <USBD_StdItfReq+0x26>
 8008e02:	2b20      	cmp	r3, #32
 8008e04:	d14e      	bne.n	8008ea4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	3b01      	subs	r3, #1
 8008e10:	2b02      	cmp	r3, #2
 8008e12:	d840      	bhi.n	8008e96 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	889b      	ldrh	r3, [r3, #4]
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d836      	bhi.n	8008e8c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	889b      	ldrh	r3, [r3, #4]
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	4619      	mov	r1, r3
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f7ff fed9 	bl	8008bde <USBD_CoreFindIF>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e30:	7bbb      	ldrb	r3, [r7, #14]
 8008e32:	2bff      	cmp	r3, #255	; 0xff
 8008e34:	d01d      	beq.n	8008e72 <USBD_StdItfReq+0x92>
 8008e36:	7bbb      	ldrb	r3, [r7, #14]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d11a      	bne.n	8008e72 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008e3c:	7bba      	ldrb	r2, [r7, #14]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	32ae      	adds	r2, #174	; 0xae
 8008e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d00f      	beq.n	8008e6c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008e4c:	7bba      	ldrb	r2, [r7, #14]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008e54:	7bba      	ldrb	r2, [r7, #14]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	32ae      	adds	r2, #174	; 0xae
 8008e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	6839      	ldr	r1, [r7, #0]
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	4798      	blx	r3
 8008e66:	4603      	mov	r3, r0
 8008e68:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008e6a:	e004      	b.n	8008e76 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008e6c:	2303      	movs	r3, #3
 8008e6e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008e70:	e001      	b.n	8008e76 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008e72:	2303      	movs	r3, #3
 8008e74:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	88db      	ldrh	r3, [r3, #6]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d110      	bne.n	8008ea0 <USBD_StdItfReq+0xc0>
 8008e7e:	7bfb      	ldrb	r3, [r7, #15]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d10d      	bne.n	8008ea0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 fdc7 	bl	8009a18 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008e8a:	e009      	b.n	8008ea0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008e8c:	6839      	ldr	r1, [r7, #0]
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 fcf7 	bl	8009882 <USBD_CtlError>
          break;
 8008e94:	e004      	b.n	8008ea0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008e96:	6839      	ldr	r1, [r7, #0]
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 fcf2 	bl	8009882 <USBD_CtlError>
          break;
 8008e9e:	e000      	b.n	8008ea2 <USBD_StdItfReq+0xc2>
          break;
 8008ea0:	bf00      	nop
      }
      break;
 8008ea2:	e004      	b.n	8008eae <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008ea4:	6839      	ldr	r1, [r7, #0]
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 fceb 	bl	8009882 <USBD_CtlError>
      break;
 8008eac:	bf00      	nop
  }

  return ret;
 8008eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3710      	adds	r7, #16
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	889b      	ldrh	r3, [r3, #4]
 8008eca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ed4:	2b40      	cmp	r3, #64	; 0x40
 8008ed6:	d007      	beq.n	8008ee8 <USBD_StdEPReq+0x30>
 8008ed8:	2b40      	cmp	r3, #64	; 0x40
 8008eda:	f200 817f 	bhi.w	80091dc <USBD_StdEPReq+0x324>
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d02a      	beq.n	8008f38 <USBD_StdEPReq+0x80>
 8008ee2:	2b20      	cmp	r3, #32
 8008ee4:	f040 817a 	bne.w	80091dc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008ee8:	7bbb      	ldrb	r3, [r7, #14]
 8008eea:	4619      	mov	r1, r3
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f7ff fe83 	bl	8008bf8 <USBD_CoreFindEP>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ef6:	7b7b      	ldrb	r3, [r7, #13]
 8008ef8:	2bff      	cmp	r3, #255	; 0xff
 8008efa:	f000 8174 	beq.w	80091e6 <USBD_StdEPReq+0x32e>
 8008efe:	7b7b      	ldrb	r3, [r7, #13]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	f040 8170 	bne.w	80091e6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008f06:	7b7a      	ldrb	r2, [r7, #13]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008f0e:	7b7a      	ldrb	r2, [r7, #13]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	32ae      	adds	r2, #174	; 0xae
 8008f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f18:	689b      	ldr	r3, [r3, #8]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	f000 8163 	beq.w	80091e6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008f20:	7b7a      	ldrb	r2, [r7, #13]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	32ae      	adds	r2, #174	; 0xae
 8008f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	6839      	ldr	r1, [r7, #0]
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	4798      	blx	r3
 8008f32:	4603      	mov	r3, r0
 8008f34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008f36:	e156      	b.n	80091e6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	785b      	ldrb	r3, [r3, #1]
 8008f3c:	2b03      	cmp	r3, #3
 8008f3e:	d008      	beq.n	8008f52 <USBD_StdEPReq+0x9a>
 8008f40:	2b03      	cmp	r3, #3
 8008f42:	f300 8145 	bgt.w	80091d0 <USBD_StdEPReq+0x318>
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	f000 809b 	beq.w	8009082 <USBD_StdEPReq+0x1ca>
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d03c      	beq.n	8008fca <USBD_StdEPReq+0x112>
 8008f50:	e13e      	b.n	80091d0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	2b02      	cmp	r3, #2
 8008f5c:	d002      	beq.n	8008f64 <USBD_StdEPReq+0xac>
 8008f5e:	2b03      	cmp	r3, #3
 8008f60:	d016      	beq.n	8008f90 <USBD_StdEPReq+0xd8>
 8008f62:	e02c      	b.n	8008fbe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f64:	7bbb      	ldrb	r3, [r7, #14]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d00d      	beq.n	8008f86 <USBD_StdEPReq+0xce>
 8008f6a:	7bbb      	ldrb	r3, [r7, #14]
 8008f6c:	2b80      	cmp	r3, #128	; 0x80
 8008f6e:	d00a      	beq.n	8008f86 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f70:	7bbb      	ldrb	r3, [r7, #14]
 8008f72:	4619      	mov	r1, r3
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f001 f955 	bl	800a224 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f7a:	2180      	movs	r1, #128	; 0x80
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f001 f951 	bl	800a224 <USBD_LL_StallEP>
 8008f82:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f84:	e020      	b.n	8008fc8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008f86:	6839      	ldr	r1, [r7, #0]
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 fc7a 	bl	8009882 <USBD_CtlError>
              break;
 8008f8e:	e01b      	b.n	8008fc8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	885b      	ldrh	r3, [r3, #2]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d10e      	bne.n	8008fb6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008f98:	7bbb      	ldrb	r3, [r7, #14]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d00b      	beq.n	8008fb6 <USBD_StdEPReq+0xfe>
 8008f9e:	7bbb      	ldrb	r3, [r7, #14]
 8008fa0:	2b80      	cmp	r3, #128	; 0x80
 8008fa2:	d008      	beq.n	8008fb6 <USBD_StdEPReq+0xfe>
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	88db      	ldrh	r3, [r3, #6]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d104      	bne.n	8008fb6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008fac:	7bbb      	ldrb	r3, [r7, #14]
 8008fae:	4619      	mov	r1, r3
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f001 f937 	bl	800a224 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 fd2e 	bl	8009a18 <USBD_CtlSendStatus>

              break;
 8008fbc:	e004      	b.n	8008fc8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008fbe:	6839      	ldr	r1, [r7, #0]
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 fc5e 	bl	8009882 <USBD_CtlError>
              break;
 8008fc6:	bf00      	nop
          }
          break;
 8008fc8:	e107      	b.n	80091da <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	d002      	beq.n	8008fdc <USBD_StdEPReq+0x124>
 8008fd6:	2b03      	cmp	r3, #3
 8008fd8:	d016      	beq.n	8009008 <USBD_StdEPReq+0x150>
 8008fda:	e04b      	b.n	8009074 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fdc:	7bbb      	ldrb	r3, [r7, #14]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d00d      	beq.n	8008ffe <USBD_StdEPReq+0x146>
 8008fe2:	7bbb      	ldrb	r3, [r7, #14]
 8008fe4:	2b80      	cmp	r3, #128	; 0x80
 8008fe6:	d00a      	beq.n	8008ffe <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008fe8:	7bbb      	ldrb	r3, [r7, #14]
 8008fea:	4619      	mov	r1, r3
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f001 f919 	bl	800a224 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ff2:	2180      	movs	r1, #128	; 0x80
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f001 f915 	bl	800a224 <USBD_LL_StallEP>
 8008ffa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ffc:	e040      	b.n	8009080 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008ffe:	6839      	ldr	r1, [r7, #0]
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 fc3e 	bl	8009882 <USBD_CtlError>
              break;
 8009006:	e03b      	b.n	8009080 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	885b      	ldrh	r3, [r3, #2]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d136      	bne.n	800907e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009010:	7bbb      	ldrb	r3, [r7, #14]
 8009012:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009016:	2b00      	cmp	r3, #0
 8009018:	d004      	beq.n	8009024 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800901a:	7bbb      	ldrb	r3, [r7, #14]
 800901c:	4619      	mov	r1, r3
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f001 f91f 	bl	800a262 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 fcf7 	bl	8009a18 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800902a:	7bbb      	ldrb	r3, [r7, #14]
 800902c:	4619      	mov	r1, r3
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f7ff fde2 	bl	8008bf8 <USBD_CoreFindEP>
 8009034:	4603      	mov	r3, r0
 8009036:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009038:	7b7b      	ldrb	r3, [r7, #13]
 800903a:	2bff      	cmp	r3, #255	; 0xff
 800903c:	d01f      	beq.n	800907e <USBD_StdEPReq+0x1c6>
 800903e:	7b7b      	ldrb	r3, [r7, #13]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d11c      	bne.n	800907e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009044:	7b7a      	ldrb	r2, [r7, #13]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800904c:	7b7a      	ldrb	r2, [r7, #13]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	32ae      	adds	r2, #174	; 0xae
 8009052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d010      	beq.n	800907e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800905c:	7b7a      	ldrb	r2, [r7, #13]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	32ae      	adds	r2, #174	; 0xae
 8009062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009066:	689b      	ldr	r3, [r3, #8]
 8009068:	6839      	ldr	r1, [r7, #0]
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	4798      	blx	r3
 800906e:	4603      	mov	r3, r0
 8009070:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009072:	e004      	b.n	800907e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009074:	6839      	ldr	r1, [r7, #0]
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 fc03 	bl	8009882 <USBD_CtlError>
              break;
 800907c:	e000      	b.n	8009080 <USBD_StdEPReq+0x1c8>
              break;
 800907e:	bf00      	nop
          }
          break;
 8009080:	e0ab      	b.n	80091da <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009088:	b2db      	uxtb	r3, r3
 800908a:	2b02      	cmp	r3, #2
 800908c:	d002      	beq.n	8009094 <USBD_StdEPReq+0x1dc>
 800908e:	2b03      	cmp	r3, #3
 8009090:	d032      	beq.n	80090f8 <USBD_StdEPReq+0x240>
 8009092:	e097      	b.n	80091c4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009094:	7bbb      	ldrb	r3, [r7, #14]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d007      	beq.n	80090aa <USBD_StdEPReq+0x1f2>
 800909a:	7bbb      	ldrb	r3, [r7, #14]
 800909c:	2b80      	cmp	r3, #128	; 0x80
 800909e:	d004      	beq.n	80090aa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80090a0:	6839      	ldr	r1, [r7, #0]
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 fbed 	bl	8009882 <USBD_CtlError>
                break;
 80090a8:	e091      	b.n	80091ce <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	da0b      	bge.n	80090ca <USBD_StdEPReq+0x212>
 80090b2:	7bbb      	ldrb	r3, [r7, #14]
 80090b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090b8:	4613      	mov	r3, r2
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	4413      	add	r3, r2
 80090be:	009b      	lsls	r3, r3, #2
 80090c0:	3310      	adds	r3, #16
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	4413      	add	r3, r2
 80090c6:	3304      	adds	r3, #4
 80090c8:	e00b      	b.n	80090e2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80090ca:	7bbb      	ldrb	r3, [r7, #14]
 80090cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090d0:	4613      	mov	r3, r2
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	4413      	add	r3, r2
 80090d6:	009b      	lsls	r3, r3, #2
 80090d8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	4413      	add	r3, r2
 80090e0:	3304      	adds	r3, #4
 80090e2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	2200      	movs	r2, #0
 80090e8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	2202      	movs	r2, #2
 80090ee:	4619      	mov	r1, r3
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 fc37 	bl	8009964 <USBD_CtlSendData>
              break;
 80090f6:	e06a      	b.n	80091ce <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80090f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	da11      	bge.n	8009124 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009100:	7bbb      	ldrb	r3, [r7, #14]
 8009102:	f003 020f 	and.w	r2, r3, #15
 8009106:	6879      	ldr	r1, [r7, #4]
 8009108:	4613      	mov	r3, r2
 800910a:	009b      	lsls	r3, r3, #2
 800910c:	4413      	add	r3, r2
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	440b      	add	r3, r1
 8009112:	3324      	adds	r3, #36	; 0x24
 8009114:	881b      	ldrh	r3, [r3, #0]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d117      	bne.n	800914a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800911a:	6839      	ldr	r1, [r7, #0]
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 fbb0 	bl	8009882 <USBD_CtlError>
                  break;
 8009122:	e054      	b.n	80091ce <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009124:	7bbb      	ldrb	r3, [r7, #14]
 8009126:	f003 020f 	and.w	r2, r3, #15
 800912a:	6879      	ldr	r1, [r7, #4]
 800912c:	4613      	mov	r3, r2
 800912e:	009b      	lsls	r3, r3, #2
 8009130:	4413      	add	r3, r2
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	440b      	add	r3, r1
 8009136:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800913a:	881b      	ldrh	r3, [r3, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d104      	bne.n	800914a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009140:	6839      	ldr	r1, [r7, #0]
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 fb9d 	bl	8009882 <USBD_CtlError>
                  break;
 8009148:	e041      	b.n	80091ce <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800914a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800914e:	2b00      	cmp	r3, #0
 8009150:	da0b      	bge.n	800916a <USBD_StdEPReq+0x2b2>
 8009152:	7bbb      	ldrb	r3, [r7, #14]
 8009154:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009158:	4613      	mov	r3, r2
 800915a:	009b      	lsls	r3, r3, #2
 800915c:	4413      	add	r3, r2
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	3310      	adds	r3, #16
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	4413      	add	r3, r2
 8009166:	3304      	adds	r3, #4
 8009168:	e00b      	b.n	8009182 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800916a:	7bbb      	ldrb	r3, [r7, #14]
 800916c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009170:	4613      	mov	r3, r2
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	4413      	add	r3, r2
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	4413      	add	r3, r2
 8009180:	3304      	adds	r3, #4
 8009182:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009184:	7bbb      	ldrb	r3, [r7, #14]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d002      	beq.n	8009190 <USBD_StdEPReq+0x2d8>
 800918a:	7bbb      	ldrb	r3, [r7, #14]
 800918c:	2b80      	cmp	r3, #128	; 0x80
 800918e:	d103      	bne.n	8009198 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	2200      	movs	r2, #0
 8009194:	601a      	str	r2, [r3, #0]
 8009196:	e00e      	b.n	80091b6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009198:	7bbb      	ldrb	r3, [r7, #14]
 800919a:	4619      	mov	r1, r3
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f001 f87f 	bl	800a2a0 <USBD_LL_IsStallEP>
 80091a2:	4603      	mov	r3, r0
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d003      	beq.n	80091b0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	2201      	movs	r2, #1
 80091ac:	601a      	str	r2, [r3, #0]
 80091ae:	e002      	b.n	80091b6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	2200      	movs	r2, #0
 80091b4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	2202      	movs	r2, #2
 80091ba:	4619      	mov	r1, r3
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 fbd1 	bl	8009964 <USBD_CtlSendData>
              break;
 80091c2:	e004      	b.n	80091ce <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80091c4:	6839      	ldr	r1, [r7, #0]
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 fb5b 	bl	8009882 <USBD_CtlError>
              break;
 80091cc:	bf00      	nop
          }
          break;
 80091ce:	e004      	b.n	80091da <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80091d0:	6839      	ldr	r1, [r7, #0]
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 fb55 	bl	8009882 <USBD_CtlError>
          break;
 80091d8:	bf00      	nop
      }
      break;
 80091da:	e005      	b.n	80091e8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80091dc:	6839      	ldr	r1, [r7, #0]
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 fb4f 	bl	8009882 <USBD_CtlError>
      break;
 80091e4:	e000      	b.n	80091e8 <USBD_StdEPReq+0x330>
      break;
 80091e6:	bf00      	nop
  }

  return ret;
 80091e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3710      	adds	r7, #16
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
	...

080091f4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80091fe:	2300      	movs	r3, #0
 8009200:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009202:	2300      	movs	r3, #0
 8009204:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009206:	2300      	movs	r3, #0
 8009208:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	885b      	ldrh	r3, [r3, #2]
 800920e:	0a1b      	lsrs	r3, r3, #8
 8009210:	b29b      	uxth	r3, r3
 8009212:	3b01      	subs	r3, #1
 8009214:	2b06      	cmp	r3, #6
 8009216:	f200 8128 	bhi.w	800946a <USBD_GetDescriptor+0x276>
 800921a:	a201      	add	r2, pc, #4	; (adr r2, 8009220 <USBD_GetDescriptor+0x2c>)
 800921c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009220:	0800923d 	.word	0x0800923d
 8009224:	08009255 	.word	0x08009255
 8009228:	08009295 	.word	0x08009295
 800922c:	0800946b 	.word	0x0800946b
 8009230:	0800946b 	.word	0x0800946b
 8009234:	0800940b 	.word	0x0800940b
 8009238:	08009437 	.word	0x08009437
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	7c12      	ldrb	r2, [r2, #16]
 8009248:	f107 0108 	add.w	r1, r7, #8
 800924c:	4610      	mov	r0, r2
 800924e:	4798      	blx	r3
 8009250:	60f8      	str	r0, [r7, #12]
      break;
 8009252:	e112      	b.n	800947a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	7c1b      	ldrb	r3, [r3, #16]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d10d      	bne.n	8009278 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009264:	f107 0208 	add.w	r2, r7, #8
 8009268:	4610      	mov	r0, r2
 800926a:	4798      	blx	r3
 800926c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	3301      	adds	r3, #1
 8009272:	2202      	movs	r2, #2
 8009274:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009276:	e100      	b.n	800947a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800927e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009280:	f107 0208 	add.w	r2, r7, #8
 8009284:	4610      	mov	r0, r2
 8009286:	4798      	blx	r3
 8009288:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	3301      	adds	r3, #1
 800928e:	2202      	movs	r2, #2
 8009290:	701a      	strb	r2, [r3, #0]
      break;
 8009292:	e0f2      	b.n	800947a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	885b      	ldrh	r3, [r3, #2]
 8009298:	b2db      	uxtb	r3, r3
 800929a:	2b05      	cmp	r3, #5
 800929c:	f200 80ac 	bhi.w	80093f8 <USBD_GetDescriptor+0x204>
 80092a0:	a201      	add	r2, pc, #4	; (adr r2, 80092a8 <USBD_GetDescriptor+0xb4>)
 80092a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a6:	bf00      	nop
 80092a8:	080092c1 	.word	0x080092c1
 80092ac:	080092f5 	.word	0x080092f5
 80092b0:	08009329 	.word	0x08009329
 80092b4:	0800935d 	.word	0x0800935d
 80092b8:	08009391 	.word	0x08009391
 80092bc:	080093c5 	.word	0x080093c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d00b      	beq.n	80092e4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	7c12      	ldrb	r2, [r2, #16]
 80092d8:	f107 0108 	add.w	r1, r7, #8
 80092dc:	4610      	mov	r0, r2
 80092de:	4798      	blx	r3
 80092e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092e2:	e091      	b.n	8009408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092e4:	6839      	ldr	r1, [r7, #0]
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 facb 	bl	8009882 <USBD_CtlError>
            err++;
 80092ec:	7afb      	ldrb	r3, [r7, #11]
 80092ee:	3301      	adds	r3, #1
 80092f0:	72fb      	strb	r3, [r7, #11]
          break;
 80092f2:	e089      	b.n	8009408 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d00b      	beq.n	8009318 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009306:	689b      	ldr	r3, [r3, #8]
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	7c12      	ldrb	r2, [r2, #16]
 800930c:	f107 0108 	add.w	r1, r7, #8
 8009310:	4610      	mov	r0, r2
 8009312:	4798      	blx	r3
 8009314:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009316:	e077      	b.n	8009408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009318:	6839      	ldr	r1, [r7, #0]
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 fab1 	bl	8009882 <USBD_CtlError>
            err++;
 8009320:	7afb      	ldrb	r3, [r7, #11]
 8009322:	3301      	adds	r3, #1
 8009324:	72fb      	strb	r3, [r7, #11]
          break;
 8009326:	e06f      	b.n	8009408 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d00b      	beq.n	800934c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	7c12      	ldrb	r2, [r2, #16]
 8009340:	f107 0108 	add.w	r1, r7, #8
 8009344:	4610      	mov	r0, r2
 8009346:	4798      	blx	r3
 8009348:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800934a:	e05d      	b.n	8009408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800934c:	6839      	ldr	r1, [r7, #0]
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 fa97 	bl	8009882 <USBD_CtlError>
            err++;
 8009354:	7afb      	ldrb	r3, [r7, #11]
 8009356:	3301      	adds	r3, #1
 8009358:	72fb      	strb	r3, [r7, #11]
          break;
 800935a:	e055      	b.n	8009408 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009362:	691b      	ldr	r3, [r3, #16]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d00b      	beq.n	8009380 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800936e:	691b      	ldr	r3, [r3, #16]
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	7c12      	ldrb	r2, [r2, #16]
 8009374:	f107 0108 	add.w	r1, r7, #8
 8009378:	4610      	mov	r0, r2
 800937a:	4798      	blx	r3
 800937c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800937e:	e043      	b.n	8009408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009380:	6839      	ldr	r1, [r7, #0]
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 fa7d 	bl	8009882 <USBD_CtlError>
            err++;
 8009388:	7afb      	ldrb	r3, [r7, #11]
 800938a:	3301      	adds	r3, #1
 800938c:	72fb      	strb	r3, [r7, #11]
          break;
 800938e:	e03b      	b.n	8009408 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009396:	695b      	ldr	r3, [r3, #20]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d00b      	beq.n	80093b4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093a2:	695b      	ldr	r3, [r3, #20]
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	7c12      	ldrb	r2, [r2, #16]
 80093a8:	f107 0108 	add.w	r1, r7, #8
 80093ac:	4610      	mov	r0, r2
 80093ae:	4798      	blx	r3
 80093b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093b2:	e029      	b.n	8009408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093b4:	6839      	ldr	r1, [r7, #0]
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 fa63 	bl	8009882 <USBD_CtlError>
            err++;
 80093bc:	7afb      	ldrb	r3, [r7, #11]
 80093be:	3301      	adds	r3, #1
 80093c0:	72fb      	strb	r3, [r7, #11]
          break;
 80093c2:	e021      	b.n	8009408 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093ca:	699b      	ldr	r3, [r3, #24]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d00b      	beq.n	80093e8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093d6:	699b      	ldr	r3, [r3, #24]
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	7c12      	ldrb	r2, [r2, #16]
 80093dc:	f107 0108 	add.w	r1, r7, #8
 80093e0:	4610      	mov	r0, r2
 80093e2:	4798      	blx	r3
 80093e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093e6:	e00f      	b.n	8009408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093e8:	6839      	ldr	r1, [r7, #0]
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 fa49 	bl	8009882 <USBD_CtlError>
            err++;
 80093f0:	7afb      	ldrb	r3, [r7, #11]
 80093f2:	3301      	adds	r3, #1
 80093f4:	72fb      	strb	r3, [r7, #11]
          break;
 80093f6:	e007      	b.n	8009408 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80093f8:	6839      	ldr	r1, [r7, #0]
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 fa41 	bl	8009882 <USBD_CtlError>
          err++;
 8009400:	7afb      	ldrb	r3, [r7, #11]
 8009402:	3301      	adds	r3, #1
 8009404:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009406:	bf00      	nop
      }
      break;
 8009408:	e037      	b.n	800947a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	7c1b      	ldrb	r3, [r3, #16]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d109      	bne.n	8009426 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800941a:	f107 0208 	add.w	r2, r7, #8
 800941e:	4610      	mov	r0, r2
 8009420:	4798      	blx	r3
 8009422:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009424:	e029      	b.n	800947a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009426:	6839      	ldr	r1, [r7, #0]
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 fa2a 	bl	8009882 <USBD_CtlError>
        err++;
 800942e:	7afb      	ldrb	r3, [r7, #11]
 8009430:	3301      	adds	r3, #1
 8009432:	72fb      	strb	r3, [r7, #11]
      break;
 8009434:	e021      	b.n	800947a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	7c1b      	ldrb	r3, [r3, #16]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d10d      	bne.n	800945a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009446:	f107 0208 	add.w	r2, r7, #8
 800944a:	4610      	mov	r0, r2
 800944c:	4798      	blx	r3
 800944e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	3301      	adds	r3, #1
 8009454:	2207      	movs	r2, #7
 8009456:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009458:	e00f      	b.n	800947a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800945a:	6839      	ldr	r1, [r7, #0]
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 fa10 	bl	8009882 <USBD_CtlError>
        err++;
 8009462:	7afb      	ldrb	r3, [r7, #11]
 8009464:	3301      	adds	r3, #1
 8009466:	72fb      	strb	r3, [r7, #11]
      break;
 8009468:	e007      	b.n	800947a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800946a:	6839      	ldr	r1, [r7, #0]
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 fa08 	bl	8009882 <USBD_CtlError>
      err++;
 8009472:	7afb      	ldrb	r3, [r7, #11]
 8009474:	3301      	adds	r3, #1
 8009476:	72fb      	strb	r3, [r7, #11]
      break;
 8009478:	bf00      	nop
  }

  if (err != 0U)
 800947a:	7afb      	ldrb	r3, [r7, #11]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d11e      	bne.n	80094be <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	88db      	ldrh	r3, [r3, #6]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d016      	beq.n	80094b6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009488:	893b      	ldrh	r3, [r7, #8]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d00e      	beq.n	80094ac <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	88da      	ldrh	r2, [r3, #6]
 8009492:	893b      	ldrh	r3, [r7, #8]
 8009494:	4293      	cmp	r3, r2
 8009496:	bf28      	it	cs
 8009498:	4613      	movcs	r3, r2
 800949a:	b29b      	uxth	r3, r3
 800949c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800949e:	893b      	ldrh	r3, [r7, #8]
 80094a0:	461a      	mov	r2, r3
 80094a2:	68f9      	ldr	r1, [r7, #12]
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 fa5d 	bl	8009964 <USBD_CtlSendData>
 80094aa:	e009      	b.n	80094c0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80094ac:	6839      	ldr	r1, [r7, #0]
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 f9e7 	bl	8009882 <USBD_CtlError>
 80094b4:	e004      	b.n	80094c0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 faae 	bl	8009a18 <USBD_CtlSendStatus>
 80094bc:	e000      	b.n	80094c0 <USBD_GetDescriptor+0x2cc>
    return;
 80094be:	bf00      	nop
  }
}
 80094c0:	3710      	adds	r7, #16
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	bf00      	nop

080094c8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	889b      	ldrh	r3, [r3, #4]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d131      	bne.n	800953e <USBD_SetAddress+0x76>
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	88db      	ldrh	r3, [r3, #6]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d12d      	bne.n	800953e <USBD_SetAddress+0x76>
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	885b      	ldrh	r3, [r3, #2]
 80094e6:	2b7f      	cmp	r3, #127	; 0x7f
 80094e8:	d829      	bhi.n	800953e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	885b      	ldrh	r3, [r3, #2]
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	2b03      	cmp	r3, #3
 8009500:	d104      	bne.n	800950c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009502:	6839      	ldr	r1, [r7, #0]
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 f9bc 	bl	8009882 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800950a:	e01d      	b.n	8009548 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	7bfa      	ldrb	r2, [r7, #15]
 8009510:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009514:	7bfb      	ldrb	r3, [r7, #15]
 8009516:	4619      	mov	r1, r3
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 feed 	bl	800a2f8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 fa7a 	bl	8009a18 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009524:	7bfb      	ldrb	r3, [r7, #15]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d004      	beq.n	8009534 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2202      	movs	r2, #2
 800952e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009532:	e009      	b.n	8009548 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2201      	movs	r2, #1
 8009538:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800953c:	e004      	b.n	8009548 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800953e:	6839      	ldr	r1, [r7, #0]
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 f99e 	bl	8009882 <USBD_CtlError>
  }
}
 8009546:	bf00      	nop
 8009548:	bf00      	nop
 800954a:	3710      	adds	r7, #16
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800955a:	2300      	movs	r3, #0
 800955c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	885b      	ldrh	r3, [r3, #2]
 8009562:	b2da      	uxtb	r2, r3
 8009564:	4b4e      	ldr	r3, [pc, #312]	; (80096a0 <USBD_SetConfig+0x150>)
 8009566:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009568:	4b4d      	ldr	r3, [pc, #308]	; (80096a0 <USBD_SetConfig+0x150>)
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	2b01      	cmp	r3, #1
 800956e:	d905      	bls.n	800957c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009570:	6839      	ldr	r1, [r7, #0]
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 f985 	bl	8009882 <USBD_CtlError>
    return USBD_FAIL;
 8009578:	2303      	movs	r3, #3
 800957a:	e08c      	b.n	8009696 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009582:	b2db      	uxtb	r3, r3
 8009584:	2b02      	cmp	r3, #2
 8009586:	d002      	beq.n	800958e <USBD_SetConfig+0x3e>
 8009588:	2b03      	cmp	r3, #3
 800958a:	d029      	beq.n	80095e0 <USBD_SetConfig+0x90>
 800958c:	e075      	b.n	800967a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800958e:	4b44      	ldr	r3, [pc, #272]	; (80096a0 <USBD_SetConfig+0x150>)
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d020      	beq.n	80095d8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009596:	4b42      	ldr	r3, [pc, #264]	; (80096a0 <USBD_SetConfig+0x150>)
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	461a      	mov	r2, r3
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80095a0:	4b3f      	ldr	r3, [pc, #252]	; (80096a0 <USBD_SetConfig+0x150>)
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	4619      	mov	r1, r3
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f7fe ffe7 	bl	800857a <USBD_SetClassConfig>
 80095ac:	4603      	mov	r3, r0
 80095ae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80095b0:	7bfb      	ldrb	r3, [r7, #15]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d008      	beq.n	80095c8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80095b6:	6839      	ldr	r1, [r7, #0]
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 f962 	bl	8009882 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2202      	movs	r2, #2
 80095c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80095c6:	e065      	b.n	8009694 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 fa25 	bl	8009a18 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2203      	movs	r2, #3
 80095d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80095d6:	e05d      	b.n	8009694 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 fa1d 	bl	8009a18 <USBD_CtlSendStatus>
      break;
 80095de:	e059      	b.n	8009694 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80095e0:	4b2f      	ldr	r3, [pc, #188]	; (80096a0 <USBD_SetConfig+0x150>)
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d112      	bne.n	800960e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2202      	movs	r2, #2
 80095ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80095f0:	4b2b      	ldr	r3, [pc, #172]	; (80096a0 <USBD_SetConfig+0x150>)
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	461a      	mov	r2, r3
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80095fa:	4b29      	ldr	r3, [pc, #164]	; (80096a0 <USBD_SetConfig+0x150>)
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	4619      	mov	r1, r3
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f7fe ffd6 	bl	80085b2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 fa06 	bl	8009a18 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800960c:	e042      	b.n	8009694 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800960e:	4b24      	ldr	r3, [pc, #144]	; (80096a0 <USBD_SetConfig+0x150>)
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	461a      	mov	r2, r3
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	429a      	cmp	r2, r3
 800961a:	d02a      	beq.n	8009672 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	b2db      	uxtb	r3, r3
 8009622:	4619      	mov	r1, r3
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f7fe ffc4 	bl	80085b2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800962a:	4b1d      	ldr	r3, [pc, #116]	; (80096a0 <USBD_SetConfig+0x150>)
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	461a      	mov	r2, r3
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009634:	4b1a      	ldr	r3, [pc, #104]	; (80096a0 <USBD_SetConfig+0x150>)
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	4619      	mov	r1, r3
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f7fe ff9d 	bl	800857a <USBD_SetClassConfig>
 8009640:	4603      	mov	r3, r0
 8009642:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009644:	7bfb      	ldrb	r3, [r7, #15]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d00f      	beq.n	800966a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800964a:	6839      	ldr	r1, [r7, #0]
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 f918 	bl	8009882 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	b2db      	uxtb	r3, r3
 8009658:	4619      	mov	r1, r3
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f7fe ffa9 	bl	80085b2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2202      	movs	r2, #2
 8009664:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009668:	e014      	b.n	8009694 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 f9d4 	bl	8009a18 <USBD_CtlSendStatus>
      break;
 8009670:	e010      	b.n	8009694 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 f9d0 	bl	8009a18 <USBD_CtlSendStatus>
      break;
 8009678:	e00c      	b.n	8009694 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800967a:	6839      	ldr	r1, [r7, #0]
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f000 f900 	bl	8009882 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009682:	4b07      	ldr	r3, [pc, #28]	; (80096a0 <USBD_SetConfig+0x150>)
 8009684:	781b      	ldrb	r3, [r3, #0]
 8009686:	4619      	mov	r1, r3
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f7fe ff92 	bl	80085b2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800968e:	2303      	movs	r3, #3
 8009690:	73fb      	strb	r3, [r7, #15]
      break;
 8009692:	bf00      	nop
  }

  return ret;
 8009694:	7bfb      	ldrb	r3, [r7, #15]
}
 8009696:	4618      	mov	r0, r3
 8009698:	3710      	adds	r7, #16
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	2000064c 	.word	0x2000064c

080096a4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b082      	sub	sp, #8
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	88db      	ldrh	r3, [r3, #6]
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d004      	beq.n	80096c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80096b6:	6839      	ldr	r1, [r7, #0]
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 f8e2 	bl	8009882 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80096be:	e023      	b.n	8009708 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096c6:	b2db      	uxtb	r3, r3
 80096c8:	2b02      	cmp	r3, #2
 80096ca:	dc02      	bgt.n	80096d2 <USBD_GetConfig+0x2e>
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	dc03      	bgt.n	80096d8 <USBD_GetConfig+0x34>
 80096d0:	e015      	b.n	80096fe <USBD_GetConfig+0x5a>
 80096d2:	2b03      	cmp	r3, #3
 80096d4:	d00b      	beq.n	80096ee <USBD_GetConfig+0x4a>
 80096d6:	e012      	b.n	80096fe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2200      	movs	r2, #0
 80096dc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	3308      	adds	r3, #8
 80096e2:	2201      	movs	r2, #1
 80096e4:	4619      	mov	r1, r3
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 f93c 	bl	8009964 <USBD_CtlSendData>
        break;
 80096ec:	e00c      	b.n	8009708 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	3304      	adds	r3, #4
 80096f2:	2201      	movs	r2, #1
 80096f4:	4619      	mov	r1, r3
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 f934 	bl	8009964 <USBD_CtlSendData>
        break;
 80096fc:	e004      	b.n	8009708 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80096fe:	6839      	ldr	r1, [r7, #0]
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 f8be 	bl	8009882 <USBD_CtlError>
        break;
 8009706:	bf00      	nop
}
 8009708:	bf00      	nop
 800970a:	3708      	adds	r7, #8
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b082      	sub	sp, #8
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009720:	b2db      	uxtb	r3, r3
 8009722:	3b01      	subs	r3, #1
 8009724:	2b02      	cmp	r3, #2
 8009726:	d81e      	bhi.n	8009766 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	88db      	ldrh	r3, [r3, #6]
 800972c:	2b02      	cmp	r3, #2
 800972e:	d004      	beq.n	800973a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009730:	6839      	ldr	r1, [r7, #0]
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 f8a5 	bl	8009882 <USBD_CtlError>
        break;
 8009738:	e01a      	b.n	8009770 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2201      	movs	r2, #1
 800973e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009746:	2b00      	cmp	r3, #0
 8009748:	d005      	beq.n	8009756 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	68db      	ldr	r3, [r3, #12]
 800974e:	f043 0202 	orr.w	r2, r3, #2
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	330c      	adds	r3, #12
 800975a:	2202      	movs	r2, #2
 800975c:	4619      	mov	r1, r3
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 f900 	bl	8009964 <USBD_CtlSendData>
      break;
 8009764:	e004      	b.n	8009770 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009766:	6839      	ldr	r1, [r7, #0]
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f000 f88a 	bl	8009882 <USBD_CtlError>
      break;
 800976e:	bf00      	nop
  }
}
 8009770:	bf00      	nop
 8009772:	3708      	adds	r7, #8
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	885b      	ldrh	r3, [r3, #2]
 8009786:	2b01      	cmp	r3, #1
 8009788:	d107      	bne.n	800979a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2201      	movs	r2, #1
 800978e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 f940 	bl	8009a18 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009798:	e013      	b.n	80097c2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	885b      	ldrh	r3, [r3, #2]
 800979e:	2b02      	cmp	r3, #2
 80097a0:	d10b      	bne.n	80097ba <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	889b      	ldrh	r3, [r3, #4]
 80097a6:	0a1b      	lsrs	r3, r3, #8
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	b2da      	uxtb	r2, r3
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 f930 	bl	8009a18 <USBD_CtlSendStatus>
}
 80097b8:	e003      	b.n	80097c2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80097ba:	6839      	ldr	r1, [r7, #0]
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 f860 	bl	8009882 <USBD_CtlError>
}
 80097c2:	bf00      	nop
 80097c4:	3708      	adds	r7, #8
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}

080097ca <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097ca:	b580      	push	{r7, lr}
 80097cc:	b082      	sub	sp, #8
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	6078      	str	r0, [r7, #4]
 80097d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097da:	b2db      	uxtb	r3, r3
 80097dc:	3b01      	subs	r3, #1
 80097de:	2b02      	cmp	r3, #2
 80097e0:	d80b      	bhi.n	80097fa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	885b      	ldrh	r3, [r3, #2]
 80097e6:	2b01      	cmp	r3, #1
 80097e8:	d10c      	bne.n	8009804 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2200      	movs	r2, #0
 80097ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f000 f910 	bl	8009a18 <USBD_CtlSendStatus>
      }
      break;
 80097f8:	e004      	b.n	8009804 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80097fa:	6839      	ldr	r1, [r7, #0]
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f000 f840 	bl	8009882 <USBD_CtlError>
      break;
 8009802:	e000      	b.n	8009806 <USBD_ClrFeature+0x3c>
      break;
 8009804:	bf00      	nop
  }
}
 8009806:	bf00      	nop
 8009808:	3708      	adds	r7, #8
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}

0800980e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800980e:	b580      	push	{r7, lr}
 8009810:	b084      	sub	sp, #16
 8009812:	af00      	add	r7, sp, #0
 8009814:	6078      	str	r0, [r7, #4]
 8009816:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	781a      	ldrb	r2, [r3, #0]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	3301      	adds	r3, #1
 8009828:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	781a      	ldrb	r2, [r3, #0]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	3301      	adds	r3, #1
 8009836:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009838:	68f8      	ldr	r0, [r7, #12]
 800983a:	f7ff fa41 	bl	8008cc0 <SWAPBYTE>
 800983e:	4603      	mov	r3, r0
 8009840:	461a      	mov	r2, r3
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	3301      	adds	r3, #1
 800984a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	3301      	adds	r3, #1
 8009850:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009852:	68f8      	ldr	r0, [r7, #12]
 8009854:	f7ff fa34 	bl	8008cc0 <SWAPBYTE>
 8009858:	4603      	mov	r3, r0
 800985a:	461a      	mov	r2, r3
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	3301      	adds	r3, #1
 8009864:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	3301      	adds	r3, #1
 800986a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800986c:	68f8      	ldr	r0, [r7, #12]
 800986e:	f7ff fa27 	bl	8008cc0 <SWAPBYTE>
 8009872:	4603      	mov	r3, r0
 8009874:	461a      	mov	r2, r3
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	80da      	strh	r2, [r3, #6]
}
 800987a:	bf00      	nop
 800987c:	3710      	adds	r7, #16
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009882:	b580      	push	{r7, lr}
 8009884:	b082      	sub	sp, #8
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
 800988a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800988c:	2180      	movs	r1, #128	; 0x80
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 fcc8 	bl	800a224 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009894:	2100      	movs	r1, #0
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f000 fcc4 	bl	800a224 <USBD_LL_StallEP>
}
 800989c:	bf00      	nop
 800989e:	3708      	adds	r7, #8
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b086      	sub	sp, #24
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	60f8      	str	r0, [r7, #12]
 80098ac:	60b9      	str	r1, [r7, #8]
 80098ae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80098b0:	2300      	movs	r3, #0
 80098b2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d036      	beq.n	8009928 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80098be:	6938      	ldr	r0, [r7, #16]
 80098c0:	f000 f836 	bl	8009930 <USBD_GetLen>
 80098c4:	4603      	mov	r3, r0
 80098c6:	3301      	adds	r3, #1
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	005b      	lsls	r3, r3, #1
 80098cc:	b29a      	uxth	r2, r3
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80098d2:	7dfb      	ldrb	r3, [r7, #23]
 80098d4:	68ba      	ldr	r2, [r7, #8]
 80098d6:	4413      	add	r3, r2
 80098d8:	687a      	ldr	r2, [r7, #4]
 80098da:	7812      	ldrb	r2, [r2, #0]
 80098dc:	701a      	strb	r2, [r3, #0]
  idx++;
 80098de:	7dfb      	ldrb	r3, [r7, #23]
 80098e0:	3301      	adds	r3, #1
 80098e2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80098e4:	7dfb      	ldrb	r3, [r7, #23]
 80098e6:	68ba      	ldr	r2, [r7, #8]
 80098e8:	4413      	add	r3, r2
 80098ea:	2203      	movs	r2, #3
 80098ec:	701a      	strb	r2, [r3, #0]
  idx++;
 80098ee:	7dfb      	ldrb	r3, [r7, #23]
 80098f0:	3301      	adds	r3, #1
 80098f2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80098f4:	e013      	b.n	800991e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80098f6:	7dfb      	ldrb	r3, [r7, #23]
 80098f8:	68ba      	ldr	r2, [r7, #8]
 80098fa:	4413      	add	r3, r2
 80098fc:	693a      	ldr	r2, [r7, #16]
 80098fe:	7812      	ldrb	r2, [r2, #0]
 8009900:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	3301      	adds	r3, #1
 8009906:	613b      	str	r3, [r7, #16]
    idx++;
 8009908:	7dfb      	ldrb	r3, [r7, #23]
 800990a:	3301      	adds	r3, #1
 800990c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800990e:	7dfb      	ldrb	r3, [r7, #23]
 8009910:	68ba      	ldr	r2, [r7, #8]
 8009912:	4413      	add	r3, r2
 8009914:	2200      	movs	r2, #0
 8009916:	701a      	strb	r2, [r3, #0]
    idx++;
 8009918:	7dfb      	ldrb	r3, [r7, #23]
 800991a:	3301      	adds	r3, #1
 800991c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d1e7      	bne.n	80098f6 <USBD_GetString+0x52>
 8009926:	e000      	b.n	800992a <USBD_GetString+0x86>
    return;
 8009928:	bf00      	nop
  }
}
 800992a:	3718      	adds	r7, #24
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009930:	b480      	push	{r7}
 8009932:	b085      	sub	sp, #20
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009938:	2300      	movs	r3, #0
 800993a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009940:	e005      	b.n	800994e <USBD_GetLen+0x1e>
  {
    len++;
 8009942:	7bfb      	ldrb	r3, [r7, #15]
 8009944:	3301      	adds	r3, #1
 8009946:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	3301      	adds	r3, #1
 800994c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d1f5      	bne.n	8009942 <USBD_GetLen+0x12>
  }

  return len;
 8009956:	7bfb      	ldrb	r3, [r7, #15]
}
 8009958:	4618      	mov	r0, r3
 800995a:	3714      	adds	r7, #20
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr

08009964 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	60b9      	str	r1, [r7, #8]
 800996e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2202      	movs	r2, #2
 8009974:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	68ba      	ldr	r2, [r7, #8]
 8009988:	2100      	movs	r1, #0
 800998a:	68f8      	ldr	r0, [r7, #12]
 800998c:	f000 fcd3 	bl	800a336 <USBD_LL_Transmit>

  return USBD_OK;
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	3710      	adds	r7, #16
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}

0800999a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800999a:	b580      	push	{r7, lr}
 800999c:	b084      	sub	sp, #16
 800999e:	af00      	add	r7, sp, #0
 80099a0:	60f8      	str	r0, [r7, #12]
 80099a2:	60b9      	str	r1, [r7, #8]
 80099a4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	68ba      	ldr	r2, [r7, #8]
 80099aa:	2100      	movs	r1, #0
 80099ac:	68f8      	ldr	r0, [r7, #12]
 80099ae:	f000 fcc2 	bl	800a336 <USBD_LL_Transmit>

  return USBD_OK;
 80099b2:	2300      	movs	r3, #0
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3710      	adds	r7, #16
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	60f8      	str	r0, [r7, #12]
 80099c4:	60b9      	str	r1, [r7, #8]
 80099c6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2203      	movs	r2, #3
 80099cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	687a      	ldr	r2, [r7, #4]
 80099dc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	68ba      	ldr	r2, [r7, #8]
 80099e4:	2100      	movs	r1, #0
 80099e6:	68f8      	ldr	r0, [r7, #12]
 80099e8:	f000 fcc6 	bl	800a378 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099ec:	2300      	movs	r3, #0
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3710      	adds	r7, #16
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}

080099f6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80099f6:	b580      	push	{r7, lr}
 80099f8:	b084      	sub	sp, #16
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	60f8      	str	r0, [r7, #12]
 80099fe:	60b9      	str	r1, [r7, #8]
 8009a00:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	68ba      	ldr	r2, [r7, #8]
 8009a06:	2100      	movs	r1, #0
 8009a08:	68f8      	ldr	r0, [r7, #12]
 8009a0a:	f000 fcb5 	bl	800a378 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a0e:	2300      	movs	r3, #0
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3710      	adds	r7, #16
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b082      	sub	sp, #8
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2204      	movs	r2, #4
 8009a24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009a28:	2300      	movs	r3, #0
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	2100      	movs	r1, #0
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 fc81 	bl	800a336 <USBD_LL_Transmit>

  return USBD_OK;
 8009a34:	2300      	movs	r3, #0
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3708      	adds	r7, #8
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009a3e:	b580      	push	{r7, lr}
 8009a40:	b082      	sub	sp, #8
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2205      	movs	r2, #5
 8009a4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a4e:	2300      	movs	r3, #0
 8009a50:	2200      	movs	r2, #0
 8009a52:	2100      	movs	r1, #0
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f000 fc8f 	bl	800a378 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a5a:	2300      	movs	r3, #0
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3708      	adds	r7, #8
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009a68:	2200      	movs	r2, #0
 8009a6a:	4912      	ldr	r1, [pc, #72]	; (8009ab4 <MX_USB_DEVICE_Init+0x50>)
 8009a6c:	4812      	ldr	r0, [pc, #72]	; (8009ab8 <MX_USB_DEVICE_Init+0x54>)
 8009a6e:	f7fe fd07 	bl	8008480 <USBD_Init>
 8009a72:	4603      	mov	r3, r0
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d001      	beq.n	8009a7c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009a78:	f7f7 fd92 	bl	80015a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009a7c:	490f      	ldr	r1, [pc, #60]	; (8009abc <MX_USB_DEVICE_Init+0x58>)
 8009a7e:	480e      	ldr	r0, [pc, #56]	; (8009ab8 <MX_USB_DEVICE_Init+0x54>)
 8009a80:	f7fe fd2e 	bl	80084e0 <USBD_RegisterClass>
 8009a84:	4603      	mov	r3, r0
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d001      	beq.n	8009a8e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009a8a:	f7f7 fd89 	bl	80015a0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009a8e:	490c      	ldr	r1, [pc, #48]	; (8009ac0 <MX_USB_DEVICE_Init+0x5c>)
 8009a90:	4809      	ldr	r0, [pc, #36]	; (8009ab8 <MX_USB_DEVICE_Init+0x54>)
 8009a92:	f7fe fc65 	bl	8008360 <USBD_CDC_RegisterInterface>
 8009a96:	4603      	mov	r3, r0
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d001      	beq.n	8009aa0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009a9c:	f7f7 fd80 	bl	80015a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009aa0:	4805      	ldr	r0, [pc, #20]	; (8009ab8 <MX_USB_DEVICE_Init+0x54>)
 8009aa2:	f7fe fd53 	bl	800854c <USBD_Start>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d001      	beq.n	8009ab0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009aac:	f7f7 fd78 	bl	80015a0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009ab0:	bf00      	nop
 8009ab2:	bd80      	pop	{r7, pc}
 8009ab4:	200000ac 	.word	0x200000ac
 8009ab8:	20000650 	.word	0x20000650
 8009abc:	20000018 	.word	0x20000018
 8009ac0:	20000098 	.word	0x20000098

08009ac4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009ac8:	2200      	movs	r2, #0
 8009aca:	4905      	ldr	r1, [pc, #20]	; (8009ae0 <CDC_Init_FS+0x1c>)
 8009acc:	4805      	ldr	r0, [pc, #20]	; (8009ae4 <CDC_Init_FS+0x20>)
 8009ace:	f7fe fc61 	bl	8008394 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009ad2:	4905      	ldr	r1, [pc, #20]	; (8009ae8 <CDC_Init_FS+0x24>)
 8009ad4:	4803      	ldr	r0, [pc, #12]	; (8009ae4 <CDC_Init_FS+0x20>)
 8009ad6:	f7fe fc7f 	bl	80083d8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009ada:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	bd80      	pop	{r7, pc}
 8009ae0:	2000112c 	.word	0x2000112c
 8009ae4:	20000650 	.word	0x20000650
 8009ae8:	2000092c 	.word	0x2000092c

08009aec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009aec:	b480      	push	{r7}
 8009aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009af0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr

08009afc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b083      	sub	sp, #12
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	4603      	mov	r3, r0
 8009b04:	6039      	str	r1, [r7, #0]
 8009b06:	71fb      	strb	r3, [r7, #7]
 8009b08:	4613      	mov	r3, r2
 8009b0a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009b0c:	79fb      	ldrb	r3, [r7, #7]
 8009b0e:	2b23      	cmp	r3, #35	; 0x23
 8009b10:	d84a      	bhi.n	8009ba8 <CDC_Control_FS+0xac>
 8009b12:	a201      	add	r2, pc, #4	; (adr r2, 8009b18 <CDC_Control_FS+0x1c>)
 8009b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b18:	08009ba9 	.word	0x08009ba9
 8009b1c:	08009ba9 	.word	0x08009ba9
 8009b20:	08009ba9 	.word	0x08009ba9
 8009b24:	08009ba9 	.word	0x08009ba9
 8009b28:	08009ba9 	.word	0x08009ba9
 8009b2c:	08009ba9 	.word	0x08009ba9
 8009b30:	08009ba9 	.word	0x08009ba9
 8009b34:	08009ba9 	.word	0x08009ba9
 8009b38:	08009ba9 	.word	0x08009ba9
 8009b3c:	08009ba9 	.word	0x08009ba9
 8009b40:	08009ba9 	.word	0x08009ba9
 8009b44:	08009ba9 	.word	0x08009ba9
 8009b48:	08009ba9 	.word	0x08009ba9
 8009b4c:	08009ba9 	.word	0x08009ba9
 8009b50:	08009ba9 	.word	0x08009ba9
 8009b54:	08009ba9 	.word	0x08009ba9
 8009b58:	08009ba9 	.word	0x08009ba9
 8009b5c:	08009ba9 	.word	0x08009ba9
 8009b60:	08009ba9 	.word	0x08009ba9
 8009b64:	08009ba9 	.word	0x08009ba9
 8009b68:	08009ba9 	.word	0x08009ba9
 8009b6c:	08009ba9 	.word	0x08009ba9
 8009b70:	08009ba9 	.word	0x08009ba9
 8009b74:	08009ba9 	.word	0x08009ba9
 8009b78:	08009ba9 	.word	0x08009ba9
 8009b7c:	08009ba9 	.word	0x08009ba9
 8009b80:	08009ba9 	.word	0x08009ba9
 8009b84:	08009ba9 	.word	0x08009ba9
 8009b88:	08009ba9 	.word	0x08009ba9
 8009b8c:	08009ba9 	.word	0x08009ba9
 8009b90:	08009ba9 	.word	0x08009ba9
 8009b94:	08009ba9 	.word	0x08009ba9
 8009b98:	08009ba9 	.word	0x08009ba9
 8009b9c:	08009ba9 	.word	0x08009ba9
 8009ba0:	08009ba9 	.word	0x08009ba9
 8009ba4:	08009ba9 	.word	0x08009ba9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009ba8:	bf00      	nop
  }

  return (USBD_OK);
 8009baa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	370c      	adds	r7, #12
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr

08009bb8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b082      	sub	sp, #8
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009bc2:	6879      	ldr	r1, [r7, #4]
 8009bc4:	4805      	ldr	r0, [pc, #20]	; (8009bdc <CDC_Receive_FS+0x24>)
 8009bc6:	f7fe fc07 	bl	80083d8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009bca:	4804      	ldr	r0, [pc, #16]	; (8009bdc <CDC_Receive_FS+0x24>)
 8009bcc:	f7fe fc22 	bl	8008414 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009bd0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3708      	adds	r7, #8
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop
 8009bdc:	20000650 	.word	0x20000650

08009be0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b087      	sub	sp, #28
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	60b9      	str	r1, [r7, #8]
 8009bea:	4613      	mov	r3, r2
 8009bec:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009bf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	371c      	adds	r7, #28
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr
	...

08009c04 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b083      	sub	sp, #12
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	6039      	str	r1, [r7, #0]
 8009c0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	2212      	movs	r2, #18
 8009c14:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009c16:	4b03      	ldr	r3, [pc, #12]	; (8009c24 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	370c      	adds	r7, #12
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr
 8009c24:	200000c8 	.word	0x200000c8

08009c28 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b083      	sub	sp, #12
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	4603      	mov	r3, r0
 8009c30:	6039      	str	r1, [r7, #0]
 8009c32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	2204      	movs	r2, #4
 8009c38:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009c3a:	4b03      	ldr	r3, [pc, #12]	; (8009c48 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	370c      	adds	r7, #12
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr
 8009c48:	200000dc 	.word	0x200000dc

08009c4c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	4603      	mov	r3, r0
 8009c54:	6039      	str	r1, [r7, #0]
 8009c56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c58:	79fb      	ldrb	r3, [r7, #7]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d105      	bne.n	8009c6a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009c5e:	683a      	ldr	r2, [r7, #0]
 8009c60:	4907      	ldr	r1, [pc, #28]	; (8009c80 <USBD_FS_ProductStrDescriptor+0x34>)
 8009c62:	4808      	ldr	r0, [pc, #32]	; (8009c84 <USBD_FS_ProductStrDescriptor+0x38>)
 8009c64:	f7ff fe1e 	bl	80098a4 <USBD_GetString>
 8009c68:	e004      	b.n	8009c74 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009c6a:	683a      	ldr	r2, [r7, #0]
 8009c6c:	4904      	ldr	r1, [pc, #16]	; (8009c80 <USBD_FS_ProductStrDescriptor+0x34>)
 8009c6e:	4805      	ldr	r0, [pc, #20]	; (8009c84 <USBD_FS_ProductStrDescriptor+0x38>)
 8009c70:	f7ff fe18 	bl	80098a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c74:	4b02      	ldr	r3, [pc, #8]	; (8009c80 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3708      	adds	r7, #8
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}
 8009c7e:	bf00      	nop
 8009c80:	2000192c 	.word	0x2000192c
 8009c84:	0800a4d8 	.word	0x0800a4d8

08009c88 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b082      	sub	sp, #8
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	4603      	mov	r3, r0
 8009c90:	6039      	str	r1, [r7, #0]
 8009c92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009c94:	683a      	ldr	r2, [r7, #0]
 8009c96:	4904      	ldr	r1, [pc, #16]	; (8009ca8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009c98:	4804      	ldr	r0, [pc, #16]	; (8009cac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009c9a:	f7ff fe03 	bl	80098a4 <USBD_GetString>
  return USBD_StrDesc;
 8009c9e:	4b02      	ldr	r3, [pc, #8]	; (8009ca8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3708      	adds	r7, #8
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}
 8009ca8:	2000192c 	.word	0x2000192c
 8009cac:	0800a4f8 	.word	0x0800a4f8

08009cb0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b082      	sub	sp, #8
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	6039      	str	r1, [r7, #0]
 8009cba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	221a      	movs	r2, #26
 8009cc0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009cc2:	f000 f843 	bl	8009d4c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009cc6:	4b02      	ldr	r3, [pc, #8]	; (8009cd0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3708      	adds	r7, #8
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}
 8009cd0:	200000e0 	.word	0x200000e0

08009cd4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b082      	sub	sp, #8
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	4603      	mov	r3, r0
 8009cdc:	6039      	str	r1, [r7, #0]
 8009cde:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009ce0:	79fb      	ldrb	r3, [r7, #7]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d105      	bne.n	8009cf2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009ce6:	683a      	ldr	r2, [r7, #0]
 8009ce8:	4907      	ldr	r1, [pc, #28]	; (8009d08 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009cea:	4808      	ldr	r0, [pc, #32]	; (8009d0c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009cec:	f7ff fdda 	bl	80098a4 <USBD_GetString>
 8009cf0:	e004      	b.n	8009cfc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009cf2:	683a      	ldr	r2, [r7, #0]
 8009cf4:	4904      	ldr	r1, [pc, #16]	; (8009d08 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009cf6:	4805      	ldr	r0, [pc, #20]	; (8009d0c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009cf8:	f7ff fdd4 	bl	80098a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009cfc:	4b02      	ldr	r3, [pc, #8]	; (8009d08 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3708      	adds	r7, #8
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	bf00      	nop
 8009d08:	2000192c 	.word	0x2000192c
 8009d0c:	0800a50c 	.word	0x0800a50c

08009d10 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b082      	sub	sp, #8
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	4603      	mov	r3, r0
 8009d18:	6039      	str	r1, [r7, #0]
 8009d1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d1c:	79fb      	ldrb	r3, [r7, #7]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d105      	bne.n	8009d2e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009d22:	683a      	ldr	r2, [r7, #0]
 8009d24:	4907      	ldr	r1, [pc, #28]	; (8009d44 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009d26:	4808      	ldr	r0, [pc, #32]	; (8009d48 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009d28:	f7ff fdbc 	bl	80098a4 <USBD_GetString>
 8009d2c:	e004      	b.n	8009d38 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009d2e:	683a      	ldr	r2, [r7, #0]
 8009d30:	4904      	ldr	r1, [pc, #16]	; (8009d44 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009d32:	4805      	ldr	r0, [pc, #20]	; (8009d48 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009d34:	f7ff fdb6 	bl	80098a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d38:	4b02      	ldr	r3, [pc, #8]	; (8009d44 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3708      	adds	r7, #8
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
 8009d42:	bf00      	nop
 8009d44:	2000192c 	.word	0x2000192c
 8009d48:	0800a518 	.word	0x0800a518

08009d4c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009d52:	4b0f      	ldr	r3, [pc, #60]	; (8009d90 <Get_SerialNum+0x44>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009d58:	4b0e      	ldr	r3, [pc, #56]	; (8009d94 <Get_SerialNum+0x48>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009d5e:	4b0e      	ldr	r3, [pc, #56]	; (8009d98 <Get_SerialNum+0x4c>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009d64:	68fa      	ldr	r2, [r7, #12]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	4413      	add	r3, r2
 8009d6a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d009      	beq.n	8009d86 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009d72:	2208      	movs	r2, #8
 8009d74:	4909      	ldr	r1, [pc, #36]	; (8009d9c <Get_SerialNum+0x50>)
 8009d76:	68f8      	ldr	r0, [r7, #12]
 8009d78:	f000 f814 	bl	8009da4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009d7c:	2204      	movs	r2, #4
 8009d7e:	4908      	ldr	r1, [pc, #32]	; (8009da0 <Get_SerialNum+0x54>)
 8009d80:	68b8      	ldr	r0, [r7, #8]
 8009d82:	f000 f80f 	bl	8009da4 <IntToUnicode>
  }
}
 8009d86:	bf00      	nop
 8009d88:	3710      	adds	r7, #16
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	1fff7a10 	.word	0x1fff7a10
 8009d94:	1fff7a14 	.word	0x1fff7a14
 8009d98:	1fff7a18 	.word	0x1fff7a18
 8009d9c:	200000e2 	.word	0x200000e2
 8009da0:	200000f2 	.word	0x200000f2

08009da4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b087      	sub	sp, #28
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	60f8      	str	r0, [r7, #12]
 8009dac:	60b9      	str	r1, [r7, #8]
 8009dae:	4613      	mov	r3, r2
 8009db0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009db2:	2300      	movs	r3, #0
 8009db4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009db6:	2300      	movs	r3, #0
 8009db8:	75fb      	strb	r3, [r7, #23]
 8009dba:	e027      	b.n	8009e0c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	0f1b      	lsrs	r3, r3, #28
 8009dc0:	2b09      	cmp	r3, #9
 8009dc2:	d80b      	bhi.n	8009ddc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	0f1b      	lsrs	r3, r3, #28
 8009dc8:	b2da      	uxtb	r2, r3
 8009dca:	7dfb      	ldrb	r3, [r7, #23]
 8009dcc:	005b      	lsls	r3, r3, #1
 8009dce:	4619      	mov	r1, r3
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	440b      	add	r3, r1
 8009dd4:	3230      	adds	r2, #48	; 0x30
 8009dd6:	b2d2      	uxtb	r2, r2
 8009dd8:	701a      	strb	r2, [r3, #0]
 8009dda:	e00a      	b.n	8009df2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	0f1b      	lsrs	r3, r3, #28
 8009de0:	b2da      	uxtb	r2, r3
 8009de2:	7dfb      	ldrb	r3, [r7, #23]
 8009de4:	005b      	lsls	r3, r3, #1
 8009de6:	4619      	mov	r1, r3
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	440b      	add	r3, r1
 8009dec:	3237      	adds	r2, #55	; 0x37
 8009dee:	b2d2      	uxtb	r2, r2
 8009df0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	011b      	lsls	r3, r3, #4
 8009df6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009df8:	7dfb      	ldrb	r3, [r7, #23]
 8009dfa:	005b      	lsls	r3, r3, #1
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	68ba      	ldr	r2, [r7, #8]
 8009e00:	4413      	add	r3, r2
 8009e02:	2200      	movs	r2, #0
 8009e04:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009e06:	7dfb      	ldrb	r3, [r7, #23]
 8009e08:	3301      	adds	r3, #1
 8009e0a:	75fb      	strb	r3, [r7, #23]
 8009e0c:	7dfa      	ldrb	r2, [r7, #23]
 8009e0e:	79fb      	ldrb	r3, [r7, #7]
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d3d3      	bcc.n	8009dbc <IntToUnicode+0x18>
  }
}
 8009e14:	bf00      	nop
 8009e16:	bf00      	nop
 8009e18:	371c      	adds	r7, #28
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr
	...

08009e24 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b08a      	sub	sp, #40	; 0x28
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e2c:	f107 0314 	add.w	r3, r7, #20
 8009e30:	2200      	movs	r2, #0
 8009e32:	601a      	str	r2, [r3, #0]
 8009e34:	605a      	str	r2, [r3, #4]
 8009e36:	609a      	str	r2, [r3, #8]
 8009e38:	60da      	str	r2, [r3, #12]
 8009e3a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e44:	d147      	bne.n	8009ed6 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009e46:	2300      	movs	r3, #0
 8009e48:	613b      	str	r3, [r7, #16]
 8009e4a:	4b25      	ldr	r3, [pc, #148]	; (8009ee0 <HAL_PCD_MspInit+0xbc>)
 8009e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e4e:	4a24      	ldr	r2, [pc, #144]	; (8009ee0 <HAL_PCD_MspInit+0xbc>)
 8009e50:	f043 0301 	orr.w	r3, r3, #1
 8009e54:	6313      	str	r3, [r2, #48]	; 0x30
 8009e56:	4b22      	ldr	r3, [pc, #136]	; (8009ee0 <HAL_PCD_MspInit+0xbc>)
 8009e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e5a:	f003 0301 	and.w	r3, r3, #1
 8009e5e:	613b      	str	r3, [r7, #16]
 8009e60:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009e62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e70:	f107 0314 	add.w	r3, r7, #20
 8009e74:	4619      	mov	r1, r3
 8009e76:	481b      	ldr	r0, [pc, #108]	; (8009ee4 <HAL_PCD_MspInit+0xc0>)
 8009e78:	f7f8 fcfe 	bl	8002878 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009e7c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009e80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e82:	2302      	movs	r3, #2
 8009e84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e86:	2300      	movs	r3, #0
 8009e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e8a:	2303      	movs	r3, #3
 8009e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009e8e:	230a      	movs	r3, #10
 8009e90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e92:	f107 0314 	add.w	r3, r7, #20
 8009e96:	4619      	mov	r1, r3
 8009e98:	4812      	ldr	r0, [pc, #72]	; (8009ee4 <HAL_PCD_MspInit+0xc0>)
 8009e9a:	f7f8 fced 	bl	8002878 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009e9e:	4b10      	ldr	r3, [pc, #64]	; (8009ee0 <HAL_PCD_MspInit+0xbc>)
 8009ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ea2:	4a0f      	ldr	r2, [pc, #60]	; (8009ee0 <HAL_PCD_MspInit+0xbc>)
 8009ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ea8:	6353      	str	r3, [r2, #52]	; 0x34
 8009eaa:	2300      	movs	r3, #0
 8009eac:	60fb      	str	r3, [r7, #12]
 8009eae:	4b0c      	ldr	r3, [pc, #48]	; (8009ee0 <HAL_PCD_MspInit+0xbc>)
 8009eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009eb2:	4a0b      	ldr	r2, [pc, #44]	; (8009ee0 <HAL_PCD_MspInit+0xbc>)
 8009eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8009eba:	4b09      	ldr	r3, [pc, #36]	; (8009ee0 <HAL_PCD_MspInit+0xbc>)
 8009ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ec2:	60fb      	str	r3, [r7, #12]
 8009ec4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	2100      	movs	r1, #0
 8009eca:	2043      	movs	r0, #67	; 0x43
 8009ecc:	f7f8 fc9d 	bl	800280a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009ed0:	2043      	movs	r0, #67	; 0x43
 8009ed2:	f7f8 fcb6 	bl	8002842 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009ed6:	bf00      	nop
 8009ed8:	3728      	adds	r7, #40	; 0x28
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}
 8009ede:	bf00      	nop
 8009ee0:	40023800 	.word	0x40023800
 8009ee4:	40020000 	.word	0x40020000

08009ee8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009efc:	4619      	mov	r1, r3
 8009efe:	4610      	mov	r0, r2
 8009f00:	f7fe fb71 	bl	80085e6 <USBD_LL_SetupStage>
}
 8009f04:	bf00      	nop
 8009f06:	3708      	adds	r7, #8
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	460b      	mov	r3, r1
 8009f16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009f1e:	78fa      	ldrb	r2, [r7, #3]
 8009f20:	6879      	ldr	r1, [r7, #4]
 8009f22:	4613      	mov	r3, r2
 8009f24:	00db      	lsls	r3, r3, #3
 8009f26:	4413      	add	r3, r2
 8009f28:	009b      	lsls	r3, r3, #2
 8009f2a:	440b      	add	r3, r1
 8009f2c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009f30:	681a      	ldr	r2, [r3, #0]
 8009f32:	78fb      	ldrb	r3, [r7, #3]
 8009f34:	4619      	mov	r1, r3
 8009f36:	f7fe fbab 	bl	8008690 <USBD_LL_DataOutStage>
}
 8009f3a:	bf00      	nop
 8009f3c:	3708      	adds	r7, #8
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}

08009f42 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f42:	b580      	push	{r7, lr}
 8009f44:	b082      	sub	sp, #8
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
 8009f4a:	460b      	mov	r3, r1
 8009f4c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009f54:	78fa      	ldrb	r2, [r7, #3]
 8009f56:	6879      	ldr	r1, [r7, #4]
 8009f58:	4613      	mov	r3, r2
 8009f5a:	00db      	lsls	r3, r3, #3
 8009f5c:	4413      	add	r3, r2
 8009f5e:	009b      	lsls	r3, r3, #2
 8009f60:	440b      	add	r3, r1
 8009f62:	334c      	adds	r3, #76	; 0x4c
 8009f64:	681a      	ldr	r2, [r3, #0]
 8009f66:	78fb      	ldrb	r3, [r7, #3]
 8009f68:	4619      	mov	r1, r3
 8009f6a:	f7fe fc44 	bl	80087f6 <USBD_LL_DataInStage>
}
 8009f6e:	bf00      	nop
 8009f70:	3708      	adds	r7, #8
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}

08009f76 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f76:	b580      	push	{r7, lr}
 8009f78:	b082      	sub	sp, #8
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f84:	4618      	mov	r0, r3
 8009f86:	f7fe fd78 	bl	8008a7a <USBD_LL_SOF>
}
 8009f8a:	bf00      	nop
 8009f8c:	3708      	adds	r7, #8
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}

08009f92 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f92:	b580      	push	{r7, lr}
 8009f94:	b084      	sub	sp, #16
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	68db      	ldr	r3, [r3, #12]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d102      	bne.n	8009fac <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	73fb      	strb	r3, [r7, #15]
 8009faa:	e008      	b.n	8009fbe <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	68db      	ldr	r3, [r3, #12]
 8009fb0:	2b02      	cmp	r3, #2
 8009fb2:	d102      	bne.n	8009fba <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	73fb      	strb	r3, [r7, #15]
 8009fb8:	e001      	b.n	8009fbe <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009fba:	f7f7 faf1 	bl	80015a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009fc4:	7bfa      	ldrb	r2, [r7, #15]
 8009fc6:	4611      	mov	r1, r2
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f7fe fd18 	bl	80089fe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f7fe fcc0 	bl	800895a <USBD_LL_Reset>
}
 8009fda:	bf00      	nop
 8009fdc:	3710      	adds	r7, #16
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
	...

08009fe4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b082      	sub	sp, #8
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f7fe fd13 	bl	8008a1e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	687a      	ldr	r2, [r7, #4]
 800a004:	6812      	ldr	r2, [r2, #0]
 800a006:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a00a:	f043 0301 	orr.w	r3, r3, #1
 800a00e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6a1b      	ldr	r3, [r3, #32]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d005      	beq.n	800a024 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a018:	4b04      	ldr	r3, [pc, #16]	; (800a02c <HAL_PCD_SuspendCallback+0x48>)
 800a01a:	691b      	ldr	r3, [r3, #16]
 800a01c:	4a03      	ldr	r2, [pc, #12]	; (800a02c <HAL_PCD_SuspendCallback+0x48>)
 800a01e:	f043 0306 	orr.w	r3, r3, #6
 800a022:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a024:	bf00      	nop
 800a026:	3708      	adds	r7, #8
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}
 800a02c:	e000ed00 	.word	0xe000ed00

0800a030 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a03e:	4618      	mov	r0, r3
 800a040:	f7fe fd03 	bl	8008a4a <USBD_LL_Resume>
}
 800a044:	bf00      	nop
 800a046:	3708      	adds	r7, #8
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b082      	sub	sp, #8
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
 800a054:	460b      	mov	r3, r1
 800a056:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a05e:	78fa      	ldrb	r2, [r7, #3]
 800a060:	4611      	mov	r1, r2
 800a062:	4618      	mov	r0, r3
 800a064:	f7fe fd5b 	bl	8008b1e <USBD_LL_IsoOUTIncomplete>
}
 800a068:	bf00      	nop
 800a06a:	3708      	adds	r7, #8
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b082      	sub	sp, #8
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	460b      	mov	r3, r1
 800a07a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a082:	78fa      	ldrb	r2, [r7, #3]
 800a084:	4611      	mov	r1, r2
 800a086:	4618      	mov	r0, r3
 800a088:	f7fe fd17 	bl	8008aba <USBD_LL_IsoINIncomplete>
}
 800a08c:	bf00      	nop
 800a08e:	3708      	adds	r7, #8
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}

0800a094 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b082      	sub	sp, #8
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7fe fd6d 	bl	8008b82 <USBD_LL_DevConnected>
}
 800a0a8:	bf00      	nop
 800a0aa:	3708      	adds	r7, #8
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}

0800a0b0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b082      	sub	sp, #8
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7fe fd6a 	bl	8008b98 <USBD_LL_DevDisconnected>
}
 800a0c4:	bf00      	nop
 800a0c6:	3708      	adds	r7, #8
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b082      	sub	sp, #8
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d13c      	bne.n	800a156 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a0dc:	4a20      	ldr	r2, [pc, #128]	; (800a160 <USBD_LL_Init+0x94>)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	4a1e      	ldr	r2, [pc, #120]	; (800a160 <USBD_LL_Init+0x94>)
 800a0e8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a0ec:	4b1c      	ldr	r3, [pc, #112]	; (800a160 <USBD_LL_Init+0x94>)
 800a0ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a0f2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a0f4:	4b1a      	ldr	r3, [pc, #104]	; (800a160 <USBD_LL_Init+0x94>)
 800a0f6:	2204      	movs	r2, #4
 800a0f8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a0fa:	4b19      	ldr	r3, [pc, #100]	; (800a160 <USBD_LL_Init+0x94>)
 800a0fc:	2202      	movs	r2, #2
 800a0fe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a100:	4b17      	ldr	r3, [pc, #92]	; (800a160 <USBD_LL_Init+0x94>)
 800a102:	2200      	movs	r2, #0
 800a104:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a106:	4b16      	ldr	r3, [pc, #88]	; (800a160 <USBD_LL_Init+0x94>)
 800a108:	2202      	movs	r2, #2
 800a10a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a10c:	4b14      	ldr	r3, [pc, #80]	; (800a160 <USBD_LL_Init+0x94>)
 800a10e:	2200      	movs	r2, #0
 800a110:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a112:	4b13      	ldr	r3, [pc, #76]	; (800a160 <USBD_LL_Init+0x94>)
 800a114:	2200      	movs	r2, #0
 800a116:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a118:	4b11      	ldr	r3, [pc, #68]	; (800a160 <USBD_LL_Init+0x94>)
 800a11a:	2200      	movs	r2, #0
 800a11c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800a11e:	4b10      	ldr	r3, [pc, #64]	; (800a160 <USBD_LL_Init+0x94>)
 800a120:	2201      	movs	r2, #1
 800a122:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a124:	4b0e      	ldr	r3, [pc, #56]	; (800a160 <USBD_LL_Init+0x94>)
 800a126:	2200      	movs	r2, #0
 800a128:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a12a:	480d      	ldr	r0, [pc, #52]	; (800a160 <USBD_LL_Init+0x94>)
 800a12c:	f7f8 fec2 	bl	8002eb4 <HAL_PCD_Init>
 800a130:	4603      	mov	r3, r0
 800a132:	2b00      	cmp	r3, #0
 800a134:	d001      	beq.n	800a13a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a136:	f7f7 fa33 	bl	80015a0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a13a:	2180      	movs	r1, #128	; 0x80
 800a13c:	4808      	ldr	r0, [pc, #32]	; (800a160 <USBD_LL_Init+0x94>)
 800a13e:	f7fa f91a 	bl	8004376 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a142:	2240      	movs	r2, #64	; 0x40
 800a144:	2100      	movs	r1, #0
 800a146:	4806      	ldr	r0, [pc, #24]	; (800a160 <USBD_LL_Init+0x94>)
 800a148:	f7fa f8ce 	bl	80042e8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a14c:	2280      	movs	r2, #128	; 0x80
 800a14e:	2101      	movs	r1, #1
 800a150:	4803      	ldr	r0, [pc, #12]	; (800a160 <USBD_LL_Init+0x94>)
 800a152:	f7fa f8c9 	bl	80042e8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a156:	2300      	movs	r3, #0
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3708      	adds	r7, #8
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}
 800a160:	20001b2c 	.word	0x20001b2c

0800a164 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a16c:	2300      	movs	r3, #0
 800a16e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a170:	2300      	movs	r3, #0
 800a172:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7f8 ffb7 	bl	80030ee <HAL_PCD_Start>
 800a180:	4603      	mov	r3, r0
 800a182:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a184:	7bfb      	ldrb	r3, [r7, #15]
 800a186:	4618      	mov	r0, r3
 800a188:	f000 f942 	bl	800a410 <USBD_Get_USB_Status>
 800a18c:	4603      	mov	r3, r0
 800a18e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a190:	7bbb      	ldrb	r3, [r7, #14]
}
 800a192:	4618      	mov	r0, r3
 800a194:	3710      	adds	r7, #16
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}

0800a19a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a19a:	b580      	push	{r7, lr}
 800a19c:	b084      	sub	sp, #16
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	6078      	str	r0, [r7, #4]
 800a1a2:	4608      	mov	r0, r1
 800a1a4:	4611      	mov	r1, r2
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	70fb      	strb	r3, [r7, #3]
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	70bb      	strb	r3, [r7, #2]
 800a1b0:	4613      	mov	r3, r2
 800a1b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a1c2:	78bb      	ldrb	r3, [r7, #2]
 800a1c4:	883a      	ldrh	r2, [r7, #0]
 800a1c6:	78f9      	ldrb	r1, [r7, #3]
 800a1c8:	f7f9 fc88 	bl	8003adc <HAL_PCD_EP_Open>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1d0:	7bfb      	ldrb	r3, [r7, #15]
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f000 f91c 	bl	800a410 <USBD_Get_USB_Status>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3710      	adds	r7, #16
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}

0800a1e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1e6:	b580      	push	{r7, lr}
 800a1e8:	b084      	sub	sp, #16
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	6078      	str	r0, [r7, #4]
 800a1ee:	460b      	mov	r3, r1
 800a1f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a200:	78fa      	ldrb	r2, [r7, #3]
 800a202:	4611      	mov	r1, r2
 800a204:	4618      	mov	r0, r3
 800a206:	f7f9 fcd1 	bl	8003bac <HAL_PCD_EP_Close>
 800a20a:	4603      	mov	r3, r0
 800a20c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a20e:	7bfb      	ldrb	r3, [r7, #15]
 800a210:	4618      	mov	r0, r3
 800a212:	f000 f8fd 	bl	800a410 <USBD_Get_USB_Status>
 800a216:	4603      	mov	r3, r0
 800a218:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a21a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3710      	adds	r7, #16
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b084      	sub	sp, #16
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	460b      	mov	r3, r1
 800a22e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a230:	2300      	movs	r3, #0
 800a232:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a234:	2300      	movs	r3, #0
 800a236:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a23e:	78fa      	ldrb	r2, [r7, #3]
 800a240:	4611      	mov	r1, r2
 800a242:	4618      	mov	r0, r3
 800a244:	f7f9 fda9 	bl	8003d9a <HAL_PCD_EP_SetStall>
 800a248:	4603      	mov	r3, r0
 800a24a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a24c:	7bfb      	ldrb	r3, [r7, #15]
 800a24e:	4618      	mov	r0, r3
 800a250:	f000 f8de 	bl	800a410 <USBD_Get_USB_Status>
 800a254:	4603      	mov	r3, r0
 800a256:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a258:	7bbb      	ldrb	r3, [r7, #14]
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3710      	adds	r7, #16
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}

0800a262 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a262:	b580      	push	{r7, lr}
 800a264:	b084      	sub	sp, #16
 800a266:	af00      	add	r7, sp, #0
 800a268:	6078      	str	r0, [r7, #4]
 800a26a:	460b      	mov	r3, r1
 800a26c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a26e:	2300      	movs	r3, #0
 800a270:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a272:	2300      	movs	r3, #0
 800a274:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a27c:	78fa      	ldrb	r2, [r7, #3]
 800a27e:	4611      	mov	r1, r2
 800a280:	4618      	mov	r0, r3
 800a282:	f7f9 fdee 	bl	8003e62 <HAL_PCD_EP_ClrStall>
 800a286:	4603      	mov	r3, r0
 800a288:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a28a:	7bfb      	ldrb	r3, [r7, #15]
 800a28c:	4618      	mov	r0, r3
 800a28e:	f000 f8bf 	bl	800a410 <USBD_Get_USB_Status>
 800a292:	4603      	mov	r3, r0
 800a294:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a296:	7bbb      	ldrb	r3, [r7, #14]
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3710      	adds	r7, #16
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}

0800a2a0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b085      	sub	sp, #20
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	460b      	mov	r3, r1
 800a2aa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a2b2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a2b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	da0b      	bge.n	800a2d4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a2bc:	78fb      	ldrb	r3, [r7, #3]
 800a2be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a2c2:	68f9      	ldr	r1, [r7, #12]
 800a2c4:	4613      	mov	r3, r2
 800a2c6:	00db      	lsls	r3, r3, #3
 800a2c8:	4413      	add	r3, r2
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	440b      	add	r3, r1
 800a2ce:	333e      	adds	r3, #62	; 0x3e
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	e00b      	b.n	800a2ec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a2d4:	78fb      	ldrb	r3, [r7, #3]
 800a2d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a2da:	68f9      	ldr	r1, [r7, #12]
 800a2dc:	4613      	mov	r3, r2
 800a2de:	00db      	lsls	r3, r3, #3
 800a2e0:	4413      	add	r3, r2
 800a2e2:	009b      	lsls	r3, r3, #2
 800a2e4:	440b      	add	r3, r1
 800a2e6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a2ea:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3714      	adds	r7, #20
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b084      	sub	sp, #16
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	460b      	mov	r3, r1
 800a302:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a304:	2300      	movs	r3, #0
 800a306:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a308:	2300      	movs	r3, #0
 800a30a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a312:	78fa      	ldrb	r2, [r7, #3]
 800a314:	4611      	mov	r1, r2
 800a316:	4618      	mov	r0, r3
 800a318:	f7f9 fbbb 	bl	8003a92 <HAL_PCD_SetAddress>
 800a31c:	4603      	mov	r3, r0
 800a31e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a320:	7bfb      	ldrb	r3, [r7, #15]
 800a322:	4618      	mov	r0, r3
 800a324:	f000 f874 	bl	800a410 <USBD_Get_USB_Status>
 800a328:	4603      	mov	r3, r0
 800a32a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a32c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3710      	adds	r7, #16
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}

0800a336 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a336:	b580      	push	{r7, lr}
 800a338:	b086      	sub	sp, #24
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	60f8      	str	r0, [r7, #12]
 800a33e:	607a      	str	r2, [r7, #4]
 800a340:	603b      	str	r3, [r7, #0]
 800a342:	460b      	mov	r3, r1
 800a344:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a346:	2300      	movs	r3, #0
 800a348:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a34a:	2300      	movs	r3, #0
 800a34c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a354:	7af9      	ldrb	r1, [r7, #11]
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	687a      	ldr	r2, [r7, #4]
 800a35a:	f7f9 fcd4 	bl	8003d06 <HAL_PCD_EP_Transmit>
 800a35e:	4603      	mov	r3, r0
 800a360:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a362:	7dfb      	ldrb	r3, [r7, #23]
 800a364:	4618      	mov	r0, r3
 800a366:	f000 f853 	bl	800a410 <USBD_Get_USB_Status>
 800a36a:	4603      	mov	r3, r0
 800a36c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a36e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a370:	4618      	mov	r0, r3
 800a372:	3718      	adds	r7, #24
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b086      	sub	sp, #24
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	607a      	str	r2, [r7, #4]
 800a382:	603b      	str	r3, [r7, #0]
 800a384:	460b      	mov	r3, r1
 800a386:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a388:	2300      	movs	r3, #0
 800a38a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a38c:	2300      	movs	r3, #0
 800a38e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a396:	7af9      	ldrb	r1, [r7, #11]
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	687a      	ldr	r2, [r7, #4]
 800a39c:	f7f9 fc50 	bl	8003c40 <HAL_PCD_EP_Receive>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3a4:	7dfb      	ldrb	r3, [r7, #23]
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f000 f832 	bl	800a410 <USBD_Get_USB_Status>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a3b0:	7dbb      	ldrb	r3, [r7, #22]
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3718      	adds	r7, #24
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}

0800a3ba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3ba:	b580      	push	{r7, lr}
 800a3bc:	b082      	sub	sp, #8
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
 800a3c2:	460b      	mov	r3, r1
 800a3c4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a3cc:	78fa      	ldrb	r2, [r7, #3]
 800a3ce:	4611      	mov	r1, r2
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f7f9 fc80 	bl	8003cd6 <HAL_PCD_EP_GetRxCount>
 800a3d6:	4603      	mov	r3, r0
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3708      	adds	r7, #8
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b083      	sub	sp, #12
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a3e8:	4b03      	ldr	r3, [pc, #12]	; (800a3f8 <USBD_static_malloc+0x18>)
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	370c      	adds	r7, #12
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f4:	4770      	bx	lr
 800a3f6:	bf00      	nop
 800a3f8:	20002038 	.word	0x20002038

0800a3fc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b083      	sub	sp, #12
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]

}
 800a404:	bf00      	nop
 800a406:	370c      	adds	r7, #12
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr

0800a410 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a410:	b480      	push	{r7}
 800a412:	b085      	sub	sp, #20
 800a414:	af00      	add	r7, sp, #0
 800a416:	4603      	mov	r3, r0
 800a418:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a41a:	2300      	movs	r3, #0
 800a41c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a41e:	79fb      	ldrb	r3, [r7, #7]
 800a420:	2b03      	cmp	r3, #3
 800a422:	d817      	bhi.n	800a454 <USBD_Get_USB_Status+0x44>
 800a424:	a201      	add	r2, pc, #4	; (adr r2, 800a42c <USBD_Get_USB_Status+0x1c>)
 800a426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a42a:	bf00      	nop
 800a42c:	0800a43d 	.word	0x0800a43d
 800a430:	0800a443 	.word	0x0800a443
 800a434:	0800a449 	.word	0x0800a449
 800a438:	0800a44f 	.word	0x0800a44f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a43c:	2300      	movs	r3, #0
 800a43e:	73fb      	strb	r3, [r7, #15]
    break;
 800a440:	e00b      	b.n	800a45a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a442:	2303      	movs	r3, #3
 800a444:	73fb      	strb	r3, [r7, #15]
    break;
 800a446:	e008      	b.n	800a45a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a448:	2301      	movs	r3, #1
 800a44a:	73fb      	strb	r3, [r7, #15]
    break;
 800a44c:	e005      	b.n	800a45a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a44e:	2303      	movs	r3, #3
 800a450:	73fb      	strb	r3, [r7, #15]
    break;
 800a452:	e002      	b.n	800a45a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a454:	2303      	movs	r3, #3
 800a456:	73fb      	strb	r3, [r7, #15]
    break;
 800a458:	bf00      	nop
  }
  return usb_status;
 800a45a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3714      	adds	r7, #20
 800a460:	46bd      	mov	sp, r7
 800a462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a466:	4770      	bx	lr

0800a468 <__libc_init_array>:
 800a468:	b570      	push	{r4, r5, r6, lr}
 800a46a:	4d0d      	ldr	r5, [pc, #52]	; (800a4a0 <__libc_init_array+0x38>)
 800a46c:	4c0d      	ldr	r4, [pc, #52]	; (800a4a4 <__libc_init_array+0x3c>)
 800a46e:	1b64      	subs	r4, r4, r5
 800a470:	10a4      	asrs	r4, r4, #2
 800a472:	2600      	movs	r6, #0
 800a474:	42a6      	cmp	r6, r4
 800a476:	d109      	bne.n	800a48c <__libc_init_array+0x24>
 800a478:	4d0b      	ldr	r5, [pc, #44]	; (800a4a8 <__libc_init_array+0x40>)
 800a47a:	4c0c      	ldr	r4, [pc, #48]	; (800a4ac <__libc_init_array+0x44>)
 800a47c:	f000 f820 	bl	800a4c0 <_init>
 800a480:	1b64      	subs	r4, r4, r5
 800a482:	10a4      	asrs	r4, r4, #2
 800a484:	2600      	movs	r6, #0
 800a486:	42a6      	cmp	r6, r4
 800a488:	d105      	bne.n	800a496 <__libc_init_array+0x2e>
 800a48a:	bd70      	pop	{r4, r5, r6, pc}
 800a48c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a490:	4798      	blx	r3
 800a492:	3601      	adds	r6, #1
 800a494:	e7ee      	b.n	800a474 <__libc_init_array+0xc>
 800a496:	f855 3b04 	ldr.w	r3, [r5], #4
 800a49a:	4798      	blx	r3
 800a49c:	3601      	adds	r6, #1
 800a49e:	e7f2      	b.n	800a486 <__libc_init_array+0x1e>
 800a4a0:	0800a548 	.word	0x0800a548
 800a4a4:	0800a548 	.word	0x0800a548
 800a4a8:	0800a548 	.word	0x0800a548
 800a4ac:	0800a54c 	.word	0x0800a54c

0800a4b0 <memset>:
 800a4b0:	4402      	add	r2, r0
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d100      	bne.n	800a4ba <memset+0xa>
 800a4b8:	4770      	bx	lr
 800a4ba:	f803 1b01 	strb.w	r1, [r3], #1
 800a4be:	e7f9      	b.n	800a4b4 <memset+0x4>

0800a4c0 <_init>:
 800a4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4c2:	bf00      	nop
 800a4c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4c6:	bc08      	pop	{r3}
 800a4c8:	469e      	mov	lr, r3
 800a4ca:	4770      	bx	lr

0800a4cc <_fini>:
 800a4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ce:	bf00      	nop
 800a4d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4d2:	bc08      	pop	{r3}
 800a4d4:	469e      	mov	lr, r3
 800a4d6:	4770      	bx	lr
